
RWS1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001610  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00800060  00001610  000016a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000fd  008000f2  008000f2  00001736  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001736  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  00001766  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002879  00000000  00000000  000018f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075e  00000000  00000000  0000416f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000086e  00000000  00000000  000048cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005b8  00000000  00000000  0000513c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000891  00000000  00000000  000056f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002694  00000000  00000000  00005f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00008619  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	e1 c9       	rjmp	.-3134   	; 0xfffff3ca <__eeprom_end+0xff7ef3ca>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	90 ca       	rjmp	.-2784   	; 0xfffff538 <__eeprom_end+0xff7ef538>
      18:	68 ca       	rjmp	.-2864   	; 0xfffff4ea <__eeprom_end+0xff7ef4ea>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e0 e1       	ldi	r30, 0x10	; 16
      3a:	f6 e1       	ldi	r31, 0x16	; 22
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	a2 3f       	cpi	r26, 0xF2	; 242
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	21 e0       	ldi	r18, 0x01	; 1
      4a:	a2 ef       	ldi	r26, 0xF2	; 242
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	af 3e       	cpi	r26, 0xEF	; 239
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	09 d9       	rcall	.-3566   	; 0xfffff26c <__eeprom_end+0xff7ef26c>
      5a:	d8 ca       	rjmp	.-2640   	; 0xfffff60c <__eeprom_end+0xff7ef60c>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <null_ptr_check>:
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
      5e:	fc 01       	movw	r30, r24
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
      60:	00 97       	sbiw	r24, 0x00	; 0
      62:	81 f0       	breq	.+32     	; 0x84 <null_ptr_check+0x26>
      64:	83 81       	ldd	r24, Z+3	; 0x03
      66:	94 81       	ldd	r25, Z+4	; 0x04
		if (rslt == BME280_OK)
			parse_device_settings(reg_data, &dev->settings);
	}

	return rslt;
}
      68:	89 2b       	or	r24, r25
      6a:	71 f0       	breq	.+28     	; 0x88 <null_ptr_check+0x2a>
      6c:	85 81       	ldd	r24, Z+5	; 0x05
      6e:	96 81       	ldd	r25, Z+6	; 0x06
      70:	89 2b       	or	r24, r25
      72:	61 f0       	breq	.+24     	; 0x8c <null_ptr_check+0x2e>
      74:	81 e0       	ldi	r24, 0x01	; 1
      76:	27 81       	ldd	r18, Z+7	; 0x07
      78:	30 85       	ldd	r19, Z+8	; 0x08
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
      7a:	23 2b       	or	r18, r19
      7c:	09 f0       	breq	.+2      	; 0x80 <null_ptr_check+0x22>
      7e:	80 e0       	ldi	r24, 0x00	; 0
      80:	81 95       	neg	r24
      82:	08 95       	ret
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
      84:	8f ef       	ldi	r24, 0xFF	; 255
      86:	08 95       	ret
      88:	8f ef       	ldi	r24, 0xFF	; 255
      8a:	08 95       	ret
      8c:	8f ef       	ldi	r24, 0xFF	; 255
		/* Device structure is fine */
		rslt = BME280_OK;
	}

	return rslt;
}
      8e:	08 95       	ret

00000090 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
      90:	df 92       	push	r13
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	cf 93       	push	r28
      9c:	df 93       	push	r29
      9e:	d8 2e       	mov	r13, r24
      a0:	8b 01       	movw	r16, r22
      a2:	7a 01       	movw	r14, r20
      a4:	e9 01       	movw	r28, r18
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
      a6:	c9 01       	movw	r24, r18
      a8:	da df       	rcall	.-76     	; 0x5e <null_ptr_check>
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
      aa:	81 11       	cpse	r24, r1
      ac:	0f c0       	rjmp	.+30     	; 0xcc <bme280_get_regs+0x3c>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
      ae:	8a 81       	ldd	r24, Y+2	; 0x02
      b0:	81 30       	cpi	r24, 0x01	; 1
      b2:	19 f0       	breq	.+6      	; 0xba <bme280_get_regs+0x2a>
			reg_addr = reg_addr | 0x80;
      b4:	8d 2d       	mov	r24, r13
      b6:	80 68       	ori	r24, 0x80	; 128
      b8:	d8 2e       	mov	r13, r24
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
      ba:	eb 81       	ldd	r30, Y+3	; 0x03
      bc:	fc 81       	ldd	r31, Y+4	; 0x04
      be:	97 01       	movw	r18, r14
      c0:	a8 01       	movw	r20, r16
      c2:	6d 2d       	mov	r22, r13
      c4:	89 81       	ldd	r24, Y+1	; 0x01
      c6:	09 95       	icall
		/* Check for communication error */
		if (rslt != BME280_OK)
      c8:	81 11       	cpse	r24, r1
			rslt = BME280_E_COMM_FAIL;
      ca:	8c ef       	ldi	r24, 0xFC	; 252
	}

	return rslt;
}
      cc:	df 91       	pop	r29
      ce:	cf 91       	pop	r28
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	df 90       	pop	r13
      da:	08 95       	ret

000000dc <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
      dc:	8f 92       	push	r8
      de:	9f 92       	push	r9
      e0:	af 92       	push	r10
      e2:	bf 92       	push	r11
      e4:	df 92       	push	r13
      e6:	ef 92       	push	r14
      e8:	ff 92       	push	r15
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
      f6:	64 97       	sbiw	r28, 0x14	; 20
      f8:	0f b6       	in	r0, 0x3f	; 63
      fa:	f8 94       	cli
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	0f be       	out	0x3f, r0	; 63
     100:	cd bf       	out	0x3d, r28	; 61
     102:	8c 01       	movw	r16, r24
     104:	5b 01       	movw	r10, r22
     106:	79 01       	movw	r14, r18
     108:	d4 2e       	mov	r13, r20
     10a:	8a e0       	ldi	r24, 0x0A	; 10
     10c:	84 17       	cp	r24, r20
     10e:	20 f4       	brcc	.+8      	; 0x118 <bme280_set_regs+0x3c>
     110:	0f 2e       	mov	r0, r31
     112:	fa e0       	ldi	r31, 0x0A	; 10
     114:	df 2e       	mov	r13, r31
     116:	f0 2d       	mov	r31, r0

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
     118:	c7 01       	movw	r24, r14
     11a:	a1 df       	rcall	.-190    	; 0x5e <null_ptr_check>
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
     11c:	81 11       	cpse	r24, r1
     11e:	58 c0       	rjmp	.+176    	; 0x1d0 <bme280_set_regs+0xf4>
     120:	01 15       	cp	r16, r1
     122:	11 05       	cpc	r17, r1
     124:	09 f4       	brne	.+2      	; 0x128 <bme280_set_regs+0x4c>
     126:	56 c0       	rjmp	.+172    	; 0x1d4 <bme280_set_regs+0xf8>
     128:	a1 14       	cp	r10, r1
     12a:	b1 04       	cpc	r11, r1
     12c:	09 f4       	brne	.+2      	; 0x130 <bme280_set_regs+0x54>
     12e:	54 c0       	rjmp	.+168    	; 0x1d8 <bme280_set_regs+0xfc>
		if (len != 0) {
     130:	dd 20       	and	r13, r13
     132:	09 f4       	brne	.+2      	; 0x136 <bme280_set_regs+0x5a>
     134:	53 c0       	rjmp	.+166    	; 0x1dc <bme280_set_regs+0x100>
			temp_buff[0] = reg_data[0];
     136:	d5 01       	movw	r26, r10
     138:	8c 91       	ld	r24, X
     13a:	89 83       	std	Y+1, r24	; 0x01
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
     13c:	f7 01       	movw	r30, r14
     13e:	82 81       	ldd	r24, Z+2	; 0x02
     140:	81 30       	cpi	r24, 0x01	; 1
     142:	51 f0       	breq	.+20     	; 0x158 <bme280_set_regs+0x7c>
     144:	90 2f       	mov	r25, r16
     146:	e0 2f       	mov	r30, r16
     148:	f1 2f       	mov	r31, r17
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
     14a:	80 81       	ld	r24, Z
     14c:	8f 77       	andi	r24, 0x7F	; 127
     14e:	81 93       	st	Z+, r24
     150:	8e 2f       	mov	r24, r30
     152:	89 1b       	sub	r24, r25
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
		if (len != 0) {
			temp_buff[0] = reg_data[0];
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
     154:	8d 15       	cp	r24, r13
     156:	c8 f3       	brcs	.-14     	; 0x14a <bme280_set_regs+0x6e>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
			}
			/* Burst write mode */
			if (len > 1) {
     158:	f1 e0       	ldi	r31, 0x01	; 1
     15a:	fd 15       	cp	r31, r13
     15c:	30 f5       	brcc	.+76     	; 0x1aa <bme280_set_regs+0xce>
     15e:	48 01       	movw	r8, r16
     160:	8f ef       	ldi	r24, 0xFF	; 255
     162:	88 1a       	sub	r8, r24
     164:	98 0a       	sbc	r9, r24
     166:	b5 01       	movw	r22, r10
     168:	6f 5f       	subi	r22, 0xFF	; 255
     16a:	7f 4f       	sbci	r23, 0xFF	; 255
     16c:	fe 01       	movw	r30, r28
     16e:	33 96       	adiw	r30, 0x03	; 3
     170:	8e ef       	ldi	r24, 0xFE	; 254
     172:	8d 0d       	add	r24, r13
     174:	98 01       	movw	r18, r16
     176:	2e 5f       	subi	r18, 0xFE	; 254
     178:	3f 4f       	sbci	r19, 0xFF	; 255
     17a:	28 0f       	add	r18, r24
     17c:	31 1d       	adc	r19, r1
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
	uint8_t index;

	for (index = 1; index < len; index++) {
		temp_buff[(index * 2) - 1] = reg_addr[index];
     17e:	d4 01       	movw	r26, r8
     180:	4d 91       	ld	r20, X+
     182:	4d 01       	movw	r8, r26
     184:	cf 01       	movw	r24, r30
     186:	01 97       	sbiw	r24, 0x01	; 1
     188:	dc 01       	movw	r26, r24
     18a:	4c 93       	st	X, r20
		temp_buff[index * 2] = reg_data[index];
     18c:	db 01       	movw	r26, r22
     18e:	8d 91       	ld	r24, X+
     190:	bd 01       	movw	r22, r26
     192:	80 83       	st	Z, r24
     194:	32 96       	adiw	r30, 0x02	; 2
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
	uint8_t index;

	for (index = 1; index < len; index++) {
     196:	82 16       	cp	r8, r18
     198:	93 06       	cpc	r9, r19
     19a:	89 f7       	brne	.-30     	; 0x17e <bme280_set_regs+0xa2>
			/* Burst write mode */
			if (len > 1) {
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
				temp_len = ((len * 2) - 1);
     19c:	2d 2d       	mov	r18, r13
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	22 0f       	add	r18, r18
     1a2:	33 1f       	adc	r19, r19
     1a4:	21 50       	subi	r18, 0x01	; 1
     1a6:	31 09       	sbc	r19, r1
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <bme280_set_regs+0xd2>
			} else {
				temp_len = len;
     1aa:	2d 2d       	mov	r18, r13
     1ac:	30 e0       	ldi	r19, 0x00	; 0
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
     1ae:	d7 01       	movw	r26, r14
     1b0:	15 96       	adiw	r26, 0x05	; 5
     1b2:	ed 91       	ld	r30, X+
     1b4:	fc 91       	ld	r31, X
     1b6:	16 97       	sbiw	r26, 0x06	; 6
     1b8:	ae 01       	movw	r20, r28
     1ba:	4f 5f       	subi	r20, 0xFF	; 255
     1bc:	5f 4f       	sbci	r21, 0xFF	; 255
     1be:	d8 01       	movw	r26, r16
     1c0:	6c 91       	ld	r22, X
     1c2:	d7 01       	movw	r26, r14
     1c4:	11 96       	adiw	r26, 0x01	; 1
     1c6:	8c 91       	ld	r24, X
     1c8:	09 95       	icall
			/* Check for communication error */
			if (rslt != BME280_OK)
     1ca:	88 23       	and	r24, r24
     1cc:	51 f0       	breq	.+20     	; 0x1e2 <bme280_set_regs+0x106>
     1ce:	08 c0       	rjmp	.+16     	; 0x1e0 <bme280_set_regs+0x104>
				rslt = BME280_E_COMM_FAIL;
		} else {
			rslt = BME280_E_INVALID_LEN;
		}
	} else {
		rslt = BME280_E_NULL_PTR;
     1d0:	8f ef       	ldi	r24, 0xFF	; 255
     1d2:	07 c0       	rjmp	.+14     	; 0x1e2 <bme280_set_regs+0x106>
     1d4:	8f ef       	ldi	r24, 0xFF	; 255
     1d6:	05 c0       	rjmp	.+10     	; 0x1e2 <bme280_set_regs+0x106>
     1d8:	8f ef       	ldi	r24, 0xFF	; 255
     1da:	03 c0       	rjmp	.+6      	; 0x1e2 <bme280_set_regs+0x106>
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
			/* Check for communication error */
			if (rslt != BME280_OK)
				rslt = BME280_E_COMM_FAIL;
		} else {
			rslt = BME280_E_INVALID_LEN;
     1dc:	8d ef       	ldi	r24, 0xFD	; 253
     1de:	01 c0       	rjmp	.+2      	; 0x1e2 <bme280_set_regs+0x106>
				temp_len = len;
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
			/* Check for communication error */
			if (rslt != BME280_OK)
				rslt = BME280_E_COMM_FAIL;
     1e0:	8c ef       	ldi	r24, 0xFC	; 252
		rslt = BME280_E_NULL_PTR;
	}


	return rslt;
}
     1e2:	64 96       	adiw	r28, 0x14	; 20
     1e4:	0f b6       	in	r0, 0x3f	; 63
     1e6:	f8 94       	cli
     1e8:	de bf       	out	0x3e, r29	; 62
     1ea:	0f be       	out	0x3f, r0	; 63
     1ec:	cd bf       	out	0x3d, r28	; 61
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	1f 91       	pop	r17
     1f4:	0f 91       	pop	r16
     1f6:	ff 90       	pop	r15
     1f8:	ef 90       	pop	r14
     1fa:	df 90       	pop	r13
     1fc:	bf 90       	pop	r11
     1fe:	af 90       	pop	r10
     200:	9f 90       	pop	r9
     202:	8f 90       	pop	r8
     204:	08 95       	ret

00000206 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	00 d0       	rcall	.+0      	; 0x216 <set_osr_settings+0x10>
     216:	1f 92       	push	r1
     218:	cd b7       	in	r28, 0x3d	; 61
     21a:	de b7       	in	r29, 0x3e	; 62
     21c:	d8 2e       	mov	r13, r24
     21e:	7b 01       	movw	r14, r22
     220:	8a 01       	movw	r16, r20
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;

	if (desired_settings & BME280_OSR_HUM_SEL)
     222:	82 ff       	sbrs	r24, 2
     224:	24 c0       	rjmp	.+72     	; 0x26e <set_osr_settings+0x68>
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
     226:	82 ef       	ldi	r24, 0xF2	; 242
     228:	89 83       	std	Y+1, r24	; 0x01

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
     22a:	fb 01       	movw	r30, r22
     22c:	82 81       	ldd	r24, Z+2	; 0x02
     22e:	87 70       	andi	r24, 0x07	; 7
     230:	8b 83       	std	Y+3, r24	; 0x03
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
     232:	9a 01       	movw	r18, r20
     234:	41 e0       	ldi	r20, 0x01	; 1
     236:	be 01       	movw	r22, r28
     238:	6d 5f       	subi	r22, 0xFD	; 253
     23a:	7f 4f       	sbci	r23, 0xFF	; 255
     23c:	ce 01       	movw	r24, r28
     23e:	01 96       	adiw	r24, 0x01	; 1
     240:	4d df       	rcall	.-358    	; 0xdc <bme280_set_regs>
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
     242:	81 11       	cpse	r24, r1
     244:	15 c0       	rjmp	.+42     	; 0x270 <set_osr_settings+0x6a>
		reg_addr = BME280_CTRL_MEAS_ADDR;
     246:	84 ef       	ldi	r24, 0xF4	; 244
     248:	89 83       	std	Y+1, r24	; 0x01
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
     24a:	98 01       	movw	r18, r16
     24c:	41 e0       	ldi	r20, 0x01	; 1
     24e:	50 e0       	ldi	r21, 0x00	; 0
     250:	be 01       	movw	r22, r28
     252:	6e 5f       	subi	r22, 0xFE	; 254
     254:	7f 4f       	sbci	r23, 0xFF	; 255
     256:	1c df       	rcall	.-456    	; 0x90 <bme280_get_regs>
		if (rslt == BME280_OK)
     258:	81 11       	cpse	r24, r1
     25a:	0a c0       	rjmp	.+20     	; 0x270 <set_osr_settings+0x6a>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
     25c:	98 01       	movw	r18, r16
     25e:	41 e0       	ldi	r20, 0x01	; 1
     260:	be 01       	movw	r22, r28
     262:	6e 5f       	subi	r22, 0xFE	; 254
     264:	7f 4f       	sbci	r23, 0xFF	; 255
     266:	ce 01       	movw	r24, r28
     268:	01 96       	adiw	r24, 0x01	; 1
     26a:	38 df       	rcall	.-400    	; 0xdc <bme280_set_regs>
     26c:	01 c0       	rjmp	.+2      	; 0x270 <set_osr_settings+0x6a>
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
     26e:	81 e0       	ldi	r24, 0x01	; 1

	if (desired_settings & BME280_OSR_HUM_SEL)
		rslt = set_osr_humidity_settings(settings, dev);
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
     270:	9d 2d       	mov	r25, r13
     272:	93 70       	andi	r25, 0x03	; 3
     274:	51 f1       	breq	.+84     	; 0x2ca <set_osr_settings+0xc4>
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
     276:	84 ef       	ldi	r24, 0xF4	; 244
     278:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
     27a:	98 01       	movw	r18, r16
     27c:	41 e0       	ldi	r20, 0x01	; 1
     27e:	50 e0       	ldi	r21, 0x00	; 0
     280:	be 01       	movw	r22, r28
     282:	6f 5f       	subi	r22, 0xFF	; 255
     284:	7f 4f       	sbci	r23, 0xFF	; 255
     286:	04 df       	rcall	.-504    	; 0x90 <bme280_get_regs>

	if (rslt == BME280_OK) {
     288:	81 11       	cpse	r24, r1
     28a:	1f c0       	rjmp	.+62     	; 0x2ca <set_osr_settings+0xc4>
		if (desired_settings & BME280_OSR_PRESS_SEL)
     28c:	d0 fe       	sbrs	r13, 0
     28e:	09 c0       	rjmp	.+18     	; 0x2a2 <set_osr_settings+0x9c>
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
     290:	f7 01       	movw	r30, r14
     292:	90 81       	ld	r25, Z
     294:	99 0f       	add	r25, r25
     296:	99 0f       	add	r25, r25
     298:	9c 71       	andi	r25, 0x1C	; 28
     29a:	89 81       	ldd	r24, Y+1	; 0x01
     29c:	83 7e       	andi	r24, 0xE3	; 227
     29e:	89 2b       	or	r24, r25
     2a0:	89 83       	std	Y+1, r24	; 0x01
	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);

	if (rslt == BME280_OK) {
		if (desired_settings & BME280_OSR_PRESS_SEL)
			fill_osr_press_settings(&reg_data, settings);
		if (desired_settings & BME280_OSR_TEMP_SEL)
     2a2:	d1 fe       	sbrs	r13, 1
     2a4:	0a c0       	rjmp	.+20     	; 0x2ba <set_osr_settings+0xb4>
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
     2a6:	f7 01       	movw	r30, r14
     2a8:	81 81       	ldd	r24, Z+1	; 0x01
     2aa:	f0 e2       	ldi	r31, 0x20	; 32
     2ac:	8f 9f       	mul	r24, r31
     2ae:	c0 01       	movw	r24, r0
     2b0:	11 24       	eor	r1, r1
     2b2:	99 81       	ldd	r25, Y+1	; 0x01
     2b4:	9f 71       	andi	r25, 0x1F	; 31
     2b6:	89 2b       	or	r24, r25
     2b8:	89 83       	std	Y+1, r24	; 0x01
		if (desired_settings & BME280_OSR_PRESS_SEL)
			fill_osr_press_settings(&reg_data, settings);
		if (desired_settings & BME280_OSR_TEMP_SEL)
			fill_osr_temp_settings(&reg_data, settings);
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
     2ba:	98 01       	movw	r18, r16
     2bc:	41 e0       	ldi	r20, 0x01	; 1
     2be:	be 01       	movw	r22, r28
     2c0:	6f 5f       	subi	r22, 0xFF	; 255
     2c2:	7f 4f       	sbci	r23, 0xFF	; 255
     2c4:	ce 01       	movw	r24, r28
     2c6:	02 96       	adiw	r24, 0x02	; 2
     2c8:	09 df       	rcall	.-494    	; 0xdc <bme280_set_regs>
		rslt = set_osr_humidity_settings(settings, dev);
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);

	return rslt;
}
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
     2ce:	0f 90       	pop	r0
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	1f 91       	pop	r17
     2d6:	0f 91       	pop	r16
     2d8:	ff 90       	pop	r15
     2da:	ef 90       	pop	r14
     2dc:	df 90       	pop	r13
     2de:	08 95       	ret

000002e0 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
     2e0:	df 92       	push	r13
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	0f 93       	push	r16
     2e8:	1f 93       	push	r17
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	00 d0       	rcall	.+0      	; 0x2f0 <set_filter_standby_settings+0x10>
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
     2f4:	d8 2e       	mov	r13, r24
     2f6:	7b 01       	movw	r14, r22
     2f8:	8a 01       	movw	r16, r20
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
     2fa:	85 ef       	ldi	r24, 0xF5	; 245
     2fc:	89 83       	std	Y+1, r24	; 0x01
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
     2fe:	9a 01       	movw	r18, r20
     300:	41 e0       	ldi	r20, 0x01	; 1
     302:	50 e0       	ldi	r21, 0x00	; 0
     304:	be 01       	movw	r22, r28
     306:	6e 5f       	subi	r22, 0xFE	; 254
     308:	7f 4f       	sbci	r23, 0xFF	; 255
     30a:	c2 de       	rcall	.-636    	; 0x90 <bme280_get_regs>

	if (rslt == BME280_OK) {
     30c:	81 11       	cpse	r24, r1
     30e:	1f c0       	rjmp	.+62     	; 0x34e <set_filter_standby_settings+0x6e>
		if (desired_settings & BME280_FILTER_SEL)
     310:	d3 fe       	sbrs	r13, 3
     312:	09 c0       	rjmp	.+18     	; 0x326 <set_filter_standby_settings+0x46>
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
     314:	f7 01       	movw	r30, r14
     316:	93 81       	ldd	r25, Z+3	; 0x03
     318:	99 0f       	add	r25, r25
     31a:	99 0f       	add	r25, r25
     31c:	9c 71       	andi	r25, 0x1C	; 28
     31e:	8a 81       	ldd	r24, Y+2	; 0x02
     320:	83 7e       	andi	r24, 0xE3	; 227
     322:	89 2b       	or	r24, r25
     324:	8a 83       	std	Y+2, r24	; 0x02
	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);

	if (rslt == BME280_OK) {
		if (desired_settings & BME280_FILTER_SEL)
			fill_filter_settings(&reg_data, settings);
		if (desired_settings & BME280_STANDBY_SEL)
     326:	d4 fe       	sbrs	r13, 4
     328:	0a c0       	rjmp	.+20     	; 0x33e <set_filter_standby_settings+0x5e>
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
     32a:	f7 01       	movw	r30, r14
     32c:	84 81       	ldd	r24, Z+4	; 0x04
     32e:	f0 e2       	ldi	r31, 0x20	; 32
     330:	8f 9f       	mul	r24, r31
     332:	c0 01       	movw	r24, r0
     334:	11 24       	eor	r1, r1
     336:	9a 81       	ldd	r25, Y+2	; 0x02
     338:	9f 71       	andi	r25, 0x1F	; 31
     33a:	89 2b       	or	r24, r25
     33c:	8a 83       	std	Y+2, r24	; 0x02
		if (desired_settings & BME280_FILTER_SEL)
			fill_filter_settings(&reg_data, settings);
		if (desired_settings & BME280_STANDBY_SEL)
			fill_standby_settings(&reg_data, settings);
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
     33e:	98 01       	movw	r18, r16
     340:	41 e0       	ldi	r20, 0x01	; 1
     342:	be 01       	movw	r22, r28
     344:	6e 5f       	subi	r22, 0xFE	; 254
     346:	7f 4f       	sbci	r23, 0xFF	; 255
     348:	ce 01       	movw	r24, r28
     34a:	01 96       	adiw	r24, 0x01	; 1
     34c:	c7 de       	rcall	.-626    	; 0xdc <bme280_set_regs>
	}

	return rslt;
}
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	1f 91       	pop	r17
     358:	0f 91       	pop	r16
     35a:	ff 90       	pop	r15
     35c:	ef 90       	pop	r14
     35e:	df 90       	pop	r13
     360:	08 95       	ret

00000362 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	8c 01       	movw	r16, r24
     36c:	eb 01       	movw	r28, r22
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
     36e:	cb 01       	movw	r24, r22
     370:	76 de       	rcall	.-788    	; 0x5e <null_ptr_check>

	if (rslt == BME280_OK) {
     372:	81 11       	cpse	r24, r1
     374:	0a c0       	rjmp	.+20     	; 0x38a <bme280_get_sensor_mode+0x28>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
     376:	9e 01       	movw	r18, r28
     378:	41 e0       	ldi	r20, 0x01	; 1
     37a:	50 e0       	ldi	r21, 0x00	; 0
     37c:	b8 01       	movw	r22, r16
     37e:	84 ef       	ldi	r24, 0xF4	; 244
     380:	87 de       	rcall	.-754    	; 0x90 <bme280_get_regs>
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
     382:	f8 01       	movw	r30, r16
     384:	90 81       	ld	r25, Z
     386:	93 70       	andi	r25, 0x03	; 3
     388:	90 83       	st	Z, r25
	}

	return rslt;
}
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	1f 91       	pop	r17
     390:	0f 91       	pop	r16
     392:	08 95       	ret

00000394 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
     394:	ff 92       	push	r15
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <bme280_soft_reset+0xc>
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	8c 01       	movw	r16, r24
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
     3a6:	80 ee       	ldi	r24, 0xE0	; 224
     3a8:	89 83       	std	Y+1, r24	; 0x01
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
     3aa:	86 eb       	ldi	r24, 0xB6	; 182
     3ac:	8a 83       	std	Y+2, r24	; 0x02

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
     3ae:	c8 01       	movw	r24, r16
     3b0:	56 de       	rcall	.-852    	; 0x5e <null_ptr_check>
     3b2:	f8 2e       	mov	r15, r24
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
     3b4:	81 11       	cpse	r24, r1
     3b6:	13 c0       	rjmp	.+38     	; 0x3de <bme280_soft_reset+0x4a>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
     3b8:	98 01       	movw	r18, r16
     3ba:	41 e0       	ldi	r20, 0x01	; 1
     3bc:	be 01       	movw	r22, r28
     3be:	6e 5f       	subi	r22, 0xFE	; 254
     3c0:	7f 4f       	sbci	r23, 0xFF	; 255
     3c2:	ce 01       	movw	r24, r28
     3c4:	01 96       	adiw	r24, 0x01	; 1
     3c6:	8a de       	rcall	.-748    	; 0xdc <bme280_set_regs>
     3c8:	f8 2e       	mov	r15, r24
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
     3ca:	d8 01       	movw	r26, r16
     3cc:	17 96       	adiw	r26, 0x07	; 7
     3ce:	ed 91       	ld	r30, X+
     3d0:	fc 91       	ld	r31, X
     3d2:	18 97       	sbiw	r26, 0x08	; 8
     3d4:	62 e0       	ldi	r22, 0x02	; 2
     3d6:	70 e0       	ldi	r23, 0x00	; 0
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	09 95       	icall
	}

	return rslt;
}
     3de:	8f 2d       	mov	r24, r15
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	1f 91       	pop	r17
     3ea:	0f 91       	pop	r16
     3ec:	ff 90       	pop	r15
     3ee:	08 95       	ret

000003f0 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
     3f0:	ff 92       	push	r15
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	6b 97       	sbiw	r28, 0x1b	; 27
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	f8 94       	cli
     404:	de bf       	out	0x3e, r29	; 62
     406:	0f be       	out	0x3f, r0	; 63
     408:	cd bf       	out	0x3d, r28	; 61
     40a:	8c 01       	movw	r16, r24
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
	uint8_t chip_id = 0;
     40c:	19 82       	std	Y+1, r1	; 0x01

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
     40e:	27 de       	rcall	.-946    	; 0x5e <null_ptr_check>
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
     410:	81 11       	cpse	r24, r1
     412:	e4 c0       	rjmp	.+456    	; 0x5dc <__stack+0x17d>
     414:	0f 2e       	mov	r0, r31
     416:	f5 e0       	ldi	r31, 0x05	; 5
     418:	ff 2e       	mov	r15, r31
     41a:	f0 2d       	mov	r31, r0
		while (try_count) {
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
     41c:	98 01       	movw	r18, r16
     41e:	41 e0       	ldi	r20, 0x01	; 1
     420:	50 e0       	ldi	r21, 0x00	; 0
     422:	be 01       	movw	r22, r28
     424:	6f 5f       	subi	r22, 0xFF	; 255
     426:	7f 4f       	sbci	r23, 0xFF	; 255
     428:	80 ed       	ldi	r24, 0xD0	; 208
     42a:	32 de       	rcall	.-924    	; 0x90 <bme280_get_regs>
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
     42c:	81 11       	cpse	r24, r1
     42e:	c6 c0       	rjmp	.+396    	; 0x5bc <__stack+0x15d>
     430:	89 81       	ldd	r24, Y+1	; 0x01
     432:	80 36       	cpi	r24, 0x60	; 96
     434:	09 f0       	breq	.+2      	; 0x438 <bme280_init+0x48>
     436:	c2 c0       	rjmp	.+388    	; 0x5bc <__stack+0x15d>
				dev->chip_id = chip_id;
     438:	d8 01       	movw	r26, r16
     43a:	8c 93       	st	X, r24
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
     43c:	c8 01       	movw	r24, r16
     43e:	aa df       	rcall	.-172    	; 0x394 <bme280_soft_reset>
				if (rslt == BME280_OK) {
     440:	81 11       	cpse	r24, r1
     442:	c9 c0       	rjmp	.+402    	; 0x5d6 <__stack+0x177>
static int8_t get_calib_data(struct bme280_dev *dev)
{
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
     444:	be 01       	movw	r22, r28
     446:	6e 5f       	subi	r22, 0xFE	; 254
     448:	7f 4f       	sbci	r23, 0xFF	; 255
     44a:	8a e1       	ldi	r24, 0x1A	; 26
     44c:	fb 01       	movw	r30, r22
     44e:	11 92       	st	Z+, r1
     450:	8a 95       	dec	r24
     452:	e9 f7       	brne	.-6      	; 0x44e <bme280_init+0x5e>

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
     454:	98 01       	movw	r18, r16
     456:	4a e1       	ldi	r20, 0x1A	; 26
     458:	50 e0       	ldi	r21, 0x00	; 0
     45a:	88 e8       	ldi	r24, 0x88	; 136
     45c:	19 de       	rcall	.-974    	; 0x90 <bme280_get_regs>

	if (rslt == BME280_OK) {
     45e:	81 11       	cpse	r24, r1
     460:	ba c0       	rjmp	.+372    	; 0x5d6 <__stack+0x177>
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
	struct bme280_calib_data *calib_data = &dev->calib_data;

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
     462:	8b 81       	ldd	r24, Y+3	; 0x03
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	98 2f       	mov	r25, r24
     468:	88 27       	eor	r24, r24
     46a:	2a 81       	ldd	r18, Y+2	; 0x02
     46c:	82 2b       	or	r24, r18
     46e:	d8 01       	movw	r26, r16
     470:	1a 96       	adiw	r26, 0x0a	; 10
     472:	9c 93       	st	X, r25
     474:	8e 93       	st	-X, r24
     476:	19 97       	sbiw	r26, 0x09	; 9
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
     478:	8d 81       	ldd	r24, Y+5	; 0x05
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	98 2f       	mov	r25, r24
     47e:	88 27       	eor	r24, r24
     480:	2c 81       	ldd	r18, Y+4	; 0x04
     482:	82 2b       	or	r24, r18
     484:	1c 96       	adiw	r26, 0x0c	; 12
     486:	9c 93       	st	X, r25
     488:	8e 93       	st	-X, r24
     48a:	1b 97       	sbiw	r26, 0x0b	; 11
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
     48c:	8f 81       	ldd	r24, Y+7	; 0x07
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	98 2f       	mov	r25, r24
     492:	88 27       	eor	r24, r24
     494:	2e 81       	ldd	r18, Y+6	; 0x06
     496:	82 2b       	or	r24, r18
     498:	1e 96       	adiw	r26, 0x0e	; 14
     49a:	9c 93       	st	X, r25
     49c:	8e 93       	st	-X, r24
     49e:	1d 97       	sbiw	r26, 0x0d	; 13
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
     4a0:	89 85       	ldd	r24, Y+9	; 0x09
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	98 2f       	mov	r25, r24
     4a6:	88 27       	eor	r24, r24
     4a8:	28 85       	ldd	r18, Y+8	; 0x08
     4aa:	82 2b       	or	r24, r18
     4ac:	50 96       	adiw	r26, 0x10	; 16
     4ae:	9c 93       	st	X, r25
     4b0:	8e 93       	st	-X, r24
     4b2:	1f 97       	sbiw	r26, 0x0f	; 15
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
     4b4:	8b 85       	ldd	r24, Y+11	; 0x0b
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	98 2f       	mov	r25, r24
     4ba:	88 27       	eor	r24, r24
     4bc:	2a 85       	ldd	r18, Y+10	; 0x0a
     4be:	82 2b       	or	r24, r18
     4c0:	52 96       	adiw	r26, 0x12	; 18
     4c2:	9c 93       	st	X, r25
     4c4:	8e 93       	st	-X, r24
     4c6:	51 97       	sbiw	r26, 0x11	; 17
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
     4c8:	8d 85       	ldd	r24, Y+13	; 0x0d
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	98 2f       	mov	r25, r24
     4ce:	88 27       	eor	r24, r24
     4d0:	2c 85       	ldd	r18, Y+12	; 0x0c
     4d2:	82 2b       	or	r24, r18
     4d4:	54 96       	adiw	r26, 0x14	; 20
     4d6:	9c 93       	st	X, r25
     4d8:	8e 93       	st	-X, r24
     4da:	53 97       	sbiw	r26, 0x13	; 19
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
     4dc:	8f 85       	ldd	r24, Y+15	; 0x0f
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	98 2f       	mov	r25, r24
     4e2:	88 27       	eor	r24, r24
     4e4:	2e 85       	ldd	r18, Y+14	; 0x0e
     4e6:	82 2b       	or	r24, r18
     4e8:	56 96       	adiw	r26, 0x16	; 22
     4ea:	9c 93       	st	X, r25
     4ec:	8e 93       	st	-X, r24
     4ee:	55 97       	sbiw	r26, 0x15	; 21
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
     4f0:	89 89       	ldd	r24, Y+17	; 0x11
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	98 2f       	mov	r25, r24
     4f6:	88 27       	eor	r24, r24
     4f8:	28 89       	ldd	r18, Y+16	; 0x10
     4fa:	82 2b       	or	r24, r18
     4fc:	58 96       	adiw	r26, 0x18	; 24
     4fe:	9c 93       	st	X, r25
     500:	8e 93       	st	-X, r24
     502:	57 97       	sbiw	r26, 0x17	; 23
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
     504:	8b 89       	ldd	r24, Y+19	; 0x13
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	98 2f       	mov	r25, r24
     50a:	88 27       	eor	r24, r24
     50c:	2a 89       	ldd	r18, Y+18	; 0x12
     50e:	82 2b       	or	r24, r18
     510:	5a 96       	adiw	r26, 0x1a	; 26
     512:	9c 93       	st	X, r25
     514:	8e 93       	st	-X, r24
     516:	59 97       	sbiw	r26, 0x19	; 25
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
     518:	8d 89       	ldd	r24, Y+21	; 0x15
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	98 2f       	mov	r25, r24
     51e:	88 27       	eor	r24, r24
     520:	2c 89       	ldd	r18, Y+20	; 0x14
     522:	82 2b       	or	r24, r18
     524:	5c 96       	adiw	r26, 0x1c	; 28
     526:	9c 93       	st	X, r25
     528:	8e 93       	st	-X, r24
     52a:	5b 97       	sbiw	r26, 0x1b	; 27
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
     52c:	8f 89       	ldd	r24, Y+23	; 0x17
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	98 2f       	mov	r25, r24
     532:	88 27       	eor	r24, r24
     534:	2e 89       	ldd	r18, Y+22	; 0x16
     536:	82 2b       	or	r24, r18
     538:	5e 96       	adiw	r26, 0x1e	; 30
     53a:	9c 93       	st	X, r25
     53c:	8e 93       	st	-X, r24
     53e:	5d 97       	sbiw	r26, 0x1d	; 29
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
     540:	89 8d       	ldd	r24, Y+25	; 0x19
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	98 2f       	mov	r25, r24
     546:	88 27       	eor	r24, r24
     548:	28 8d       	ldd	r18, Y+24	; 0x18
     54a:	82 2b       	or	r24, r18
     54c:	90 96       	adiw	r26, 0x20	; 32
     54e:	9c 93       	st	X, r25
     550:	8e 93       	st	-X, r24
     552:	5f 97       	sbiw	r26, 0x1f	; 31
	calib_data->dig_H1 = reg_data[25];
     554:	8b 8d       	ldd	r24, Y+27	; 0x1b
     556:	91 96       	adiw	r26, 0x21	; 33
     558:	8c 93       	st	X, r24
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
     55a:	98 01       	movw	r18, r16
     55c:	47 e0       	ldi	r20, 0x07	; 7
     55e:	50 e0       	ldi	r21, 0x00	; 0
     560:	be 01       	movw	r22, r28
     562:	6e 5f       	subi	r22, 0xFE	; 254
     564:	7f 4f       	sbci	r23, 0xFF	; 255
     566:	81 ee       	ldi	r24, 0xE1	; 225
     568:	93 dd       	rcall	.-1242   	; 0x90 <bme280_get_regs>
		if (rslt == BME280_OK) {
     56a:	81 11       	cpse	r24, r1
     56c:	34 c0       	rjmp	.+104    	; 0x5d6 <__stack+0x177>
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
     56e:	2b 81       	ldd	r18, Y+3	; 0x03
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	32 2f       	mov	r19, r18
     574:	22 27       	eor	r18, r18
     576:	9a 81       	ldd	r25, Y+2	; 0x02
     578:	29 2b       	or	r18, r25
     57a:	f8 01       	movw	r30, r16
     57c:	33 a3       	std	Z+35, r19	; 0x23
     57e:	22 a3       	std	Z+34, r18	; 0x22
	calib_data->dig_H3 = reg_data[2];
     580:	9c 81       	ldd	r25, Y+4	; 0x04
     582:	94 a3       	std	Z+36, r25	; 0x24

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
     584:	9e 81       	ldd	r25, Y+6	; 0x06
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
	calib_data->dig_H3 = reg_data[2];

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
     586:	2d 81       	ldd	r18, Y+5	; 0x05
     588:	f0 e1       	ldi	r31, 0x10	; 16
     58a:	2f 02       	muls	r18, r31
     58c:	90 01       	movw	r18, r0
     58e:	11 24       	eor	r1, r1
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
     590:	49 2f       	mov	r20, r25
     592:	4f 70       	andi	r20, 0x0F	; 15
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
     594:	24 2b       	or	r18, r20
     596:	d8 01       	movw	r26, r16
     598:	96 96       	adiw	r26, 0x26	; 38
     59a:	3c 93       	st	X, r19
     59c:	2e 93       	st	-X, r18
     59e:	95 97       	sbiw	r26, 0x25	; 37

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
     5a0:	2f 81       	ldd	r18, Y+7	; 0x07
     5a2:	b0 e1       	ldi	r27, 0x10	; 16
     5a4:	2b 02       	muls	r18, r27
     5a6:	90 01       	movw	r18, r0
     5a8:	11 24       	eor	r1, r1
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
     5aa:	92 95       	swap	r25
     5ac:	9f 70       	andi	r25, 0x0F	; 15
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
     5ae:	29 2b       	or	r18, r25
     5b0:	f8 01       	movw	r30, r16
     5b2:	30 a7       	std	Z+40, r19	; 0x28
     5b4:	27 a3       	std	Z+39, r18	; 0x27
	calib_data->dig_H6 = (int8_t)reg_data[6];
     5b6:	98 85       	ldd	r25, Y+8	; 0x08
     5b8:	91 a7       	std	Z+41, r25	; 0x29
     5ba:	0d c0       	rjmp	.+26     	; 0x5d6 <__stack+0x177>
					rslt = get_calib_data(dev);
				}
				break;
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
     5bc:	d8 01       	movw	r26, r16
     5be:	17 96       	adiw	r26, 0x07	; 7
     5c0:	ed 91       	ld	r30, X+
     5c2:	fc 91       	ld	r31, X
     5c4:	18 97       	sbiw	r26, 0x08	; 8
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	09 95       	icall
     5d0:	fa 94       	dec	r15

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
		while (try_count) {
     5d2:	19 f0       	breq	.+6      	; 0x5da <__stack+0x17b>
     5d4:	23 cf       	rjmp	.-442    	; 0x41c <bme280_init+0x2c>
			/* Wait for 1 ms */
			dev->delay_ms(1);
			--try_count;
		}
		/* Chip id check failed */
		if (!try_count)
     5d6:	f1 10       	cpse	r15, r1
     5d8:	01 c0       	rjmp	.+2      	; 0x5dc <__stack+0x17d>
			rslt = BME280_E_DEV_NOT_FOUND;
     5da:	8e ef       	ldi	r24, 0xFE	; 254
	}

	return rslt;
}
     5dc:	6b 96       	adiw	r28, 0x1b	; 27
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	cd bf       	out	0x3d, r28	; 61
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	ff 90       	pop	r15
     5f2:	08 95       	ret

000005f4 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	cd b7       	in	r28, 0x3d	; 61
     5fe:	de b7       	in	r29, 0x3e	; 62
     600:	29 97       	sbiw	r28, 0x09	; 9
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	f8 94       	cli
     606:	de bf       	out	0x3e, r29	; 62
     608:	0f be       	out	0x3f, r0	; 63
     60a:	cd bf       	out	0x3d, r28	; 61
     60c:	8c 01       	movw	r16, r24
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
     60e:	9c 01       	movw	r18, r24
     610:	44 e0       	ldi	r20, 0x04	; 4
     612:	50 e0       	ldi	r21, 0x00	; 0
     614:	be 01       	movw	r22, r28
     616:	6f 5f       	subi	r22, 0xFF	; 255
     618:	7f 4f       	sbci	r23, 0xFF	; 255
     61a:	82 ef       	ldi	r24, 0xF2	; 242
     61c:	39 dd       	rcall	.-1422   	; 0x90 <bme280_get_regs>
	if (rslt == BME280_OK) {
     61e:	81 11       	cpse	r24, r1
     620:	2f c0       	rjmp	.+94     	; 0x680 <put_device_to_sleep+0x8c>
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
     622:	89 81       	ldd	r24, Y+1	; 0x01
     624:	87 70       	andi	r24, 0x07	; 7
     626:	8f 83       	std	Y+7, r24	; 0x07
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
     628:	2b 81       	ldd	r18, Y+3	; 0x03
     62a:	82 2f       	mov	r24, r18
     62c:	8c 71       	andi	r24, 0x1C	; 28
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	95 95       	asr	r25
     632:	87 95       	ror	r24
     634:	95 95       	asr	r25
     636:	87 95       	ror	r24
     638:	8d 83       	std	Y+5, r24	; 0x05
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
     63a:	22 95       	swap	r18
     63c:	26 95       	lsr	r18
     63e:	27 70       	andi	r18, 0x07	; 7
     640:	2e 83       	std	Y+6, r18	; 0x06
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
     642:	2c 81       	ldd	r18, Y+4	; 0x04
     644:	82 2f       	mov	r24, r18
     646:	8c 71       	andi	r24, 0x1C	; 28
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	95 95       	asr	r25
     64c:	87 95       	ror	r24
     64e:	95 95       	asr	r25
     650:	87 95       	ror	r24
     652:	88 87       	std	Y+8, r24	; 0x08
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
     654:	22 95       	swap	r18
     656:	26 95       	lsr	r18
     658:	27 70       	andi	r18, 0x07	; 7
     65a:	29 87       	std	Y+9, r18	; 0x09
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
	if (rslt == BME280_OK) {
		parse_device_settings(reg_data, &settings);
		rslt = bme280_soft_reset(dev);
     65c:	c8 01       	movw	r24, r16
     65e:	9a de       	rcall	.-716    	; 0x394 <bme280_soft_reset>
		if (rslt == BME280_OK)
     660:	81 11       	cpse	r24, r1
     662:	0e c0       	rjmp	.+28     	; 0x680 <put_device_to_sleep+0x8c>
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
     664:	a8 01       	movw	r20, r16
     666:	be 01       	movw	r22, r28
     668:	6b 5f       	subi	r22, 0xFB	; 251
     66a:	7f 4f       	sbci	r23, 0xFF	; 255
     66c:	8f e1       	ldi	r24, 0x1F	; 31
     66e:	cb dd       	rcall	.-1130   	; 0x206 <set_osr_settings>
	if (rslt == BME280_OK)
     670:	81 11       	cpse	r24, r1
     672:	06 c0       	rjmp	.+12     	; 0x680 <put_device_to_sleep+0x8c>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
     674:	a8 01       	movw	r20, r16
     676:	be 01       	movw	r22, r28
     678:	6b 5f       	subi	r22, 0xFB	; 251
     67a:	7f 4f       	sbci	r23, 0xFF	; 255
     67c:	8f e1       	ldi	r24, 0x1F	; 31
     67e:	30 de       	rcall	.-928    	; 0x2e0 <set_filter_standby_settings>
		if (rslt == BME280_OK)
			rslt = reload_device_settings(&settings, dev);
	}

	return rslt;
}
     680:	29 96       	adiw	r28, 0x09	; 9
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	08 95       	ret

00000696 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
     696:	ef 92       	push	r14
     698:	ff 92       	push	r15
     69a:	0f 93       	push	r16
     69c:	1f 93       	push	r17
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	1f 92       	push	r1
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	e8 2e       	mov	r14, r24
     6aa:	8b 01       	movw	r16, r22
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
     6ac:	cb 01       	movw	r24, r22
     6ae:	d7 dc       	rcall	.-1618   	; 0x5e <null_ptr_check>
     6b0:	f8 2e       	mov	r15, r24
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
     6b2:	81 11       	cpse	r24, r1
     6b4:	27 c0       	rjmp	.+78     	; 0x704 <bme280_set_sensor_settings+0x6e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
     6b6:	b8 01       	movw	r22, r16
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	52 de       	rcall	.-860    	; 0x362 <bme280_get_sensor_mode>
     6be:	f8 2e       	mov	r15, r24
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
     6c0:	81 11       	cpse	r24, r1
     6c2:	20 c0       	rjmp	.+64     	; 0x704 <bme280_set_sensor_settings+0x6e>
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	88 23       	and	r24, r24
     6c8:	21 f0       	breq	.+8      	; 0x6d2 <bme280_set_sensor_settings+0x3c>
			rslt = put_device_to_sleep(dev);
     6ca:	c8 01       	movw	r24, r16
     6cc:	93 df       	rcall	.-218    	; 0x5f4 <put_device_to_sleep>
		if (rslt == BME280_OK) {
     6ce:	81 11       	cpse	r24, r1
     6d0:	16 c0       	rjmp	.+44     	; 0x6fe <bme280_set_sensor_settings+0x68>
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
	uint8_t settings_changed = FALSE;

	if (sub_settings & desired_settings) {
     6d2:	8e 2d       	mov	r24, r14
     6d4:	87 70       	andi	r24, 0x07	; 7
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
			rslt = put_device_to_sleep(dev);
		if (rslt == BME280_OK) {
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
     6d6:	41 f0       	breq	.+16     	; 0x6e8 <bme280_set_sensor_settings+0x52>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
     6d8:	a8 01       	movw	r20, r16
     6da:	b8 01       	movw	r22, r16
     6dc:	62 5d       	subi	r22, 0xD2	; 210
     6de:	7f 4f       	sbci	r23, 0xFF	; 255
     6e0:	8e 2d       	mov	r24, r14
     6e2:	91 dd       	rcall	.-1246   	; 0x206 <set_osr_settings>
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
     6e4:	81 11       	cpse	r24, r1
     6e6:	0d c0       	rjmp	.+26     	; 0x702 <bme280_set_sensor_settings+0x6c>
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
	uint8_t settings_changed = FALSE;

	if (sub_settings & desired_settings) {
     6e8:	8e 2d       	mov	r24, r14
     6ea:	88 71       	andi	r24, 0x18	; 24
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
     6ec:	59 f0       	breq	.+22     	; 0x704 <bme280_set_sensor_settings+0x6e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
     6ee:	b8 01       	movw	r22, r16
     6f0:	62 5d       	subi	r22, 0xD2	; 210
     6f2:	7f 4f       	sbci	r23, 0xFF	; 255
     6f4:	a8 01       	movw	r20, r16
     6f6:	8e 2d       	mov	r24, r14
     6f8:	f3 dd       	rcall	.-1050   	; 0x2e0 <set_filter_standby_settings>
     6fa:	f8 2e       	mov	r15, r24
     6fc:	03 c0       	rjmp	.+6      	; 0x704 <bme280_set_sensor_settings+0x6e>
	rslt = null_ptr_check(dev);
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
			rslt = put_device_to_sleep(dev);
     6fe:	f8 2e       	mov	r15, r24
     700:	01 c0       	rjmp	.+2      	; 0x704 <bme280_set_sensor_settings+0x6e>
		if (rslt == BME280_OK) {
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
     702:	f8 2e       	mov	r15, r24
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
		}
	}

	return rslt;
}
     704:	8f 2d       	mov	r24, r15
     706:	0f 90       	pop	r0
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	1f 91       	pop	r17
     70e:	0f 91       	pop	r16
     710:	ff 90       	pop	r15
     712:	ef 90       	pop	r14
     714:	08 95       	ret

00000716 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
     716:	ff 92       	push	r15
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	00 d0       	rcall	.+0      	; 0x722 <bme280_set_sensor_mode+0xc>
     722:	1f 92       	push	r1
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	f8 2e       	mov	r15, r24
     72a:	8b 01       	movw	r16, r22
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
     72c:	cb 01       	movw	r24, r22
     72e:	97 dc       	rcall	.-1746   	; 0x5e <null_ptr_check>

	if (rslt == BME280_OK) {
     730:	81 11       	cpse	r24, r1
     732:	27 c0       	rjmp	.+78     	; 0x782 <bme280_set_sensor_mode+0x6c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
     734:	b8 01       	movw	r22, r16
     736:	ce 01       	movw	r24, r28
     738:	01 96       	adiw	r24, 0x01	; 1
     73a:	13 de       	rcall	.-986    	; 0x362 <bme280_get_sensor_mode>
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
     73c:	81 11       	cpse	r24, r1
     73e:	21 c0       	rjmp	.+66     	; 0x782 <bme280_set_sensor_mode+0x6c>
     740:	89 81       	ldd	r24, Y+1	; 0x01
     742:	88 23       	and	r24, r24
     744:	21 f0       	breq	.+8      	; 0x74e <bme280_set_sensor_mode+0x38>
			rslt = put_device_to_sleep(dev);
     746:	c8 01       	movw	r24, r16
     748:	55 df       	rcall	.-342    	; 0x5f4 <put_device_to_sleep>
		/* Set the power mode */
		if (rslt == BME280_OK)
     74a:	81 11       	cpse	r24, r1
     74c:	1a c0       	rjmp	.+52     	; 0x782 <bme280_set_sensor_mode+0x6c>
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
     74e:	84 ef       	ldi	r24, 0xF4	; 244
     750:	8b 83       	std	Y+3, r24	; 0x03
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
     752:	98 01       	movw	r18, r16
     754:	41 e0       	ldi	r20, 0x01	; 1
     756:	50 e0       	ldi	r21, 0x00	; 0
     758:	be 01       	movw	r22, r28
     75a:	6e 5f       	subi	r22, 0xFE	; 254
     75c:	7f 4f       	sbci	r23, 0xFF	; 255
     75e:	98 dc       	rcall	.-1744   	; 0x90 <bme280_get_regs>
	/* Set the power mode */
	if (rslt == BME280_OK) {
     760:	81 11       	cpse	r24, r1
     762:	0f c0       	rjmp	.+30     	; 0x782 <bme280_set_sensor_mode+0x6c>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
     764:	9f 2d       	mov	r25, r15
     766:	93 70       	andi	r25, 0x03	; 3
     768:	8a 81       	ldd	r24, Y+2	; 0x02
     76a:	8c 7f       	andi	r24, 0xFC	; 252
     76c:	f9 2e       	mov	r15, r25
     76e:	f8 2a       	or	r15, r24
     770:	fa 82       	std	Y+2, r15	; 0x02
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
     772:	98 01       	movw	r18, r16
     774:	41 e0       	ldi	r20, 0x01	; 1
     776:	be 01       	movw	r22, r28
     778:	6e 5f       	subi	r22, 0xFE	; 254
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	ce 01       	movw	r24, r28
     77e:	03 96       	adiw	r24, 0x03	; 3
     780:	ad dc       	rcall	.-1702   	; 0xdc <bme280_set_regs>
		if (rslt == BME280_OK)
			rslt = write_power_mode(sensor_mode, dev);
	}

	return rslt;
}
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	ff 90       	pop	r15
     792:	08 95       	ret

00000794 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	fc 01       	movw	r30, r24
     79a:	eb 01       	movw	r28, r22
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
	data_lsb = (uint32_t)reg_data[1] << 4;
     79c:	81 81       	ldd	r24, Z+1	; 0x01
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	a0 e0       	ldi	r26, 0x00	; 0
     7a2:	b0 e0       	ldi	r27, 0x00	; 0
     7a4:	88 0f       	add	r24, r24
     7a6:	99 1f       	adc	r25, r25
     7a8:	aa 1f       	adc	r26, r26
     7aa:	bb 1f       	adc	r27, r27
     7ac:	88 0f       	add	r24, r24
     7ae:	99 1f       	adc	r25, r25
     7b0:	aa 1f       	adc	r26, r26
     7b2:	bb 1f       	adc	r27, r27
     7b4:	88 0f       	add	r24, r24
     7b6:	99 1f       	adc	r25, r25
     7b8:	aa 1f       	adc	r26, r26
     7ba:	bb 1f       	adc	r27, r27
     7bc:	88 0f       	add	r24, r24
     7be:	99 1f       	adc	r25, r25
     7c0:	aa 1f       	adc	r26, r26
     7c2:	bb 1f       	adc	r27, r27
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
     7c4:	40 81       	ld	r20, Z
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	03 2e       	mov	r0, r19
     7ce:	3c e0       	ldi	r19, 0x0C	; 12
     7d0:	44 0f       	add	r20, r20
     7d2:	55 1f       	adc	r21, r21
     7d4:	66 1f       	adc	r22, r22
     7d6:	77 1f       	adc	r23, r23
     7d8:	3a 95       	dec	r19
     7da:	d1 f7       	brne	.-12     	; 0x7d0 <bme280_parse_sensor_data+0x3c>
     7dc:	30 2d       	mov	r19, r0
	data_lsb = (uint32_t)reg_data[1] << 4;
	data_xlsb = (uint32_t)reg_data[2] >> 4;
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
     7de:	84 2b       	or	r24, r20
     7e0:	95 2b       	or	r25, r21
     7e2:	a6 2b       	or	r26, r22
     7e4:	b7 2b       	or	r27, r23
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
	data_lsb = (uint32_t)reg_data[1] << 4;
	data_xlsb = (uint32_t)reg_data[2] >> 4;
     7e6:	22 81       	ldd	r18, Z+2	; 0x02
     7e8:	22 95       	swap	r18
     7ea:	2f 70       	andi	r18, 0x0F	; 15
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
     7ec:	82 2b       	or	r24, r18
     7ee:	88 83       	st	Y, r24
     7f0:	99 83       	std	Y+1, r25	; 0x01
     7f2:	aa 83       	std	Y+2, r26	; 0x02
     7f4:	bb 83       	std	Y+3, r27	; 0x03

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
	data_lsb = (uint32_t)reg_data[4] << 4;
     7f6:	84 81       	ldd	r24, Z+4	; 0x04
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	a0 e0       	ldi	r26, 0x00	; 0
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	88 0f       	add	r24, r24
     800:	99 1f       	adc	r25, r25
     802:	aa 1f       	adc	r26, r26
     804:	bb 1f       	adc	r27, r27
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	aa 1f       	adc	r26, r26
     80c:	bb 1f       	adc	r27, r27
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	aa 1f       	adc	r26, r26
     814:	bb 1f       	adc	r27, r27
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	aa 1f       	adc	r26, r26
     81c:	bb 1f       	adc	r27, r27
	data_lsb = (uint32_t)reg_data[1] << 4;
	data_xlsb = (uint32_t)reg_data[2] >> 4;
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
     81e:	43 81       	ldd	r20, Z+3	; 0x03
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	03 2e       	mov	r0, r19
     828:	3c e0       	ldi	r19, 0x0C	; 12
     82a:	44 0f       	add	r20, r20
     82c:	55 1f       	adc	r21, r21
     82e:	66 1f       	adc	r22, r22
     830:	77 1f       	adc	r23, r23
     832:	3a 95       	dec	r19
     834:	d1 f7       	brne	.-12     	; 0x82a <bme280_parse_sensor_data+0x96>
     836:	30 2d       	mov	r19, r0
	data_lsb = (uint32_t)reg_data[4] << 4;
	data_xlsb = (uint32_t)reg_data[5] >> 4;
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
     838:	84 2b       	or	r24, r20
     83a:	95 2b       	or	r25, r21
     83c:	a6 2b       	or	r26, r22
     83e:	b7 2b       	or	r27, r23
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
	data_lsb = (uint32_t)reg_data[4] << 4;
	data_xlsb = (uint32_t)reg_data[5] >> 4;
     840:	25 81       	ldd	r18, Z+5	; 0x05
     842:	22 95       	swap	r18
     844:	2f 70       	andi	r18, 0x0F	; 15
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
     846:	82 2b       	or	r24, r18
     848:	8c 83       	std	Y+4, r24	; 0x04
     84a:	9d 83       	std	Y+5, r25	; 0x05
     84c:	ae 83       	std	Y+6, r26	; 0x06
     84e:	bf 83       	std	Y+7, r27	; 0x07

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
     850:	86 81       	ldd	r24, Z+6	; 0x06
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	a0 e0       	ldi	r26, 0x00	; 0
     856:	b0 e0       	ldi	r27, 0x00	; 0
     858:	ba 2f       	mov	r27, r26
     85a:	a9 2f       	mov	r26, r25
     85c:	98 2f       	mov	r25, r24
     85e:	88 27       	eor	r24, r24
	data_msb = (uint32_t)reg_data[7];
     860:	27 81       	ldd	r18, Z+7	; 0x07
	uncomp_data->humidity = data_msb | data_lsb;
     862:	82 2b       	or	r24, r18
     864:	88 87       	std	Y+8, r24	; 0x08
     866:	99 87       	std	Y+9, r25	; 0x09
     868:	aa 87       	std	Y+10, r26	; 0x0a
     86a:	bb 87       	std	Y+11, r27	; 0x0b
}
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
     872:	2f 92       	push	r2
     874:	3f 92       	push	r3
     876:	4f 92       	push	r4
     878:	5f 92       	push	r5
     87a:	6f 92       	push	r6
     87c:	7f 92       	push	r7
     87e:	8f 92       	push	r8
     880:	9f 92       	push	r9
     882:	af 92       	push	r10
     884:	bf 92       	push	r11
     886:	cf 92       	push	r12
     888:	df 92       	push	r13
     88a:	ef 92       	push	r14
     88c:	ff 92       	push	r15
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
     89a:	29 97       	sbiw	r28, 0x09	; 9
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	f8 94       	cli
     8a0:	de bf       	out	0x3e, r29	; 62
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	cd bf       	out	0x3d, r28	; 61
     8a6:	89 83       	std	Y+1, r24	; 0x01
     8a8:	8b 01       	movw	r16, r22
     8aa:	1a 01       	movw	r2, r20
     8ac:	3f 83       	std	Y+7, r19	; 0x07
     8ae:	2e 83       	std	Y+6, r18	; 0x06
	int8_t rslt = BME280_OK;

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
     8b0:	61 15       	cp	r22, r1
     8b2:	71 05       	cpc	r23, r1
     8b4:	09 f4       	brne	.+2      	; 0x8b8 <bme280_compensate_data+0x46>
     8b6:	11 c4       	rjmp	.+2082   	; 0x10da <bme280_compensate_data+0x868>
     8b8:	41 15       	cp	r20, r1
     8ba:	51 05       	cpc	r21, r1
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <bme280_compensate_data+0x4e>
     8be:	0f c4       	rjmp	.+2078   	; 0x10de <bme280_compensate_data+0x86c>
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <bme280_compensate_data+0x56>
     8c6:	0d c4       	rjmp	.+2074   	; 0x10e2 <bme280_compensate_data+0x870>
		/* Initialize to zero */
		comp_data->temperature = 0;
     8c8:	da 01       	movw	r26, r20
     8ca:	14 96       	adiw	r26, 0x04	; 4
     8cc:	1d 92       	st	X+, r1
     8ce:	1d 92       	st	X+, r1
     8d0:	1d 92       	st	X+, r1
     8d2:	1c 92       	st	X, r1
     8d4:	17 97       	sbiw	r26, 0x07	; 7
		comp_data->pressure = 0;
     8d6:	fa 01       	movw	r30, r20
     8d8:	10 82       	st	Z, r1
     8da:	11 82       	std	Z+1, r1	; 0x01
     8dc:	12 82       	std	Z+2, r1	; 0x02
     8de:	13 82       	std	Z+3, r1	; 0x03
		comp_data->humidity = 0;
     8e0:	18 96       	adiw	r26, 0x08	; 8
     8e2:	1d 92       	st	X+, r1
     8e4:	1d 92       	st	X+, r1
     8e6:	1d 92       	st	X+, r1
     8e8:	1c 92       	st	X, r1
     8ea:	1b 97       	sbiw	r26, 0x0b	; 11
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
     8ec:	87 70       	andi	r24, 0x07	; 7
     8ee:	09 f4       	brne	.+2      	; 0x8f2 <bme280_compensate_data+0x80>
     8f0:	c2 c0       	rjmp	.+388    	; 0xa76 <bme280_compensate_data+0x204>
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
	int32_t temperature_max = 8500;

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
     8f2:	fb 01       	movw	r30, r22
     8f4:	84 80       	ldd	r8, Z+4	; 0x04
     8f6:	95 80       	ldd	r9, Z+5	; 0x05
     8f8:	a6 80       	ldd	r10, Z+6	; 0x06
     8fa:	b7 80       	ldd	r11, Z+7	; 0x07
     8fc:	d9 01       	movw	r26, r18
     8fe:	cd 90       	ld	r12, X+
     900:	dc 90       	ld	r13, X
     902:	e1 2c       	mov	r14, r1
     904:	f1 2c       	mov	r15, r1
     906:	d7 01       	movw	r26, r14
     908:	c6 01       	movw	r24, r12
     90a:	88 0f       	add	r24, r24
     90c:	99 1f       	adc	r25, r25
     90e:	aa 1f       	adc	r26, r26
     910:	bb 1f       	adc	r27, r27
     912:	b5 01       	movw	r22, r10
     914:	a4 01       	movw	r20, r8
     916:	68 94       	set
     918:	12 f8       	bld	r1, 2
     91a:	76 95       	lsr	r23
     91c:	67 95       	ror	r22
     91e:	57 95       	ror	r21
     920:	47 95       	ror	r20
     922:	16 94       	lsr	r1
     924:	d1 f7       	brne	.-12     	; 0x91a <bme280_compensate_data+0xa8>
     926:	9a 01       	movw	r18, r20
     928:	ab 01       	movw	r20, r22
     92a:	28 1b       	sub	r18, r24
     92c:	39 0b       	sbc	r19, r25
     92e:	4a 0b       	sbc	r20, r26
     930:	5b 0b       	sbc	r21, r27
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
     932:	ee 81       	ldd	r30, Y+6	; 0x06
     934:	ff 81       	ldd	r31, Y+7	; 0x07
     936:	a2 81       	ldd	r26, Z+2	; 0x02
     938:	b3 81       	ldd	r27, Z+3	; 0x03
     93a:	56 d6       	rcall	.+3244   	; 0x15e8 <__mulshisi3>
     93c:	2b 01       	movw	r4, r22
     93e:	3c 01       	movw	r6, r24
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
     940:	d5 01       	movw	r26, r10
     942:	c4 01       	movw	r24, r8
     944:	68 94       	set
     946:	13 f8       	bld	r1, 3
     948:	b6 95       	lsr	r27
     94a:	a7 95       	ror	r26
     94c:	97 95       	ror	r25
     94e:	87 95       	ror	r24
     950:	16 94       	lsr	r1
     952:	d1 f7       	brne	.-12     	; 0x948 <bme280_compensate_data+0xd6>
     954:	bc 01       	movw	r22, r24
     956:	cd 01       	movw	r24, r26
     958:	6c 19       	sub	r22, r12
     95a:	7d 09       	sbc	r23, r13
     95c:	8e 09       	sbc	r24, r14
     95e:	9f 09       	sbc	r25, r15
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
     960:	9b 01       	movw	r18, r22
     962:	ac 01       	movw	r20, r24
     964:	06 d6       	rcall	.+3084   	; 0x1572 <__mulsi3>
     966:	6b 01       	movw	r12, r22
     968:	7c 01       	movw	r14, r24
     96a:	99 23       	and	r25, r25
     96c:	34 f4       	brge	.+12     	; 0x97a <bme280_compensate_data+0x108>
     96e:	ff ef       	ldi	r31, 0xFF	; 255
     970:	cf 0e       	add	r12, r31
     972:	ff e0       	ldi	r31, 0x0F	; 15
     974:	df 1e       	adc	r13, r31
     976:	e1 1c       	adc	r14, r1
     978:	f1 1c       	adc	r15, r1
     97a:	a7 01       	movw	r20, r14
     97c:	96 01       	movw	r18, r12
     97e:	01 2e       	mov	r0, r17
     980:	1c e0       	ldi	r17, 0x0C	; 12
     982:	55 95       	asr	r21
     984:	47 95       	ror	r20
     986:	37 95       	ror	r19
     988:	27 95       	ror	r18
     98a:	1a 95       	dec	r17
     98c:	d1 f7       	brne	.-12     	; 0x982 <bme280_compensate_data+0x110>
     98e:	10 2d       	mov	r17, r0
     990:	ee 81       	ldd	r30, Y+6	; 0x06
     992:	ff 81       	ldd	r31, Y+7	; 0x07
     994:	a4 81       	ldd	r26, Z+4	; 0x04
     996:	b5 81       	ldd	r27, Z+5	; 0x05
     998:	27 d6       	rcall	.+3150   	; 0x15e8 <__mulshisi3>
	int32_t temperature;
	int32_t temperature_min = -4000;
	int32_t temperature_max = 8500;

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
     99a:	73 01       	movw	r14, r6
     99c:	62 01       	movw	r12, r4
     99e:	77 20       	and	r7, r7
     9a0:	34 f4       	brge	.+12     	; 0x9ae <bme280_compensate_data+0x13c>
     9a2:	ff ef       	ldi	r31, 0xFF	; 255
     9a4:	cf 0e       	add	r12, r31
     9a6:	f7 e0       	ldi	r31, 0x07	; 7
     9a8:	df 1e       	adc	r13, r31
     9aa:	e1 1c       	adc	r14, r1
     9ac:	f1 1c       	adc	r15, r1
     9ae:	0b 2e       	mov	r0, r27
     9b0:	bb e0       	ldi	r27, 0x0B	; 11
     9b2:	f5 94       	asr	r15
     9b4:	e7 94       	ror	r14
     9b6:	d7 94       	ror	r13
     9b8:	c7 94       	ror	r12
     9ba:	ba 95       	dec	r27
     9bc:	d1 f7       	brne	.-12     	; 0x9b2 <bme280_compensate_data+0x140>
     9be:	b0 2d       	mov	r27, r0
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
     9c0:	4b 01       	movw	r8, r22
     9c2:	5c 01       	movw	r10, r24
     9c4:	99 23       	and	r25, r25
     9c6:	34 f4       	brge	.+12     	; 0x9d4 <bme280_compensate_data+0x162>
     9c8:	2f ef       	ldi	r18, 0xFF	; 255
     9ca:	82 0e       	add	r8, r18
     9cc:	2f e3       	ldi	r18, 0x3F	; 63
     9ce:	92 1e       	adc	r9, r18
     9d0:	a1 1c       	adc	r10, r1
     9d2:	b1 1c       	adc	r11, r1
     9d4:	b5 01       	movw	r22, r10
     9d6:	a4 01       	movw	r20, r8
     9d8:	03 2e       	mov	r0, r19
     9da:	3e e0       	ldi	r19, 0x0E	; 14
     9dc:	75 95       	asr	r23
     9de:	67 95       	ror	r22
     9e0:	57 95       	ror	r21
     9e2:	47 95       	ror	r20
     9e4:	3a 95       	dec	r19
     9e6:	d1 f7       	brne	.-12     	; 0x9dc <bme280_compensate_data+0x16a>
     9e8:	30 2d       	mov	r19, r0
	calib_data->t_fine = var1 + var2;
     9ea:	d7 01       	movw	r26, r14
     9ec:	c6 01       	movw	r24, r12
     9ee:	84 0f       	add	r24, r20
     9f0:	95 1f       	adc	r25, r21
     9f2:	a6 1f       	adc	r26, r22
     9f4:	b7 1f       	adc	r27, r23
     9f6:	ee 81       	ldd	r30, Y+6	; 0x06
     9f8:	ff 81       	ldd	r31, Y+7	; 0x07
     9fa:	81 a3       	std	Z+33, r24	; 0x21
     9fc:	92 a3       	std	Z+34, r25	; 0x22
     9fe:	a3 a3       	std	Z+35, r26	; 0x23
     a00:	b4 a3       	std	Z+36, r27	; 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
     a02:	ac 01       	movw	r20, r24
     a04:	bd 01       	movw	r22, r26
     a06:	44 0f       	add	r20, r20
     a08:	55 1f       	adc	r21, r21
     a0a:	66 1f       	adc	r22, r22
     a0c:	77 1f       	adc	r23, r23
     a0e:	44 0f       	add	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	66 1f       	adc	r22, r22
     a14:	77 1f       	adc	r23, r23
     a16:	84 0f       	add	r24, r20
     a18:	95 1f       	adc	r25, r21
     a1a:	a6 1f       	adc	r26, r22
     a1c:	b7 1f       	adc	r27, r23
     a1e:	80 58       	subi	r24, 0x80	; 128
     a20:	9f 4f       	sbci	r25, 0xFF	; 255
     a22:	af 4f       	sbci	r26, 0xFF	; 255
     a24:	bf 4f       	sbci	r27, 0xFF	; 255
     a26:	ac 01       	movw	r20, r24
     a28:	bd 01       	movw	r22, r26
     a2a:	bb 23       	and	r27, r27
     a2c:	24 f4       	brge	.+8      	; 0xa36 <bme280_compensate_data+0x1c4>
     a2e:	41 50       	subi	r20, 0x01	; 1
     a30:	5f 4f       	sbci	r21, 0xFF	; 255
     a32:	6f 4f       	sbci	r22, 0xFF	; 255
     a34:	7f 4f       	sbci	r23, 0xFF	; 255
     a36:	bb 27       	eor	r27, r27
     a38:	77 fd       	sbrc	r23, 7
     a3a:	ba 95       	dec	r27
     a3c:	a7 2f       	mov	r26, r23
     a3e:	96 2f       	mov	r25, r22
     a40:	85 2f       	mov	r24, r21
     a42:	85 33       	cpi	r24, 0x35	; 53
     a44:	f1 e2       	ldi	r31, 0x21	; 33
     a46:	9f 07       	cpc	r25, r31
     a48:	a1 05       	cpc	r26, r1
     a4a:	b1 05       	cpc	r27, r1
     a4c:	24 f0       	brlt	.+8      	; 0xa56 <bme280_compensate_data+0x1e4>
     a4e:	84 e3       	ldi	r24, 0x34	; 52
     a50:	91 e2       	ldi	r25, 0x21	; 33
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	b0 e0       	ldi	r27, 0x00	; 0
     a56:	80 36       	cpi	r24, 0x60	; 96
     a58:	20 ef       	ldi	r18, 0xF0	; 240
     a5a:	92 07       	cpc	r25, r18
     a5c:	2f ef       	ldi	r18, 0xFF	; 255
     a5e:	a2 07       	cpc	r26, r18
     a60:	b2 07       	cpc	r27, r18
     a62:	24 f4       	brge	.+8      	; 0xa6c <bme280_compensate_data+0x1fa>
     a64:	80 e6       	ldi	r24, 0x60	; 96
     a66:	90 ef       	ldi	r25, 0xF0	; 240
     a68:	af ef       	ldi	r26, 0xFF	; 255
     a6a:	bf ef       	ldi	r27, 0xFF	; 255
		comp_data->pressure = 0;
		comp_data->humidity = 0;
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
     a6c:	f1 01       	movw	r30, r2
     a6e:	84 83       	std	Z+4, r24	; 0x04
     a70:	95 83       	std	Z+5, r25	; 0x05
     a72:	a6 83       	std	Z+6, r26	; 0x06
     a74:	b7 83       	std	Z+7, r27	; 0x07
		}
		if (sensor_comp & BME280_PRESS) {
     a76:	f9 81       	ldd	r31, Y+1	; 0x01
     a78:	f0 ff       	sbrs	r31, 0
     a7a:	e0 c1       	rjmp	.+960    	; 0xe3c <bme280_compensate_data+0x5ca>
	uint32_t var5;
	uint32_t pressure;
	uint32_t pressure_min = 30000;
	uint32_t pressure_max = 110000;

	var1 = (((int32_t)calib_data->t_fine) / 2) - (int32_t)64000;
     a7c:	ae 81       	ldd	r26, Y+6	; 0x06
     a7e:	bf 81       	ldd	r27, Y+7	; 0x07
     a80:	91 96       	adiw	r26, 0x21	; 33
     a82:	cd 90       	ld	r12, X+
     a84:	dd 90       	ld	r13, X+
     a86:	ed 90       	ld	r14, X+
     a88:	fc 90       	ld	r15, X
     a8a:	94 97       	sbiw	r26, 0x24	; 36
     a8c:	ff 20       	and	r15, r15
     a8e:	2c f4       	brge	.+10     	; 0xa9a <bme280_compensate_data+0x228>
     a90:	bf ef       	ldi	r27, 0xFF	; 255
     a92:	cb 1a       	sub	r12, r27
     a94:	db 0a       	sbc	r13, r27
     a96:	eb 0a       	sbc	r14, r27
     a98:	fb 0a       	sbc	r15, r27
     a9a:	f5 94       	asr	r15
     a9c:	e7 94       	ror	r14
     a9e:	d7 94       	ror	r13
     aa0:	c7 94       	ror	r12
     aa2:	ea ef       	ldi	r30, 0xFA	; 250
     aa4:	de 1a       	sub	r13, r30
     aa6:	e1 08       	sbc	r14, r1
     aa8:	f1 08       	sbc	r15, r1
	var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t)calib_data->dig_P6);
     aaa:	d7 01       	movw	r26, r14
     aac:	c6 01       	movw	r24, r12
     aae:	ff 20       	and	r15, r15
     ab0:	1c f4       	brge	.+6      	; 0xab8 <bme280_compensate_data+0x246>
     ab2:	03 96       	adiw	r24, 0x03	; 3
     ab4:	a1 1d       	adc	r26, r1
     ab6:	b1 1d       	adc	r27, r1
     ab8:	bc 01       	movw	r22, r24
     aba:	cd 01       	movw	r24, r26
     abc:	95 95       	asr	r25
     abe:	87 95       	ror	r24
     ac0:	77 95       	ror	r23
     ac2:	67 95       	ror	r22
     ac4:	95 95       	asr	r25
     ac6:	87 95       	ror	r24
     ac8:	77 95       	ror	r23
     aca:	67 95       	ror	r22
     acc:	9b 01       	movw	r18, r22
     ace:	ac 01       	movw	r20, r24
     ad0:	50 d5       	rcall	.+2720   	; 0x1572 <__mulsi3>
     ad2:	4b 01       	movw	r8, r22
     ad4:	5c 01       	movw	r10, r24
     ad6:	ae 81       	ldd	r26, Y+6	; 0x06
     ad8:	bf 81       	ldd	r27, Y+7	; 0x07
     ada:	50 96       	adiw	r26, 0x10	; 16
     adc:	0d 90       	ld	r0, X+
     ade:	bc 91       	ld	r27, X
     ae0:	a0 2d       	mov	r26, r0
     ae2:	b9 87       	std	Y+9, r27	; 0x09
     ae4:	a8 87       	std	Y+8, r26	; 0x08
	var2 = var2 + ((var1 * ((int32_t)calib_data->dig_P5)) * 2);
     ae6:	ee 81       	ldd	r30, Y+6	; 0x06
     ae8:	ff 81       	ldd	r31, Y+7	; 0x07
     aea:	06 84       	ldd	r0, Z+14	; 0x0e
     aec:	f7 85       	ldd	r31, Z+15	; 0x0f
     aee:	e0 2d       	mov	r30, r0
     af0:	fb 83       	std	Y+3, r31	; 0x03
     af2:	ea 83       	std	Y+2, r30	; 0x02
	var2 = (var2 / 4) + (((int32_t)calib_data->dig_P4) * 65536);
     af4:	ae 81       	ldd	r26, Y+6	; 0x06
     af6:	bf 81       	ldd	r27, Y+7	; 0x07
     af8:	1c 96       	adiw	r26, 0x0c	; 12
     afa:	0d 90       	ld	r0, X+
     afc:	bc 91       	ld	r27, X
     afe:	a0 2d       	mov	r26, r0
     b00:	bd 83       	std	Y+5, r27	; 0x05
     b02:	ac 83       	std	Y+4, r26	; 0x04
	var3 = (calib_data->dig_P3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8;
     b04:	ee 81       	ldd	r30, Y+6	; 0x06
     b06:	ff 81       	ldd	r31, Y+7	; 0x07
     b08:	22 85       	ldd	r18, Z+10	; 0x0a
     b0a:	33 85       	ldd	r19, Z+11	; 0x0b
     b0c:	44 27       	eor	r20, r20
     b0e:	37 fd       	sbrc	r19, 7
     b10:	40 95       	com	r20
     b12:	54 2f       	mov	r21, r20
     b14:	dc 01       	movw	r26, r24
     b16:	cb 01       	movw	r24, r22
     b18:	bb 20       	and	r11, r11
     b1a:	24 f4       	brge	.+8      	; 0xb24 <bme280_compensate_data+0x2b2>
     b1c:	81 50       	subi	r24, 0x01	; 1
     b1e:	90 4e       	sbci	r25, 0xE0	; 224
     b20:	af 4f       	sbci	r26, 0xFF	; 255
     b22:	bf 4f       	sbci	r27, 0xFF	; 255
     b24:	bc 01       	movw	r22, r24
     b26:	cd 01       	movw	r24, r26
     b28:	05 2e       	mov	r0, r21
     b2a:	5d e0       	ldi	r21, 0x0D	; 13
     b2c:	95 95       	asr	r25
     b2e:	87 95       	ror	r24
     b30:	77 95       	ror	r23
     b32:	67 95       	ror	r22
     b34:	5a 95       	dec	r21
     b36:	d1 f7       	brne	.-12     	; 0xb2c <bme280_compensate_data+0x2ba>
     b38:	50 2d       	mov	r21, r0
     b3a:	1b d5       	rcall	.+2614   	; 0x1572 <__mulsi3>
     b3c:	2b 01       	movw	r4, r22
     b3e:	3c 01       	movw	r6, r24
     b40:	99 23       	and	r25, r25
     b42:	2c f4       	brge	.+10     	; 0xb4e <bme280_compensate_data+0x2dc>
     b44:	f7 e0       	ldi	r31, 0x07	; 7
     b46:	4f 0e       	add	r4, r31
     b48:	51 1c       	adc	r5, r1
     b4a:	61 1c       	adc	r6, r1
     b4c:	71 1c       	adc	r7, r1
     b4e:	68 94       	set
     b50:	12 f8       	bld	r1, 2
     b52:	75 94       	asr	r7
     b54:	67 94       	ror	r6
     b56:	57 94       	ror	r5
     b58:	47 94       	ror	r4
     b5a:	16 94       	lsr	r1
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <bme280_compensate_data+0x2e0>
	var4 = (((int32_t)calib_data->dig_P2) * var1) / 2;
     b5e:	ee 81       	ldd	r30, Y+6	; 0x06
     b60:	ff 81       	ldd	r31, Y+7	; 0x07
     b62:	a0 85       	ldd	r26, Z+8	; 0x08
     b64:	b1 85       	ldd	r27, Z+9	; 0x09
     b66:	a7 01       	movw	r20, r14
     b68:	96 01       	movw	r18, r12
     b6a:	3e d5       	rcall	.+2684   	; 0x15e8 <__mulshisi3>
     b6c:	9b 01       	movw	r18, r22
     b6e:	ac 01       	movw	r20, r24
     b70:	99 23       	and	r25, r25
     b72:	24 f4       	brge	.+8      	; 0xb7c <bme280_compensate_data+0x30a>
     b74:	2f 5f       	subi	r18, 0xFF	; 255
     b76:	3f 4f       	sbci	r19, 0xFF	; 255
     b78:	4f 4f       	sbci	r20, 0xFF	; 255
     b7a:	5f 4f       	sbci	r21, 0xFF	; 255
     b7c:	da 01       	movw	r26, r20
     b7e:	c9 01       	movw	r24, r18
     b80:	b5 95       	asr	r27
     b82:	a7 95       	ror	r26
     b84:	97 95       	ror	r25
     b86:	87 95       	ror	r24
	var1 = (var3 + var4) / 262144;
     b88:	48 0e       	add	r4, r24
     b8a:	59 1e       	adc	r5, r25
     b8c:	6a 1e       	adc	r6, r26
     b8e:	7b 1e       	adc	r7, r27
     b90:	d3 01       	movw	r26, r6
     b92:	c2 01       	movw	r24, r4
     b94:	77 20       	and	r7, r7
     b96:	1c f4       	brge	.+6      	; 0xb9e <bme280_compensate_data+0x32c>
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	ac 4f       	sbci	r26, 0xFC	; 252
     b9c:	bf 4f       	sbci	r27, 0xFF	; 255
     b9e:	07 2e       	mov	r0, r23
     ba0:	72 e1       	ldi	r23, 0x12	; 18
     ba2:	b5 95       	asr	r27
     ba4:	a7 95       	ror	r26
     ba6:	97 95       	ror	r25
     ba8:	87 95       	ror	r24
     baa:	7a 95       	dec	r23
     bac:	d1 f7       	brne	.-12     	; 0xba2 <bme280_compensate_data+0x330>
     bae:	70 2d       	mov	r23, r0
	var1 = (((32768 + var1)) * ((int32_t)calib_data->dig_P1)) / 32768;
     bb0:	9c 01       	movw	r18, r24
     bb2:	ad 01       	movw	r20, r26
     bb4:	30 58       	subi	r19, 0x80	; 128
     bb6:	4f 4f       	sbci	r20, 0xFF	; 255
     bb8:	5f 4f       	sbci	r21, 0xFF	; 255
     bba:	ee 81       	ldd	r30, Y+6	; 0x06
     bbc:	ff 81       	ldd	r31, Y+7	; 0x07
     bbe:	a6 81       	ldd	r26, Z+6	; 0x06
     bc0:	b7 81       	ldd	r27, Z+7	; 0x07
     bc2:	08 d5       	rcall	.+2576   	; 0x15d4 <__muluhisi3>
     bc4:	2b 01       	movw	r4, r22
     bc6:	3c 01       	movw	r6, r24
     bc8:	99 23       	and	r25, r25
     bca:	34 f4       	brge	.+12     	; 0xbd8 <bme280_compensate_data+0x366>
     bcc:	ff ef       	ldi	r31, 0xFF	; 255
     bce:	4f 0e       	add	r4, r31
     bd0:	ff e7       	ldi	r31, 0x7F	; 127
     bd2:	5f 1e       	adc	r5, r31
     bd4:	61 1c       	adc	r6, r1
     bd6:	71 1c       	adc	r7, r1
     bd8:	03 2e       	mov	r0, r19
     bda:	3f e0       	ldi	r19, 0x0F	; 15
     bdc:	75 94       	asr	r7
     bde:	67 94       	ror	r6
     be0:	57 94       	ror	r5
     be2:	47 94       	ror	r4
     be4:	3a 95       	dec	r19
     be6:	d1 f7       	brne	.-12     	; 0xbdc <bme280_compensate_data+0x36a>
     be8:	30 2d       	mov	r19, r0
	 /* avoid exception caused by division by zero */
	if (var1) {
     bea:	41 14       	cp	r4, r1
     bec:	51 04       	cpc	r5, r1
     bee:	61 04       	cpc	r6, r1
     bf0:	71 04       	cpc	r7, r1
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <bme280_compensate_data+0x384>
     bf4:	15 c1       	rjmp	.+554    	; 0xe20 <bme280_compensate_data+0x5ae>
	uint32_t pressure;
	uint32_t pressure_min = 30000;
	uint32_t pressure_max = 110000;

	var1 = (((int32_t)calib_data->t_fine) / 2) - (int32_t)64000;
	var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t)calib_data->dig_P6);
     bf6:	d5 01       	movw	r26, r10
     bf8:	c4 01       	movw	r24, r8
     bfa:	bb 20       	and	r11, r11
     bfc:	24 f4       	brge	.+8      	; 0xc06 <bme280_compensate_data+0x394>
     bfe:	81 50       	subi	r24, 0x01	; 1
     c00:	98 4f       	sbci	r25, 0xF8	; 248
     c02:	af 4f       	sbci	r26, 0xFF	; 255
     c04:	bf 4f       	sbci	r27, 0xFF	; 255
     c06:	9c 01       	movw	r18, r24
     c08:	ad 01       	movw	r20, r26
     c0a:	01 2e       	mov	r0, r17
     c0c:	1b e0       	ldi	r17, 0x0B	; 11
     c0e:	55 95       	asr	r21
     c10:	47 95       	ror	r20
     c12:	37 95       	ror	r19
     c14:	27 95       	ror	r18
     c16:	1a 95       	dec	r17
     c18:	d1 f7       	brne	.-12     	; 0xc0e <bme280_compensate_data+0x39c>
     c1a:	10 2d       	mov	r17, r0
     c1c:	a8 85       	ldd	r26, Y+8	; 0x08
     c1e:	b9 85       	ldd	r27, Y+9	; 0x09
     c20:	e3 d4       	rcall	.+2502   	; 0x15e8 <__mulshisi3>
     c22:	4b 01       	movw	r8, r22
     c24:	5c 01       	movw	r10, r24
	var2 = var2 + ((var1 * ((int32_t)calib_data->dig_P5)) * 2);
     c26:	aa 81       	ldd	r26, Y+2	; 0x02
     c28:	bb 81       	ldd	r27, Y+3	; 0x03
     c2a:	a7 01       	movw	r20, r14
     c2c:	96 01       	movw	r18, r12
     c2e:	dc d4       	rcall	.+2488   	; 0x15e8 <__mulshisi3>
     c30:	dc 01       	movw	r26, r24
     c32:	cb 01       	movw	r24, r22
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	aa 1f       	adc	r26, r26
     c3a:	bb 1f       	adc	r27, r27
     c3c:	88 0e       	add	r8, r24
     c3e:	99 1e       	adc	r9, r25
     c40:	aa 1e       	adc	r10, r26
     c42:	bb 1e       	adc	r11, r27
	var2 = (var2 / 4) + (((int32_t)calib_data->dig_P4) * 65536);
     c44:	d5 01       	movw	r26, r10
     c46:	c4 01       	movw	r24, r8
     c48:	bb 20       	and	r11, r11
     c4a:	1c f4       	brge	.+6      	; 0xc52 <bme280_compensate_data+0x3e0>
     c4c:	03 96       	adiw	r24, 0x03	; 3
     c4e:	a1 1d       	adc	r26, r1
     c50:	b1 1d       	adc	r27, r1
     c52:	b5 95       	asr	r27
     c54:	a7 95       	ror	r26
     c56:	97 95       	ror	r25
     c58:	87 95       	ror	r24
     c5a:	b5 95       	asr	r27
     c5c:	a7 95       	ror	r26
     c5e:	97 95       	ror	r25
     c60:	87 95       	ror	r24
	var4 = (((int32_t)calib_data->dig_P2) * var1) / 2;
	var1 = (var3 + var4) / 262144;
	var1 = (((32768 + var1)) * ((int32_t)calib_data->dig_P1)) / 32768;
	 /* avoid exception caused by division by zero */
	if (var1) {
		var5 = (uint32_t)((uint32_t)1048576) - uncomp_data->pressure;
     c62:	f8 01       	movw	r30, r16
     c64:	40 81       	ld	r20, Z
     c66:	51 81       	ldd	r21, Z+1	; 0x01
     c68:	62 81       	ldd	r22, Z+2	; 0x02
     c6a:	73 81       	ldd	r23, Z+3	; 0x03
     c6c:	c1 2c       	mov	r12, r1
     c6e:	d1 2c       	mov	r13, r1
     c70:	76 01       	movw	r14, r12
     c72:	68 94       	set
     c74:	e4 f8       	bld	r14, 4
     c76:	c4 1a       	sub	r12, r20
     c78:	d5 0a       	sbc	r13, r21
     c7a:	e6 0a       	sbc	r14, r22
     c7c:	f7 0a       	sbc	r15, r23
	uint32_t pressure_max = 110000;

	var1 = (((int32_t)calib_data->t_fine) / 2) - (int32_t)64000;
	var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t)calib_data->dig_P6);
	var2 = var2 + ((var1 * ((int32_t)calib_data->dig_P5)) * 2);
	var2 = (var2 / 4) + (((int32_t)calib_data->dig_P4) * 65536);
     c7e:	ec 81       	ldd	r30, Y+4	; 0x04
     c80:	fd 81       	ldd	r31, Y+5	; 0x05
     c82:	af 01       	movw	r20, r30
     c84:	66 27       	eor	r22, r22
     c86:	57 fd       	sbrc	r21, 7
     c88:	60 95       	com	r22
     c8a:	76 2f       	mov	r23, r22
     c8c:	ba 01       	movw	r22, r20
     c8e:	55 27       	eor	r21, r21
     c90:	44 27       	eor	r20, r20
     c92:	84 0f       	add	r24, r20
     c94:	95 1f       	adc	r25, r21
     c96:	a6 1f       	adc	r26, r22
     c98:	b7 1f       	adc	r27, r23
	var1 = (var3 + var4) / 262144;
	var1 = (((32768 + var1)) * ((int32_t)calib_data->dig_P1)) / 32768;
	 /* avoid exception caused by division by zero */
	if (var1) {
		var5 = (uint32_t)((uint32_t)1048576) - uncomp_data->pressure;
		pressure = ((uint32_t)(var5 - (uint32_t)(var2 / 4096))) * 3125;
     c9a:	ac 01       	movw	r20, r24
     c9c:	bd 01       	movw	r22, r26
     c9e:	bb 23       	and	r27, r27
     ca0:	24 f4       	brge	.+8      	; 0xcaa <bme280_compensate_data+0x438>
     ca2:	41 50       	subi	r20, 0x01	; 1
     ca4:	50 4f       	sbci	r21, 0xF0	; 240
     ca6:	6f 4f       	sbci	r22, 0xFF	; 255
     ca8:	7f 4f       	sbci	r23, 0xFF	; 255
     caa:	db 01       	movw	r26, r22
     cac:	ca 01       	movw	r24, r20
     cae:	07 2e       	mov	r0, r23
     cb0:	7c e0       	ldi	r23, 0x0C	; 12
     cb2:	b5 95       	asr	r27
     cb4:	a7 95       	ror	r26
     cb6:	97 95       	ror	r25
     cb8:	87 95       	ror	r24
     cba:	7a 95       	dec	r23
     cbc:	d1 f7       	brne	.-12     	; 0xcb2 <bme280_compensate_data+0x440>
     cbe:	70 2d       	mov	r23, r0
     cc0:	a7 01       	movw	r20, r14
     cc2:	96 01       	movw	r18, r12
     cc4:	28 1b       	sub	r18, r24
     cc6:	39 0b       	sbc	r19, r25
     cc8:	4a 0b       	sbc	r20, r26
     cca:	5b 0b       	sbc	r21, r27
     ccc:	a5 e3       	ldi	r26, 0x35	; 53
     cce:	bc e0       	ldi	r27, 0x0C	; 12
     cd0:	81 d4       	rcall	.+2306   	; 0x15d4 <__muluhisi3>
		if (pressure < 0x80000000)
     cd2:	99 23       	and	r25, r25
     cd4:	54 f0       	brlt	.+20     	; 0xcea <bme280_compensate_data+0x478>
			pressure = (pressure << 1) / ((uint32_t)var1);
     cd6:	66 0f       	add	r22, r22
     cd8:	77 1f       	adc	r23, r23
     cda:	88 1f       	adc	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	a3 01       	movw	r20, r6
     ce0:	92 01       	movw	r18, r4
     ce2:	56 d4       	rcall	.+2220   	; 0x1590 <__udivmodsi4>
     ce4:	69 01       	movw	r12, r18
     ce6:	7a 01       	movw	r14, r20
     ce8:	09 c0       	rjmp	.+18     	; 0xcfc <bme280_compensate_data+0x48a>
		else
			pressure = (pressure / (uint32_t)var1) * 2;
     cea:	a3 01       	movw	r20, r6
     cec:	92 01       	movw	r18, r4
     cee:	50 d4       	rcall	.+2208   	; 0x1590 <__udivmodsi4>
     cf0:	69 01       	movw	r12, r18
     cf2:	7a 01       	movw	r14, r20
     cf4:	cc 0c       	add	r12, r12
     cf6:	dd 1c       	adc	r13, r13
     cf8:	ee 1c       	adc	r14, r14
     cfa:	ff 1c       	adc	r15, r15

		var1 = (((int32_t)calib_data->dig_P9) * ((int32_t)(((pressure / 8) * (pressure / 8)) / 8192))) / 4096;
     cfc:	ae 81       	ldd	r26, Y+6	; 0x06
     cfe:	bf 81       	ldd	r27, Y+7	; 0x07
     d00:	56 96       	adiw	r26, 0x16	; 22
     d02:	ed 91       	ld	r30, X+
     d04:	fc 91       	ld	r31, X
     d06:	57 97       	sbiw	r26, 0x17	; 23
     d08:	c7 01       	movw	r24, r14
     d0a:	b6 01       	movw	r22, r12
     d0c:	68 94       	set
     d0e:	12 f8       	bld	r1, 2
     d10:	96 95       	lsr	r25
     d12:	87 95       	ror	r24
     d14:	77 95       	ror	r23
     d16:	67 95       	ror	r22
     d18:	16 94       	lsr	r1
     d1a:	d1 f7       	brne	.-12     	; 0xd10 <bme280_compensate_data+0x49e>
     d1c:	9b 01       	movw	r18, r22
     d1e:	ac 01       	movw	r20, r24
     d20:	28 d4       	rcall	.+2128   	; 0x1572 <__mulsi3>
     d22:	9b 01       	movw	r18, r22
     d24:	ac 01       	movw	r20, r24
     d26:	01 2e       	mov	r0, r17
     d28:	1d e0       	ldi	r17, 0x0D	; 13
     d2a:	56 95       	lsr	r21
     d2c:	47 95       	ror	r20
     d2e:	37 95       	ror	r19
     d30:	27 95       	ror	r18
     d32:	1a 95       	dec	r17
     d34:	d1 f7       	brne	.-12     	; 0xd2a <bme280_compensate_data+0x4b8>
     d36:	10 2d       	mov	r17, r0
     d38:	df 01       	movw	r26, r30
     d3a:	56 d4       	rcall	.+2220   	; 0x15e8 <__mulshisi3>
     d3c:	4b 01       	movw	r8, r22
     d3e:	5c 01       	movw	r10, r24
     d40:	99 23       	and	r25, r25
     d42:	34 f4       	brge	.+12     	; 0xd50 <bme280_compensate_data+0x4de>
     d44:	bf ef       	ldi	r27, 0xFF	; 255
     d46:	8b 0e       	add	r8, r27
     d48:	bf e0       	ldi	r27, 0x0F	; 15
     d4a:	9b 1e       	adc	r9, r27
     d4c:	a1 1c       	adc	r10, r1
     d4e:	b1 1c       	adc	r11, r1
     d50:	07 2e       	mov	r0, r23
     d52:	7c e0       	ldi	r23, 0x0C	; 12
     d54:	b5 94       	asr	r11
     d56:	a7 94       	ror	r10
     d58:	97 94       	ror	r9
     d5a:	87 94       	ror	r8
     d5c:	7a 95       	dec	r23
     d5e:	d1 f7       	brne	.-12     	; 0xd54 <bme280_compensate_data+0x4e2>
     d60:	70 2d       	mov	r23, r0
		var2 = (((int32_t)(pressure / 4)) * ((int32_t)calib_data->dig_P8)) / 8192;
     d62:	ee 81       	ldd	r30, Y+6	; 0x06
     d64:	ff 81       	ldd	r31, Y+7	; 0x07
     d66:	a4 89       	ldd	r26, Z+20	; 0x14
     d68:	b5 89       	ldd	r27, Z+21	; 0x15
     d6a:	a7 01       	movw	r20, r14
     d6c:	96 01       	movw	r18, r12
     d6e:	56 95       	lsr	r21
     d70:	47 95       	ror	r20
     d72:	37 95       	ror	r19
     d74:	27 95       	ror	r18
     d76:	56 95       	lsr	r21
     d78:	47 95       	ror	r20
     d7a:	37 95       	ror	r19
     d7c:	27 95       	ror	r18
     d7e:	34 d4       	rcall	.+2152   	; 0x15e8 <__mulshisi3>
     d80:	2b 01       	movw	r4, r22
     d82:	3c 01       	movw	r6, r24
     d84:	99 23       	and	r25, r25
     d86:	34 f4       	brge	.+12     	; 0xd94 <bme280_compensate_data+0x522>
     d88:	ff ef       	ldi	r31, 0xFF	; 255
     d8a:	4f 0e       	add	r4, r31
     d8c:	ff e1       	ldi	r31, 0x1F	; 31
     d8e:	5f 1e       	adc	r5, r31
     d90:	61 1c       	adc	r6, r1
     d92:	71 1c       	adc	r7, r1
     d94:	d3 01       	movw	r26, r6
     d96:	c2 01       	movw	r24, r4
     d98:	07 2e       	mov	r0, r23
     d9a:	7d e0       	ldi	r23, 0x0D	; 13
     d9c:	b5 95       	asr	r27
     d9e:	a7 95       	ror	r26
     da0:	97 95       	ror	r25
     da2:	87 95       	ror	r24
     da4:	7a 95       	dec	r23
     da6:	d1 f7       	brne	.-12     	; 0xd9c <bme280_compensate_data+0x52a>
     da8:	70 2d       	mov	r23, r0
		pressure = (uint32_t)((int32_t)pressure + ((var1 + var2 + calib_data->dig_P7) / 16));
     daa:	88 0e       	add	r8, r24
     dac:	99 1e       	adc	r9, r25
     dae:	aa 1e       	adc	r10, r26
     db0:	bb 1e       	adc	r11, r27
     db2:	ae 81       	ldd	r26, Y+6	; 0x06
     db4:	bf 81       	ldd	r27, Y+7	; 0x07
     db6:	52 96       	adiw	r26, 0x12	; 18
     db8:	4d 91       	ld	r20, X+
     dba:	5c 91       	ld	r21, X
     dbc:	53 97       	sbiw	r26, 0x13	; 19
     dbe:	66 27       	eor	r22, r22
     dc0:	57 fd       	sbrc	r21, 7
     dc2:	60 95       	com	r22
     dc4:	76 2f       	mov	r23, r22
     dc6:	84 0e       	add	r8, r20
     dc8:	95 1e       	adc	r9, r21
     dca:	a6 1e       	adc	r10, r22
     dcc:	b7 1e       	adc	r11, r23
     dce:	d5 01       	movw	r26, r10
     dd0:	c4 01       	movw	r24, r8
     dd2:	bb 20       	and	r11, r11
     dd4:	1c f4       	brge	.+6      	; 0xddc <bme280_compensate_data+0x56a>
     dd6:	0f 96       	adiw	r24, 0x0f	; 15
     dd8:	a1 1d       	adc	r26, r1
     dda:	b1 1d       	adc	r27, r1
     ddc:	68 94       	set
     dde:	13 f8       	bld	r1, 3
     de0:	b5 95       	asr	r27
     de2:	a7 95       	ror	r26
     de4:	97 95       	ror	r25
     de6:	87 95       	ror	r24
     de8:	16 94       	lsr	r1
     dea:	d1 f7       	brne	.-12     	; 0xde0 <bme280_compensate_data+0x56e>
     dec:	c8 0e       	add	r12, r24
     dee:	d9 1e       	adc	r13, r25
     df0:	ea 1e       	adc	r14, r26
     df2:	fb 1e       	adc	r15, r27

		if (pressure < pressure_min)
     df4:	b0 e3       	ldi	r27, 0x30	; 48
     df6:	cb 16       	cp	r12, r27
     df8:	b5 e7       	ldi	r27, 0x75	; 117
     dfa:	db 06       	cpc	r13, r27
     dfc:	e1 04       	cpc	r14, r1
     dfe:	f1 04       	cpc	r15, r1
     e00:	a0 f0       	brcs	.+40     	; 0xe2a <bme280_compensate_data+0x5b8>
     e02:	d7 01       	movw	r26, r14
     e04:	c6 01       	movw	r24, r12
     e06:	e1 eb       	ldi	r30, 0xB1	; 177
     e08:	ce 16       	cp	r12, r30
     e0a:	ed ea       	ldi	r30, 0xAD	; 173
     e0c:	de 06       	cpc	r13, r30
     e0e:	e1 e0       	ldi	r30, 0x01	; 1
     e10:	ee 06       	cpc	r14, r30
     e12:	f1 04       	cpc	r15, r1
     e14:	70 f0       	brcs	.+28     	; 0xe32 <bme280_compensate_data+0x5c0>
     e16:	80 eb       	ldi	r24, 0xB0	; 176
     e18:	9d ea       	ldi	r25, 0xAD	; 173
     e1a:	a1 e0       	ldi	r26, 0x01	; 1
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	09 c0       	rjmp	.+18     	; 0xe32 <bme280_compensate_data+0x5c0>
			pressure = pressure_min;
		else if (pressure > pressure_max)
			pressure = pressure_max;
	} else {
		pressure = pressure_min;
     e20:	80 e3       	ldi	r24, 0x30	; 48
     e22:	95 e7       	ldi	r25, 0x75	; 117
     e24:	a0 e0       	ldi	r26, 0x00	; 0
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	04 c0       	rjmp	.+8      	; 0xe32 <bme280_compensate_data+0x5c0>
		var1 = (((int32_t)calib_data->dig_P9) * ((int32_t)(((pressure / 8) * (pressure / 8)) / 8192))) / 4096;
		var2 = (((int32_t)(pressure / 4)) * ((int32_t)calib_data->dig_P8)) / 8192;
		pressure = (uint32_t)((int32_t)pressure + ((var1 + var2 + calib_data->dig_P7) / 16));

		if (pressure < pressure_min)
			pressure = pressure_min;
     e2a:	80 e3       	ldi	r24, 0x30	; 48
     e2c:	95 e7       	ldi	r25, 0x75	; 117
     e2e:	a0 e0       	ldi	r26, 0x00	; 0
     e30:	b0 e0       	ldi	r27, 0x00	; 0
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
		}
		if (sensor_comp & BME280_PRESS) {
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
     e32:	f1 01       	movw	r30, r2
     e34:	80 83       	st	Z, r24
     e36:	91 83       	std	Z+1, r25	; 0x01
     e38:	a2 83       	std	Z+2, r26	; 0x02
     e3a:	b3 83       	std	Z+3, r27	; 0x03
		}
		if (sensor_comp & BME280_HUM) {
     e3c:	f9 81       	ldd	r31, Y+1	; 0x01
     e3e:	f2 ff       	sbrs	r31, 2
     e40:	52 c1       	rjmp	.+676    	; 0x10e6 <bme280_compensate_data+0x874>
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;

	var1 = calib_data->t_fine - ((int32_t)76800);
     e42:	ae 81       	ldd	r26, Y+6	; 0x06
     e44:	bf 81       	ldd	r27, Y+7	; 0x07
     e46:	91 96       	adiw	r26, 0x21	; 33
     e48:	cd 90       	ld	r12, X+
     e4a:	dd 90       	ld	r13, X+
     e4c:	ed 90       	ld	r14, X+
     e4e:	fc 90       	ld	r15, X
     e50:	94 97       	sbiw	r26, 0x24	; 36
     e52:	bc e2       	ldi	r27, 0x2C	; 44
     e54:	db 1a       	sub	r13, r27
     e56:	b1 e0       	ldi	r27, 0x01	; 1
     e58:	eb 0a       	sbc	r14, r27
     e5a:	f1 08       	sbc	r15, r1
	var2 = (int32_t)(uncomp_data->humidity * 16384);
     e5c:	f8 01       	movw	r30, r16
     e5e:	80 84       	ldd	r8, Z+8	; 0x08
     e60:	91 84       	ldd	r9, Z+9	; 0x09
     e62:	a2 84       	ldd	r10, Z+10	; 0x0a
     e64:	b3 84       	ldd	r11, Z+11	; 0x0b
     e66:	07 2e       	mov	r0, r23
     e68:	7e e0       	ldi	r23, 0x0E	; 14
     e6a:	88 0c       	add	r8, r8
     e6c:	99 1c       	adc	r9, r9
     e6e:	aa 1c       	adc	r10, r10
     e70:	bb 1c       	adc	r11, r11
     e72:	7a 95       	dec	r23
     e74:	d1 f7       	brne	.-12     	; 0xe6a <bme280_compensate_data+0x5f8>
     e76:	70 2d       	mov	r23, r0
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
     e78:	ae 81       	ldd	r26, Y+6	; 0x06
     e7a:	bf 81       	ldd	r27, Y+7	; 0x07
     e7c:	5c 96       	adiw	r26, 0x1c	; 28
     e7e:	4d 91       	ld	r20, X+
     e80:	5c 91       	ld	r21, X
     e82:	5d 97       	sbiw	r26, 0x1d	; 29
     e84:	66 27       	eor	r22, r22
     e86:	57 fd       	sbrc	r21, 7
     e88:	60 95       	com	r22
     e8a:	76 2f       	mov	r23, r22
     e8c:	03 2e       	mov	r0, r19
     e8e:	34 e1       	ldi	r19, 0x14	; 20
     e90:	44 0f       	add	r20, r20
     e92:	55 1f       	adc	r21, r21
     e94:	66 1f       	adc	r22, r22
     e96:	77 1f       	adc	r23, r23
     e98:	3a 95       	dec	r19
     e9a:	d1 f7       	brne	.-12     	; 0xe90 <bme280_compensate_data+0x61e>
     e9c:	30 2d       	mov	r19, r0
	var4 = ((int32_t)calib_data->dig_H5) * var1;
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
     e9e:	84 1a       	sub	r8, r20
     ea0:	95 0a       	sbc	r9, r21
     ea2:	a6 0a       	sbc	r10, r22
     ea4:	b7 0a       	sbc	r11, r23
	uint32_t humidity_max = 102400;

	var1 = calib_data->t_fine - ((int32_t)76800);
	var2 = (int32_t)(uncomp_data->humidity * 16384);
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
	var4 = ((int32_t)calib_data->dig_H5) * var1;
     ea6:	5e 96       	adiw	r26, 0x1e	; 30
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	a7 01       	movw	r20, r14
     eb0:	96 01       	movw	r18, r12
     eb2:	9a d3       	rcall	.+1844   	; 0x15e8 <__mulshisi3>
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
     eb4:	a5 01       	movw	r20, r10
     eb6:	94 01       	movw	r18, r8
     eb8:	26 1b       	sub	r18, r22
     eba:	37 0b       	sbc	r19, r23
     ebc:	48 0b       	sbc	r20, r24
     ebe:	59 0b       	sbc	r21, r25
     ec0:	da 01       	movw	r26, r20
     ec2:	c9 01       	movw	r24, r18
     ec4:	90 5c       	subi	r25, 0xC0	; 192
     ec6:	af 4f       	sbci	r26, 0xFF	; 255
     ec8:	bf 4f       	sbci	r27, 0xFF	; 255
     eca:	4c 01       	movw	r8, r24
     ecc:	5d 01       	movw	r10, r26
     ece:	bb 23       	and	r27, r27
     ed0:	34 f4       	brge	.+12     	; 0xede <bme280_compensate_data+0x66c>
     ed2:	3f ef       	ldi	r19, 0xFF	; 255
     ed4:	83 0e       	add	r8, r19
     ed6:	3f e7       	ldi	r19, 0x7F	; 127
     ed8:	93 1e       	adc	r9, r19
     eda:	a1 1c       	adc	r10, r1
     edc:	b1 1c       	adc	r11, r1
     ede:	07 2e       	mov	r0, r23
     ee0:	7f e0       	ldi	r23, 0x0F	; 15
     ee2:	b5 94       	asr	r11
     ee4:	a7 94       	ror	r10
     ee6:	97 94       	ror	r9
     ee8:	87 94       	ror	r8
     eea:	7a 95       	dec	r23
     eec:	d1 f7       	brne	.-12     	; 0xee2 <bme280_compensate_data+0x670>
     eee:	70 2d       	mov	r23, r0
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
     ef0:	ee 81       	ldd	r30, Y+6	; 0x06
     ef2:	ff 81       	ldd	r31, Y+7	; 0x07
     ef4:	a0 a1       	ldd	r26, Z+32	; 0x20
     ef6:	bb 27       	eor	r27, r27
     ef8:	a7 fd       	sbrc	r26, 7
     efa:	b0 95       	com	r27
     efc:	a7 01       	movw	r20, r14
     efe:	96 01       	movw	r18, r12
     f00:	73 d3       	rcall	.+1766   	; 0x15e8 <__mulshisi3>
     f02:	2b 01       	movw	r4, r22
     f04:	3c 01       	movw	r6, r24
     f06:	99 23       	and	r25, r25
     f08:	34 f4       	brge	.+12     	; 0xf16 <bme280_compensate_data+0x6a4>
     f0a:	ff ef       	ldi	r31, 0xFF	; 255
     f0c:	4f 0e       	add	r4, r31
     f0e:	f3 e0       	ldi	r31, 0x03	; 3
     f10:	5f 1e       	adc	r5, r31
     f12:	61 1c       	adc	r6, r1
     f14:	71 1c       	adc	r7, r1
     f16:	03 2e       	mov	r0, r19
     f18:	3a e0       	ldi	r19, 0x0A	; 10
     f1a:	75 94       	asr	r7
     f1c:	67 94       	ror	r6
     f1e:	57 94       	ror	r5
     f20:	47 94       	ror	r4
     f22:	3a 95       	dec	r19
     f24:	d1 f7       	brne	.-12     	; 0xf1a <bme280_compensate_data+0x6a8>
     f26:	30 2d       	mov	r19, r0
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
     f28:	ee 81       	ldd	r30, Y+6	; 0x06
     f2a:	ff 81       	ldd	r31, Y+7	; 0x07
     f2c:	a3 8d       	ldd	r26, Z+27	; 0x1b
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	a7 01       	movw	r20, r14
     f32:	96 01       	movw	r18, r12
     f34:	4f d3       	rcall	.+1694   	; 0x15d4 <__muluhisi3>
     f36:	6b 01       	movw	r12, r22
     f38:	7c 01       	movw	r14, r24
     f3a:	99 23       	and	r25, r25
     f3c:	34 f4       	brge	.+12     	; 0xf4a <bme280_compensate_data+0x6d8>
     f3e:	ff ef       	ldi	r31, 0xFF	; 255
     f40:	cf 0e       	add	r12, r31
     f42:	f7 e0       	ldi	r31, 0x07	; 7
     f44:	df 1e       	adc	r13, r31
     f46:	e1 1c       	adc	r14, r1
     f48:	f1 1c       	adc	r15, r1
     f4a:	d7 01       	movw	r26, r14
     f4c:	c6 01       	movw	r24, r12
     f4e:	07 2e       	mov	r0, r23
     f50:	7b e0       	ldi	r23, 0x0B	; 11
     f52:	b5 95       	asr	r27
     f54:	a7 95       	ror	r26
     f56:	97 95       	ror	r25
     f58:	87 95       	ror	r24
     f5a:	7a 95       	dec	r23
     f5c:	d1 f7       	brne	.-12     	; 0xf52 <bme280_compensate_data+0x6e0>
     f5e:	70 2d       	mov	r23, r0
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
     f60:	bc 01       	movw	r22, r24
     f62:	cd 01       	movw	r24, r26
     f64:	70 58       	subi	r23, 0x80	; 128
     f66:	8f 4f       	sbci	r24, 0xFF	; 255
     f68:	9f 4f       	sbci	r25, 0xFF	; 255
     f6a:	a3 01       	movw	r20, r6
     f6c:	92 01       	movw	r18, r4
     f6e:	01 d3       	rcall	.+1538   	; 0x1572 <__mulsi3>
     f70:	6b 01       	movw	r12, r22
     f72:	7c 01       	movw	r14, r24
     f74:	99 23       	and	r25, r25
     f76:	34 f4       	brge	.+12     	; 0xf84 <bme280_compensate_data+0x712>
     f78:	2f ef       	ldi	r18, 0xFF	; 255
     f7a:	c2 0e       	add	r12, r18
     f7c:	23 e0       	ldi	r18, 0x03	; 3
     f7e:	d2 1e       	adc	r13, r18
     f80:	e1 1c       	adc	r14, r1
     f82:	f1 1c       	adc	r15, r1
     f84:	d7 01       	movw	r26, r14
     f86:	c6 01       	movw	r24, r12
     f88:	07 2e       	mov	r0, r23
     f8a:	7a e0       	ldi	r23, 0x0A	; 10
     f8c:	b5 95       	asr	r27
     f8e:	a7 95       	ror	r26
     f90:	97 95       	ror	r25
     f92:	87 95       	ror	r24
     f94:	7a 95       	dec	r23
     f96:	d1 f7       	brne	.-12     	; 0xf8c <bme280_compensate_data+0x71a>
     f98:	70 2d       	mov	r23, r0
     f9a:	9c 01       	movw	r18, r24
     f9c:	ad 01       	movw	r20, r26
     f9e:	40 5e       	subi	r20, 0xE0	; 224
     fa0:	5f 4f       	sbci	r21, 0xFF	; 255
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
     fa2:	ee 81       	ldd	r30, Y+6	; 0x06
     fa4:	ff 81       	ldd	r31, Y+7	; 0x07
     fa6:	a1 8d       	ldd	r26, Z+25	; 0x19
     fa8:	b2 8d       	ldd	r27, Z+26	; 0x1a
     faa:	1e d3       	rcall	.+1596   	; 0x15e8 <__mulshisi3>
     fac:	6b 01       	movw	r12, r22
     fae:	7c 01       	movw	r14, r24
     fb0:	f0 e2       	ldi	r31, 0x20	; 32
     fb2:	df 0e       	add	r13, r31
     fb4:	e1 1c       	adc	r14, r1
     fb6:	f1 1c       	adc	r15, r1
     fb8:	d7 01       	movw	r26, r14
     fba:	c6 01       	movw	r24, r12
     fbc:	ff 20       	and	r15, r15
     fbe:	24 f4       	brge	.+8      	; 0xfc8 <bme280_compensate_data+0x756>
     fc0:	81 50       	subi	r24, 0x01	; 1
     fc2:	90 4c       	sbci	r25, 0xC0	; 192
     fc4:	af 4f       	sbci	r26, 0xFF	; 255
     fc6:	bf 4f       	sbci	r27, 0xFF	; 255
     fc8:	bc 01       	movw	r22, r24
     fca:	cd 01       	movw	r24, r26
     fcc:	05 2e       	mov	r0, r21
     fce:	5e e0       	ldi	r21, 0x0E	; 14
     fd0:	95 95       	asr	r25
     fd2:	87 95       	ror	r24
     fd4:	77 95       	ror	r23
     fd6:	67 95       	ror	r22
     fd8:	5a 95       	dec	r21
     fda:	d1 f7       	brne	.-12     	; 0xfd0 <bme280_compensate_data+0x75e>
     fdc:	50 2d       	mov	r21, r0
	var3 = var5 * var2;
     fde:	a5 01       	movw	r20, r10
     fe0:	94 01       	movw	r18, r8
     fe2:	c7 d2       	rcall	.+1422   	; 0x1572 <__mulsi3>
     fe4:	6b 01       	movw	r12, r22
     fe6:	7c 01       	movw	r14, r24
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	ff 20       	and	r15, r15
     fee:	24 f4       	brge	.+8      	; 0xff8 <bme280_compensate_data+0x786>
     ff0:	81 50       	subi	r24, 0x01	; 1
     ff2:	90 48       	sbci	r25, 0x80	; 128
     ff4:	af 4f       	sbci	r26, 0xFF	; 255
     ff6:	bf 4f       	sbci	r27, 0xFF	; 255
     ff8:	bc 01       	movw	r22, r24
     ffa:	cd 01       	movw	r24, r26
     ffc:	05 2e       	mov	r0, r21
     ffe:	5f e0       	ldi	r21, 0x0F	; 15
    1000:	95 95       	asr	r25
    1002:	87 95       	ror	r24
    1004:	77 95       	ror	r23
    1006:	67 95       	ror	r22
    1008:	5a 95       	dec	r21
    100a:	d1 f7       	brne	.-12     	; 0x1000 <bme280_compensate_data+0x78e>
    100c:	50 2d       	mov	r21, r0
    100e:	9b 01       	movw	r18, r22
    1010:	ac 01       	movw	r20, r24
    1012:	af d2       	rcall	.+1374   	; 0x1572 <__mulsi3>
    1014:	8b 01       	movw	r16, r22
    1016:	9c 01       	movw	r18, r24
    1018:	99 23       	and	r25, r25
    101a:	24 f4       	brge	.+8      	; 0x1024 <bme280_compensate_data+0x7b2>
    101c:	01 58       	subi	r16, 0x81	; 129
    101e:	1f 4f       	sbci	r17, 0xFF	; 255
    1020:	2f 4f       	sbci	r18, 0xFF	; 255
    1022:	3f 4f       	sbci	r19, 0xFF	; 255
    1024:	a9 01       	movw	r20, r18
    1026:	98 01       	movw	r18, r16
    1028:	68 94       	set
    102a:	16 f8       	bld	r1, 6
    102c:	55 95       	asr	r21
    102e:	47 95       	ror	r20
    1030:	37 95       	ror	r19
    1032:	27 95       	ror	r18
    1034:	16 94       	lsr	r1
    1036:	d1 f7       	brne	.-12     	; 0x102c <bme280_compensate_data+0x7ba>
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
    1038:	ee 81       	ldd	r30, Y+6	; 0x06
    103a:	ff 81       	ldd	r31, Y+7	; 0x07
    103c:	a0 8d       	ldd	r26, Z+24	; 0x18
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	c9 d2       	rcall	.+1426   	; 0x15d4 <__muluhisi3>
    1042:	4b 01       	movw	r8, r22
    1044:	5c 01       	movw	r10, r24
    1046:	99 23       	and	r25, r25
    1048:	2c f4       	brge	.+10     	; 0x1054 <bme280_compensate_data+0x7e2>
    104a:	ff e0       	ldi	r31, 0x0F	; 15
    104c:	8f 0e       	add	r8, r31
    104e:	91 1c       	adc	r9, r1
    1050:	a1 1c       	adc	r10, r1
    1052:	b1 1c       	adc	r11, r1
    1054:	d5 01       	movw	r26, r10
    1056:	c4 01       	movw	r24, r8
    1058:	68 94       	set
    105a:	13 f8       	bld	r1, 3
    105c:	b5 95       	asr	r27
    105e:	a7 95       	ror	r26
    1060:	97 95       	ror	r25
    1062:	87 95       	ror	r24
    1064:	16 94       	lsr	r1
    1066:	d1 f7       	brne	.-12     	; 0x105c <bme280_compensate_data+0x7ea>
	var5 = (var5 < 0 ? 0 : var5);
    1068:	c8 1a       	sub	r12, r24
    106a:	d9 0a       	sbc	r13, r25
    106c:	ea 0a       	sbc	r14, r26
    106e:	fb 0a       	sbc	r15, r27
    1070:	1a f4       	brpl	.+6      	; 0x1078 <bme280_compensate_data+0x806>
    1072:	c1 2c       	mov	r12, r1
    1074:	d1 2c       	mov	r13, r1
    1076:	76 01       	movw	r14, r12
	var5 = (var5 > 419430400 ? 419430400 : var5);
    1078:	21 e0       	ldi	r18, 0x01	; 1
    107a:	c2 16       	cp	r12, r18
    107c:	d1 04       	cpc	r13, r1
    107e:	e1 04       	cpc	r14, r1
    1080:	29 e1       	ldi	r18, 0x19	; 25
    1082:	f2 06       	cpc	r15, r18
    1084:	3c f0       	brlt	.+14     	; 0x1094 <bme280_compensate_data+0x822>
    1086:	0f 2e       	mov	r0, r31
    1088:	c1 2c       	mov	r12, r1
    108a:	d1 2c       	mov	r13, r1
    108c:	e1 2c       	mov	r14, r1
    108e:	f9 e1       	ldi	r31, 0x19	; 25
    1090:	ff 2e       	mov	r15, r31
    1092:	f0 2d       	mov	r31, r0
	humidity = (uint32_t)(var5 / 4096);
    1094:	d7 01       	movw	r26, r14
    1096:	c6 01       	movw	r24, r12
    1098:	ff 20       	and	r15, r15
    109a:	24 f4       	brge	.+8      	; 0x10a4 <bme280_compensate_data+0x832>
    109c:	81 50       	subi	r24, 0x01	; 1
    109e:	90 4f       	sbci	r25, 0xF0	; 240
    10a0:	af 4f       	sbci	r26, 0xFF	; 255
    10a2:	bf 4f       	sbci	r27, 0xFF	; 255
    10a4:	07 2e       	mov	r0, r23
    10a6:	7c e0       	ldi	r23, 0x0C	; 12
    10a8:	b5 95       	asr	r27
    10aa:	a7 95       	ror	r26
    10ac:	97 95       	ror	r25
    10ae:	87 95       	ror	r24
    10b0:	7a 95       	dec	r23
    10b2:	d1 f7       	brne	.-12     	; 0x10a8 <bme280_compensate_data+0x836>
    10b4:	70 2d       	mov	r23, r0
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	30 e9       	ldi	r19, 0x90	; 144
    10ba:	93 07       	cpc	r25, r19
    10bc:	31 e0       	ldi	r19, 0x01	; 1
    10be:	a3 07       	cpc	r26, r19
    10c0:	b1 05       	cpc	r27, r1
    10c2:	20 f0       	brcs	.+8      	; 0x10cc <bme280_compensate_data+0x85a>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e9       	ldi	r25, 0x90	; 144
    10c8:	a1 e0       	ldi	r26, 0x01	; 1
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
		}
		if (sensor_comp & BME280_HUM) {
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
    10cc:	f1 01       	movw	r30, r2
    10ce:	80 87       	std	Z+8, r24	; 0x08
    10d0:	91 87       	std	Z+9, r25	; 0x09
    10d2:	a2 87       	std	Z+10, r26	; 0x0a
    10d4:	b3 87       	std	Z+11, r27	; 0x0b
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
	int8_t rslt = BME280_OK;
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	07 c0       	rjmp	.+14     	; 0x10e8 <bme280_compensate_data+0x876>
		if (sensor_comp & BME280_HUM) {
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
		}
	} else {
		rslt = BME280_E_NULL_PTR;
    10da:	8f ef       	ldi	r24, 0xFF	; 255
    10dc:	05 c0       	rjmp	.+10     	; 0x10e8 <bme280_compensate_data+0x876>
    10de:	8f ef       	ldi	r24, 0xFF	; 255
    10e0:	03 c0       	rjmp	.+6      	; 0x10e8 <bme280_compensate_data+0x876>
    10e2:	8f ef       	ldi	r24, 0xFF	; 255
    10e4:	01 c0       	rjmp	.+2      	; 0x10e8 <bme280_compensate_data+0x876>
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
	int8_t rslt = BME280_OK;
    10e6:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		rslt = BME280_E_NULL_PTR;
	}

	return rslt;
}
    10e8:	29 96       	adiw	r28, 0x09	; 9
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	cd bf       	out	0x3d, r28	; 61
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	ff 90       	pop	r15
    10fe:	ef 90       	pop	r14
    1100:	df 90       	pop	r13
    1102:	cf 90       	pop	r12
    1104:	bf 90       	pop	r11
    1106:	af 90       	pop	r10
    1108:	9f 90       	pop	r9
    110a:	8f 90       	pop	r8
    110c:	7f 90       	pop	r7
    110e:	6f 90       	pop	r6
    1110:	5f 90       	pop	r5
    1112:	4f 90       	pop	r4
    1114:	3f 90       	pop	r3
    1116:	2f 90       	pop	r2
    1118:	08 95       	ret

0000111a <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
    111a:	df 92       	push	r13
    111c:	ef 92       	push	r14
    111e:	ff 92       	push	r15
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	64 97       	sbiw	r28, 0x14	; 20
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	de bf       	out	0x3e, r29	; 62
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	cd bf       	out	0x3d, r28	; 61
    1138:	d8 2e       	mov	r13, r24
    113a:	7b 01       	movw	r14, r22
    113c:	8a 01       	movw	r16, r20
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
    113e:	fe 01       	movw	r30, r28
    1140:	31 96       	adiw	r30, 0x01	; 1
    1142:	98 e0       	ldi	r25, 0x08	; 8
    1144:	df 01       	movw	r26, r30
    1146:	1d 92       	st	X+, r1
    1148:	9a 95       	dec	r25
    114a:	e9 f7       	brne	.-6      	; 0x1146 <bme280_get_sensor_data+0x2c>
	struct bme280_uncomp_data uncomp_data = {0};
    114c:	38 96       	adiw	r30, 0x08	; 8
    114e:	9c e0       	ldi	r25, 0x0C	; 12
    1150:	df 01       	movw	r26, r30
    1152:	1d 92       	st	X+, r1
    1154:	9a 95       	dec	r25
    1156:	e9 f7       	brne	.-6      	; 0x1152 <bme280_get_sensor_data+0x38>

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
    1158:	ca 01       	movw	r24, r20
    115a:	81 d7       	rcall	.+3842   	; 0x205e <__data_load_end+0x9bc>

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
    115c:	81 11       	cpse	r24, r1
    115e:	1d c0       	rjmp	.+58     	; 0x119a <bme280_get_sensor_data+0x80>
    1160:	e1 14       	cp	r14, r1
    1162:	f1 04       	cpc	r15, r1
    1164:	e1 f0       	breq	.+56     	; 0x119e <bme280_get_sensor_data+0x84>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
    1166:	98 01       	movw	r18, r16
    1168:	48 e0       	ldi	r20, 0x08	; 8
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	be 01       	movw	r22, r28
    116e:	6f 5f       	subi	r22, 0xFF	; 255
    1170:	7f 4f       	sbci	r23, 0xFF	; 255
    1172:	87 ef       	ldi	r24, 0xF7	; 247
    1174:	8d d7       	rcall	.+3866   	; 0x2090 <__data_load_end+0x9ee>

		if (rslt == BME280_OK) {
    1176:	81 11       	cpse	r24, r1
    1178:	13 c0       	rjmp	.+38     	; 0x11a0 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
    117a:	be 01       	movw	r22, r28
    117c:	67 5f       	subi	r22, 0xF7	; 247
    117e:	7f 4f       	sbci	r23, 0xFF	; 255
    1180:	ce 01       	movw	r24, r28
    1182:	01 96       	adiw	r24, 0x01	; 1
    1184:	07 db       	rcall	.-2546   	; 0x794 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
    1186:	98 01       	movw	r18, r16
    1188:	27 5f       	subi	r18, 0xF7	; 247
    118a:	3f 4f       	sbci	r19, 0xFF	; 255
    118c:	a7 01       	movw	r20, r14
    118e:	be 01       	movw	r22, r28
    1190:	67 5f       	subi	r22, 0xF7	; 247
    1192:	7f 4f       	sbci	r23, 0xFF	; 255
    1194:	8d 2d       	mov	r24, r13
    1196:	6d db       	rcall	.-2342   	; 0x872 <bme280_compensate_data>
    1198:	03 c0       	rjmp	.+6      	; 0x11a0 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	01 c0       	rjmp	.+2      	; 0x11a0 <bme280_get_sensor_data+0x86>
    119e:	8f ef       	ldi	r24, 0xFF	; 255
	}

	return rslt;
}
    11a0:	64 96       	adiw	r28, 0x14	; 20
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	ff 90       	pop	r15
    11b6:	ef 90       	pop	r14
    11b8:	df 90       	pop	r13
    11ba:	08 95       	ret

000011bc <print_sensor_data>:
struct bme280_dev sensor_interf;
int8_t rslt = BME280_OK;


void print_sensor_data(struct bme280_data *comp_data)
{
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	ec 01       	movw	r28, r24
	#ifdef BME280_FLOAT_ENABLE
	//printf("%0.2f, %0.2f, %0.2f\r\n",comp_data->temperature, comp_data->pressure, comp_data->humidity);
	#else
	#ifdef OUTPUT_LOG
	uart_send_string("Temperature: ");	uart_send_udec(comp_data->temperature);	uart_newline();
    11c2:	80 e6       	ldi	r24, 0x60	; 96
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	68 d1       	rcall	.+720    	; 0x1498 <uart_send_string>
    11c8:	6c 81       	ldd	r22, Y+4	; 0x04
    11ca:	7d 81       	ldd	r23, Y+5	; 0x05
    11cc:	8e 81       	ldd	r24, Y+6	; 0x06
    11ce:	9f 81       	ldd	r25, Y+7	; 0x07
    11d0:	71 d1       	rcall	.+738    	; 0x14b4 <uart_send_udec>
    11d2:	8d e0       	ldi	r24, 0x0D	; 13
    11d4:	43 d1       	rcall	.+646    	; 0x145c <uart_send_char>
    11d6:	8a e0       	ldi	r24, 0x0A	; 10
    11d8:	41 d1       	rcall	.+642    	; 0x145c <uart_send_char>
	uart_send_string("Pressure: ");	uart_send_udec(comp_data->pressure);uart_newline();
    11da:	8e e6       	ldi	r24, 0x6E	; 110
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	5c d1       	rcall	.+696    	; 0x1498 <uart_send_string>
    11e0:	68 81       	ld	r22, Y
    11e2:	79 81       	ldd	r23, Y+1	; 0x01
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	9b 81       	ldd	r25, Y+3	; 0x03
    11e8:	65 d1       	rcall	.+714    	; 0x14b4 <uart_send_udec>
    11ea:	8d e0       	ldi	r24, 0x0D	; 13
    11ec:	37 d1       	rcall	.+622    	; 0x145c <uart_send_char>
    11ee:	8a e0       	ldi	r24, 0x0A	; 10
    11f0:	35 d1       	rcall	.+618    	; 0x145c <uart_send_char>
	uart_send_string("Humidity: ");	uart_send_udec(comp_data->humidity);uart_newline();
    11f2:	89 e7       	ldi	r24, 0x79	; 121
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	50 d1       	rcall	.+672    	; 0x1498 <uart_send_string>
    11f8:	68 85       	ldd	r22, Y+8	; 0x08
    11fa:	79 85       	ldd	r23, Y+9	; 0x09
    11fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    11fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1200:	59 d1       	rcall	.+690    	; 0x14b4 <uart_send_udec>
    1202:	8d e0       	ldi	r24, 0x0D	; 13
    1204:	2b d1       	rcall	.+598    	; 0x145c <uart_send_char>
    1206:	8a e0       	ldi	r24, 0x0A	; 10
    1208:	29 d1       	rcall	.+594    	; 0x145c <uart_send_char>
	#endif // OUTPUT_LOG
	#endif
}
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	08 95       	ret

00001210 <setup_measurement_normal_mode>:

int8_t setup_measurement_normal_mode(struct bme280_dev *dev)
//int8_t stream_sensor_data_normal_mode(struct bme280_dev *dev)
{
    1210:	1f 93       	push	r17
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	ec 01       	movw	r28, r24
	int8_t rslt;
	uint8_t settings_sel;
	

	/* Recommended mode of operation: Indoor navigation */
	dev->settings.osr_h = BME280_OVERSAMPLING_1X;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	88 ab       	std	Y+48, r24	; 0x30
	dev->settings.osr_p = BME280_OVERSAMPLING_16X;
    121c:	95 e0       	ldi	r25, 0x05	; 5
    121e:	9e a7       	std	Y+46, r25	; 0x2e
	dev->settings.osr_t = BME280_OVERSAMPLING_2X;
    1220:	92 e0       	ldi	r25, 0x02	; 2
    1222:	9f a7       	std	Y+47, r25	; 0x2f
	dev->settings.filter = BME280_FILTER_COEFF_16;
    1224:	94 e0       	ldi	r25, 0x04	; 4
    1226:	99 ab       	std	Y+49, r25	; 0x31
	dev->settings.standby_time = BME280_STANDBY_TIME_62_5_MS;
    1228:	8a ab       	std	Y+50, r24	; 0x32
	settings_sel = BME280_OSR_PRESS_SEL;
	settings_sel |= BME280_OSR_TEMP_SEL;
	settings_sel |= BME280_OSR_HUM_SEL;
	settings_sel |= BME280_STANDBY_SEL;
	settings_sel |= BME280_FILTER_SEL;
	rslt = bme280_set_sensor_settings(settings_sel, dev);
    122a:	be 01       	movw	r22, r28
    122c:	8f e1       	ldi	r24, 0x1F	; 31
    122e:	33 da       	rcall	.-2970   	; 0x696 <bme280_set_sensor_settings>
    1230:	18 2f       	mov	r17, r24
	#ifdef OUTPUT_LOG
	uart_send_string("BME280 sensor setup with state: ");uart_send_char(0x35+rslt);	uart_newline();
    1232:	84 e8       	ldi	r24, 0x84	; 132
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	30 d1       	rcall	.+608    	; 0x1498 <uart_send_string>
    1238:	85 e3       	ldi	r24, 0x35	; 53
    123a:	81 0f       	add	r24, r17
    123c:	0f d1       	rcall	.+542    	; 0x145c <uart_send_char>
    123e:	8d e0       	ldi	r24, 0x0D	; 13
    1240:	0d d1       	rcall	.+538    	; 0x145c <uart_send_char>
    1242:	8a e0       	ldi	r24, 0x0A	; 10
    1244:	0b d1       	rcall	.+534    	; 0x145c <uart_send_char>
	#endif  //OUTPUT_LOG
	
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, dev);
    1246:	be 01       	movw	r22, r28
    1248:	83 e0       	ldi	r24, 0x03	; 3
    124a:	65 da       	rcall	.-2870   	; 0x716 <bme280_set_sensor_mode>
    124c:	c8 2f       	mov	r28, r24
	#ifdef OUTPUT_LOG
	uart_send_string("BME280 sensor setup with state: ");uart_send_char(0x35+rslt);uart_newline();
    124e:	84 e8       	ldi	r24, 0x84	; 132
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	22 d1       	rcall	.+580    	; 0x1498 <uart_send_string>
    1254:	85 e3       	ldi	r24, 0x35	; 53
    1256:	8c 0f       	add	r24, r28
    1258:	01 d1       	rcall	.+514    	; 0x145c <uart_send_char>
    125a:	8d e0       	ldi	r24, 0x0D	; 13
    125c:	ff d0       	rcall	.+510    	; 0x145c <uart_send_char>
    125e:	8a e0       	ldi	r24, 0x0A	; 10
    1260:	fd d0       	rcall	.+506    	; 0x145c <uart_send_char>
	#endif  //OUTPUT_LOG
	return rslt;
}
    1262:	8c 2f       	mov	r24, r28
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	1f 91       	pop	r17
    126a:	08 95       	ret

0000126c <main>:

int main(void)
{
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	2c 97       	sbiw	r28, 0x0c	; 12
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
	struct bme280_data comp_data;
	INIT_STATUS_LED;
    1280:	8c 9a       	sbi	0x11, 4	; 17
	
	cli();  //Disable interrupts
    1282:	f8 94       	cli
	timer2_init(); //global timer init
    1284:	79 d0       	rcall	.+242    	; 0x1378 <timer2_init>
	uart_init(MYUBRR);
    1286:	6c e0       	ldi	r22, 0x0C	; 12
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	c2 d0       	rcall	.+388    	; 0x1414 <uart_init>
	spi_init();
    1290:	49 d0       	rcall	.+146    	; 0x1324 <spi_init>
	sei();  // enable global interrupts
    1292:	78 94       	sei
	
	#ifdef OUTPUT_LOG
	uart_send_string("Timer, UART & SPI Drivers initialized");	uart_newline();
    1294:	85 ea       	ldi	r24, 0xA5	; 165
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	ff d0       	rcall	.+510    	; 0x1498 <uart_send_string>
    129a:	8d e0       	ldi	r24, 0x0D	; 13
    129c:	df d0       	rcall	.+446    	; 0x145c <uart_send_char>
    129e:	8a e0       	ldi	r24, 0x0A	; 10
    12a0:	dd d0       	rcall	.+442    	; 0x145c <uart_send_char>
	#endif  //OUTPUT_LOG
	
	/* Sensor_0 interface over SPI with native chip select line */
	sensor_interf.dev_id = 0;
    12a2:	10 92 bd 01 	sts	0x01BD, r1
	sensor_interf.intf = BME280_SPI_INTF;
    12a6:	10 92 be 01 	sts	0x01BE, r1
	sensor_interf.read = spi_transfer_bme280;
    12aa:	8f e9       	ldi	r24, 0x9F	; 159
    12ac:	99 e0       	ldi	r25, 0x09	; 9
    12ae:	90 93 c0 01 	sts	0x01C0, r25
    12b2:	80 93 bf 01 	sts	0x01BF, r24
	sensor_interf.write = spi_transfer_bme280;
    12b6:	90 93 c2 01 	sts	0x01C2, r25
    12ba:	80 93 c1 01 	sts	0x01C1, r24
	sensor_interf.delay_ms = timer_delay_ms;
    12be:	85 ec       	ldi	r24, 0xC5	; 197
    12c0:	99 e0       	ldi	r25, 0x09	; 9
    12c2:	90 93 c4 01 	sts	0x01C4, r25
    12c6:	80 93 c3 01 	sts	0x01C3, r24

	rslt = bme280_init(&sensor_interf);
    12ca:	8c eb       	ldi	r24, 0xBC	; 188
    12cc:	91 e0       	ldi	r25, 0x01	; 1
    12ce:	90 d8       	rcall	.-3808   	; 0x3f0 <bme280_init>
    12d0:	80 93 f2 00 	sts	0x00F2, r24
	
	#ifdef OUTPUT_LOG
	uart_send_string("BME280 sensor initialized with state: ");
    12d4:	8b ec       	ldi	r24, 0xCB	; 203
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	df d0       	rcall	.+446    	; 0x1498 <uart_send_string>
	uart_send_char(0x35+rslt);
    12da:	80 91 f2 00 	lds	r24, 0x00F2
    12de:	8b 5c       	subi	r24, 0xCB	; 203
    12e0:	bd d0       	rcall	.+378    	; 0x145c <uart_send_char>
	uart_newline();
    12e2:	8d e0       	ldi	r24, 0x0D	; 13
    12e4:	bb d0       	rcall	.+374    	; 0x145c <uart_send_char>
    12e6:	8a e0       	ldi	r24, 0x0A	; 10
    12e8:	b9 d0       	rcall	.+370    	; 0x145c <uart_send_char>
	#endif  //OUTPUT_LOG
	
	setup_measurement_normal_mode(&sensor_interf);
    12ea:	8c eb       	ldi	r24, 0xBC	; 188
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	90 df       	rcall	.-224    	; 0x1210 <setup_measurement_normal_mode>
	
    while(1)
    {
		uart_newline();
		TOGGLE_STATUS_LED;
    12f0:	10 e1       	ldi	r17, 0x10	; 16
	
	setup_measurement_normal_mode(&sensor_interf);
	
    while(1)
    {
		uart_newline();
    12f2:	8d e0       	ldi	r24, 0x0D	; 13
    12f4:	b3 d0       	rcall	.+358    	; 0x145c <uart_send_char>
    12f6:	8a e0       	ldi	r24, 0x0A	; 10
    12f8:	b1 d0       	rcall	.+354    	; 0x145c <uart_send_char>
		TOGGLE_STATUS_LED;
    12fa:	82 b3       	in	r24, 0x12	; 18
    12fc:	81 27       	eor	r24, r17
    12fe:	82 bb       	out	0x12, r24	; 18
		timer_delay_ms(1000);
    1300:	68 ee       	ldi	r22, 0xE8	; 232
    1302:	73 e0       	ldi	r23, 0x03	; 3
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	40 d0       	rcall	.+128    	; 0x138a <timer_delay_ms>
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &sensor_interf);
    130a:	4c eb       	ldi	r20, 0xBC	; 188
    130c:	51 e0       	ldi	r21, 0x01	; 1
    130e:	be 01       	movw	r22, r28
    1310:	6f 5f       	subi	r22, 0xFF	; 255
    1312:	7f 4f       	sbci	r23, 0xFF	; 255
    1314:	87 e0       	ldi	r24, 0x07	; 7
    1316:	01 df       	rcall	.-510    	; 0x111a <bme280_get_sensor_data>
    1318:	80 93 f2 00 	sts	0x00F2, r24
		print_sensor_data(&comp_data);
    131c:	ce 01       	movw	r24, r28
    131e:	01 96       	adiw	r24, 0x01	; 1
    1320:	4d df       	rcall	.-358    	; 0x11bc <print_sensor_data>
    1322:	e7 cf       	rjmp	.-50     	; 0x12f2 <main+0x86>

00001324 <spi_init>:

/* SPI Initialization function*/
void spi_init(void)
{
	//For operating in master mode, MOSI, SS, SCK pins must be set as output
	SPI_DDR |= (1<<SPI_MOSI_PIN)|(1<<SPI_SS_PIN)|(1<<SPI_SCK_PIN);
    1324:	87 b3       	in	r24, 0x17	; 23
    1326:	8c 62       	ori	r24, 0x2C	; 44
    1328:	87 bb       	out	0x17, r24	; 23
	SPCR = 0;
    132a:	1d b8       	out	0x0d, r1	; 13
	SPSR = 0;
    132c:	1e b8       	out	0x0e, r1	; 14
	SPSR |= (1<<SPI2X);
    132e:	70 9a       	sbi	0x0e, 0	; 14
	//polarity & phase 00
	//spi clock pre-scaler = 64, see table bellow
	#if SPI_USE_INT
		SPCR |= (1<<SPIE)|(1<<SPE)|(1<<MSTR)/*|(1<<CPOL)|(1<<CPHA)*/|(1<<SPR0)|(1<<SPR1);
	#else
		SPCR |= (1<<SPE)|(1<<MSTR)/*|(1<<CPOL)|(1<<CPHA)*/|(1<<SPR0)|(1<<SPR1);
    1330:	8d b1       	in	r24, 0x0d	; 13
    1332:	83 65       	ori	r24, 0x53	; 83
    1334:	8d b9       	out	0x0d, r24	; 13
	1		0		0		fosc/2
	1		0		1		fosc/8
	1		1		0		fosc/32
	1		1		1		fosc/64
	*/
	INIT_CS_PIN(CS_BME280_DDR,CS_BME280_PIN);
    1336:	b8 9a       	sbi	0x17, 0	; 23
	INIT_CS_PIN(CS_LIS3MDL_DDR,CS_LIS3MDL_PIN);
    1338:	b9 9a       	sbi	0x17, 1	; 23
	INIT_CS_PIN(CS_FLASH_DDR,CS_FLASH_PIN);
    133a:	bd 9a       	sbi	0x17, 5	; 23
    133c:	08 95       	ret

0000133e <spi_transfer_bme280>:
*/
int8_t spi_transfer_bme280(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
	int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
	//select which Chip Select pin has	to be set low to activate the relevant device on the SPI bus
	if(dev_id == bme280) CLEAR_CS_PIN(CS_BME280_PORT,CS_BME280_PIN);
    133e:	81 11       	cpse	r24, r1
    1340:	01 c0       	rjmp	.+2      	; 0x1344 <spi_transfer_bme280+0x6>
    1342:	c0 98       	cbi	0x18, 0	; 24
/*                SPI Send / Receive function definitions               */
/************************************************************************/
/* SPI Send and Receive 1 Byte function */
static uint8_t spi_transfer(uint8_t u8data)
{
	SPDR = u8data;
    1344:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF))){}
    1346:	77 9b       	sbis	0x0e, 7	; 14
    1348:	fe cf       	rjmp	.-4      	; 0x1346 <spi_transfer_bme280+0x8>
	return SPDR;
    134a:	9f b1       	in	r25, 0x0f	; 15
	int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
	//select which Chip Select pin has	to be set low to activate the relevant device on the SPI bus
	if(dev_id == bme280) CLEAR_CS_PIN(CS_BME280_PORT,CS_BME280_PIN);

	spi_transfer(reg_addr); // Write the register address, ignore the return
	for (uint16_t i = 0; i < len; i++)
    134c:	21 15       	cp	r18, r1
    134e:	31 05       	cpc	r19, r1
    1350:	71 f0       	breq	.+28     	; 0x136e <spi_transfer_bme280+0x30>
    1352:	fa 01       	movw	r30, r20
    1354:	24 0f       	add	r18, r20
    1356:	35 1f       	adc	r19, r21
    1358:	df 01       	movw	r26, r30
	{
		reg_data[i] = spi_transfer(reg_data[i]);
    135a:	90 81       	ld	r25, Z
/*                SPI Send / Receive function definitions               */
/************************************************************************/
/* SPI Send and Receive 1 Byte function */
static uint8_t spi_transfer(uint8_t u8data)
{
	SPDR = u8data;
    135c:	9f b9       	out	0x0f, r25	; 15
	while(!(SPSR & (1<<SPIF))){}
    135e:	77 9b       	sbis	0x0e, 7	; 14
    1360:	fe cf       	rjmp	.-4      	; 0x135e <spi_transfer_bme280+0x20>
	return SPDR;
    1362:	9f b1       	in	r25, 0x0f	; 15
	if(dev_id == bme280) CLEAR_CS_PIN(CS_BME280_PORT,CS_BME280_PIN);

	spi_transfer(reg_addr); // Write the register address, ignore the return
	for (uint16_t i = 0; i < len; i++)
	{
		reg_data[i] = spi_transfer(reg_data[i]);
    1364:	9c 93       	st	X, r25
    1366:	31 96       	adiw	r30, 0x01	; 1
	int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
	//select which Chip Select pin has	to be set low to activate the relevant device on the SPI bus
	if(dev_id == bme280) CLEAR_CS_PIN(CS_BME280_PORT,CS_BME280_PIN);

	spi_transfer(reg_addr); // Write the register address, ignore the return
	for (uint16_t i = 0; i < len; i++)
    1368:	e2 17       	cp	r30, r18
    136a:	f3 07       	cpc	r31, r19
    136c:	a9 f7       	brne	.-22     	; 0x1358 <spi_transfer_bme280+0x1a>
	{
		reg_data[i] = spi_transfer(reg_data[i]);
	}
	if(dev_id == bme280) SET_CS_PIN(CS_BME280_PORT,CS_BME280_PIN);
    136e:	81 11       	cpse	r24, r1
    1370:	01 c0       	rjmp	.+2      	; 0x1374 <spi_transfer_bme280+0x36>
    1372:	c0 9a       	sbi	0x18, 0	; 24
	return rslt;
}
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	08 95       	ret

00001378 <timer2_init>:
	#if ATMEGA48
	TCCR2A = (1 << WGM21);
	//TCCR2B = (1 << CS22);  //for 64 prescaler
	TCCR2B = (1 << CS21)|(1 << CS20);  //for 32 prescaler
	#elif ATMEGA8
	TCCR2 = (1 << WGM21)|(1 << CS21)|(1 << CS20);
    1378:	8b e0       	ldi	r24, 0x0B	; 11
    137a:	85 bd       	out	0x25, r24	; 37
	#endif
	TCNT2 = 0;
    137c:	14 bc       	out	0x24, r1	; 36
			
	#if ATMEGA48
	OCR2A = 125;
	TIMSK2  |= (1 << OCIE2A);  //Enable Timer1 output compare trigger OCIE2A	
	#elif ATMEGA8
	OCR2 = 125;
    137e:	8d e7       	ldi	r24, 0x7D	; 125
    1380:	83 bd       	out	0x23, r24	; 35
	TIMSK  |= (1 << OCIE2);  //Enable Timer1 output compare trigger OCIE2
    1382:	89 b7       	in	r24, 0x39	; 57
    1384:	80 68       	ori	r24, 0x80	; 128
    1386:	89 bf       	out	0x39, r24	; 57
    1388:	08 95       	ret

0000138a <timer_delay_ms>:
/************************************************************************/
/*	                 Timer Delay / Counter Functions                    */
/************************************************************************/
/* Millisecond wait function*/
void timer_delay_ms(uint32_t delay)
{
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
inline uint32_t timer_ms(void)
{
	//Not necessary to make atomic operation since it's 
	//a short and fast function and it is not critical if
	//returned value is +/- 1 ms in this case
	return timer_system_ms;
    138e:	00 91 f3 00 	lds	r16, 0x00F3
    1392:	10 91 f4 00 	lds	r17, 0x00F4
    1396:	20 91 f5 00 	lds	r18, 0x00F5
    139a:	30 91 f6 00 	lds	r19, 0x00F6
/* Millisecond wait function*/
void timer_delay_ms(uint32_t delay)
{
	//HINT: To increase time accuracy use a 0.97 coefficient on target_ms or delay 
	//Lack of accuracy of ~ 3.5% possible due to internal oscillator
	uint32_t target_ms = timer_ms() + (uint32_t)delay;
    139e:	ab 01       	movw	r20, r22
    13a0:	bc 01       	movw	r22, r24
    13a2:	40 0f       	add	r20, r16
    13a4:	51 1f       	adc	r21, r17
    13a6:	62 1f       	adc	r22, r18
    13a8:	73 1f       	adc	r23, r19
inline uint32_t timer_ms(void)
{
	//Not necessary to make atomic operation since it's 
	//a short and fast function and it is not critical if
	//returned value is +/- 1 ms in this case
	return timer_system_ms;
    13aa:	80 91 f3 00 	lds	r24, 0x00F3
    13ae:	90 91 f4 00 	lds	r25, 0x00F4
    13b2:	a0 91 f5 00 	lds	r26, 0x00F5
    13b6:	b0 91 f6 00 	lds	r27, 0x00F6
void timer_delay_ms(uint32_t delay)
{
	//HINT: To increase time accuracy use a 0.97 coefficient on target_ms or delay 
	//Lack of accuracy of ~ 3.5% possible due to internal oscillator
	uint32_t target_ms = timer_ms() + (uint32_t)delay;
	while(timer_ms() < target_ms) { /*Wait*/ }
    13ba:	84 17       	cp	r24, r20
    13bc:	95 07       	cpc	r25, r21
    13be:	a6 07       	cpc	r26, r22
    13c0:	b7 07       	cpc	r27, r23
    13c2:	98 f3       	brcs	.-26     	; 0x13aa <timer_delay_ms+0x20>
}
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	08 95       	ret

000013ca <__vector_3>:
#if ATMEGA48
ISR (TIMER2_COMPA_vect)
#elif ATMEGA8
ISR (TIMER2_COMP_vect)
#endif
{
    13ca:	1f 92       	push	r1
    13cc:	0f 92       	push	r0
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	0f 92       	push	r0
    13d2:	11 24       	eor	r1, r1
    13d4:	8f 93       	push	r24
    13d6:	9f 93       	push	r25
    13d8:	af 93       	push	r26
    13da:	bf 93       	push	r27
	timer_system_ms++; //increment every 1 ms
    13dc:	80 91 f3 00 	lds	r24, 0x00F3
    13e0:	90 91 f4 00 	lds	r25, 0x00F4
    13e4:	a0 91 f5 00 	lds	r26, 0x00F5
    13e8:	b0 91 f6 00 	lds	r27, 0x00F6
    13ec:	01 96       	adiw	r24, 0x01	; 1
    13ee:	a1 1d       	adc	r26, r1
    13f0:	b1 1d       	adc	r27, r1
    13f2:	80 93 f3 00 	sts	0x00F3, r24
    13f6:	90 93 f4 00 	sts	0x00F4, r25
    13fa:	a0 93 f5 00 	sts	0x00F5, r26
    13fe:	b0 93 f6 00 	sts	0x00F6, r27
}
    1402:	bf 91       	pop	r27
    1404:	af 91       	pop	r26
    1406:	9f 91       	pop	r25
    1408:	8f 91       	pop	r24
    140a:	0f 90       	pop	r0
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	0f 90       	pop	r0
    1410:	1f 90       	pop	r1
    1412:	18 95       	reti

00001414 <uart_init>:
/*                 Initialization Function definitions                  */
/************************************************************************/

/* UART Initialization function*/
void uart_init(uint32_t ubrr)
{
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
	UCSRA = 0x00; // turn everything off
    1418:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0x00;
    141a:	1a b8       	out	0x0a, r1	; 10
	UCSRC = 0x00;
    141c:	10 bc       	out	0x20, r1	; 32
	UBRRH = (uint8_t)(ubrr>>8);//Set baud rate
    141e:	07 2f       	mov	r16, r23
    1420:	18 2f       	mov	r17, r24
    1422:	29 2f       	mov	r18, r25
    1424:	33 27       	eor	r19, r19
    1426:	00 bd       	out	0x20, r16	; 32
	UBRRL = (uint8_t)ubrr;
    1428:	69 b9       	out	0x09, r22	; 9
	#if SET_U2X
	UCSRA = (1<<U2X);
    142a:	82 e0       	ldi	r24, 0x02	; 2
    142c:	8b b9       	out	0x0b, r24	; 11
	#endif
	//Receive and transmit enabled, receive complete interrupt enabled (USART_RXC)
	UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
    142e:	88 e9       	ldi	r24, 0x98	; 152
    1430:	8a b9       	out	0x0a, r24	; 10
	//8 data bits, 1 stop bit, UART operation, no parity
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
	#elif ATMEGA8
	// Set the most used serial settings: asynchrone, no parity, 8 bit, 1 stop bit.
	// The ATmega8 uses an URSEL bit, which is not present on newer chips.
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
    1432:	86 e8       	ldi	r24, 0x86	; 134
    1434:	80 bd       	out	0x20, r24	; 32
	#endif
	
	cr_flag = false;  // set default, no 'cr' detected yet.
    1436:	10 92 f7 00 	sts	0x00F7, r1
	tx_in = tx_out = rx_in = rx_out = 0;  // set all buffer indices to zero.
    143a:	10 92 f8 00 	sts	0x00F8, r1
    143e:	10 92 f9 00 	sts	0x00F9, r1
    1442:	10 92 fa 00 	sts	0x00FA, r1
    1446:	10 92 fb 00 	sts	0x00FB, r1
}
    144a:	1f 91       	pop	r17
    144c:	0f 91       	pop	r16
    144e:	08 95       	ret

00001450 <uart_tx_buflen>:

// Number of bytes as yet untransmitted
// Don't call this from an ISR
uint8_t uart_tx_buflen (void)
{
	return(tx_in - tx_out);
    1450:	80 91 fb 00 	lds	r24, 0x00FB
    1454:	90 91 fa 00 	lds	r25, 0x00FA
}
    1458:	89 1b       	sub	r24, r25
    145a:	08 95       	ret

0000145c <uart_send_char>:
/*                      Output Function definitions                     */
/************************************************************************/

/* UART Send 1 Byte function */
void uart_send_char(char data)
{
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	18 2f       	mov	r17, r24
	// If the character does not fit in buffer, it will still be transmitted, but it waits
	// until characters are transmitted and free space is available in the buffer.
	// If the transmit-buffer is full, wait for it, interrupts will empty it
	// There is no timeout.
	while((TX_BUFFER_SIZE - uart_tx_buflen()) <= 2) {}
    1464:	c0 e4       	ldi	r28, 0x40	; 64
    1466:	d0 e0       	ldi	r29, 0x00	; 0
    1468:	f3 df       	rcall	.-26     	; 0x1450 <uart_tx_buflen>
    146a:	9e 01       	movw	r18, r28
    146c:	28 1b       	sub	r18, r24
    146e:	31 09       	sbc	r19, r1
    1470:	23 30       	cpi	r18, 0x03	; 3
    1472:	31 05       	cpc	r19, r1
    1474:	cc f3       	brlt	.-14     	; 0x1468 <uart_send_char+0xc>
	// Add data to the transmit buffer, enable transmit interrupts
	txbuf[tx_in & TXMASK] = data;  // set character in circular buffer
    1476:	e0 91 fb 00 	lds	r30, 0x00FB
    147a:	ef 73       	andi	r30, 0x3F	; 63
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	e4 58       	subi	r30, 0x84	; 132
    1480:	fe 4f       	sbci	r31, 0xFE	; 254
    1482:	10 83       	st	Z, r17
	tx_in++;  // increment head index
    1484:	80 91 fb 00 	lds	r24, 0x00FB
    1488:	8f 5f       	subi	r24, 0xFF	; 255
    148a:	80 93 fb 00 	sts	0x00FB, r24
	UCSRB |= (1<<UDRIE);  // Enable UDR empty interrupt, the ISR will move from buffer to UART
    148e:	55 9a       	sbi	0x0a, 5	; 10
}
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	1f 91       	pop	r17
    1496:	08 95       	ret

00001498 <uart_send_string>:

/* UART Send String function */
void uart_send_string(char *pt){
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	ec 01       	movw	r28, r24
	while(*pt){
    149e:	88 81       	ld	r24, Y
    14a0:	88 23       	and	r24, r24
    14a2:	29 f0       	breq	.+10     	; 0x14ae <uart_send_string+0x16>
    14a4:	21 96       	adiw	r28, 0x01	; 1
		uart_send_char(*pt);
    14a6:	da df       	rcall	.-76     	; 0x145c <uart_send_char>
	UCSRB |= (1<<UDRIE);  // Enable UDR empty interrupt, the ISR will move from buffer to UART
}

/* UART Send String function */
void uart_send_string(char *pt){
	while(*pt){
    14a8:	89 91       	ld	r24, Y+
    14aa:	81 11       	cpse	r24, r1
    14ac:	fc cf       	rjmp	.-8      	; 0x14a6 <uart_send_string+0xe>
		uart_send_char(*pt);
		pt++;
	}
}
    14ae:	df 91       	pop	r29
    14b0:	cf 91       	pop	r28
    14b2:	08 95       	ret

000014b4 <uart_send_udec>:

#ifdef USE_UART_DEC_OUTPUT
/* UART Send Unsigned Decimal function */
void uart_send_udec(uint32_t n)
{
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
	// This function uses recursion to convert decimal number
	//   of unspecified length as an ASCII string
	if(n >= 10){
    14bc:	6a 30       	cpi	r22, 0x0A	; 10
    14be:	71 05       	cpc	r23, r1
    14c0:	81 05       	cpc	r24, r1
    14c2:	91 05       	cpc	r25, r1
    14c4:	50 f0       	brcs	.+20     	; 0x14da <uart_send_udec+0x26>
		uart_send_udec(n/10);
    14c6:	2a e0       	ldi	r18, 0x0A	; 10
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	60 d0       	rcall	.+192    	; 0x1590 <__udivmodsi4>
    14d0:	06 2f       	mov	r16, r22
    14d2:	ca 01       	movw	r24, r20
    14d4:	b9 01       	movw	r22, r18
    14d6:	ee df       	rcall	.-36     	; 0x14b4 <uart_send_udec>
		n = n%10;
    14d8:	60 2f       	mov	r22, r16
	}
	uart_send_char(n+'0'); //n is between 0 and 9
    14da:	80 e3       	ldi	r24, 0x30	; 48
    14dc:	86 0f       	add	r24, r22
    14de:	be df       	rcall	.-132    	; 0x145c <uart_send_char>
}
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	1f 91       	pop	r17
    14e6:	0f 91       	pop	r16
    14e8:	08 95       	ret

000014ea <__vector_12>:
/************************************************************************/

// Transmit complete interrupt
// USART transmit Data Register Empty interrupt.
ISR (USART_UDRE_vect)
{
    14ea:	1f 92       	push	r1
    14ec:	0f 92       	push	r0
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	0f 92       	push	r0
    14f2:	11 24       	eor	r1, r1
    14f4:	8f 93       	push	r24
    14f6:	9f 93       	push	r25
    14f8:	ef 93       	push	r30
    14fa:	ff 93       	push	r31
	if(tx_in != tx_out)  // is buffer empty ?
    14fc:	90 91 fb 00 	lds	r25, 0x00FB
    1500:	80 91 fa 00 	lds	r24, 0x00FA
    1504:	98 17       	cp	r25, r24
    1506:	71 f0       	breq	.+28     	; 0x1524 <__vector_12+0x3a>
	{
		UDR = txbuf[tx_out & TXMASK];
    1508:	e0 91 fa 00 	lds	r30, 0x00FA
    150c:	ef 73       	andi	r30, 0x3F	; 63
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	e4 58       	subi	r30, 0x84	; 132
    1512:	fe 4f       	sbci	r31, 0xFE	; 254
    1514:	80 81       	ld	r24, Z
    1516:	8c b9       	out	0x0c, r24	; 12
		tx_out++;  // TMASK makes it unnecessary to range limit this
    1518:	80 91 fa 00 	lds	r24, 0x00FA
    151c:	8f 5f       	subi	r24, 0xFF	; 255
    151e:	80 93 fa 00 	sts	0x00FA, r24
    1522:	01 c0       	rjmp	.+2      	; 0x1526 <__vector_12+0x3c>
	}
	else
	{
		UCSRB &= ~(1 << UDRIE);  // buffer is empty, disable interrupt
    1524:	55 98       	cbi	0x0a, 5	; 10
	}
}
    1526:	ff 91       	pop	r31
    1528:	ef 91       	pop	r30
    152a:	9f 91       	pop	r25
    152c:	8f 91       	pop	r24
    152e:	0f 90       	pop	r0
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	0f 90       	pop	r0
    1534:	1f 90       	pop	r1
    1536:	18 95       	reti

00001538 <__vector_11>:
// Bad:
//    The characters before the CR or LF might all be gone,
//    if the number of received characters is the same as the input buffer.
//
ISR (USART_RXC_vect)
{
    1538:	1f 92       	push	r1
    153a:	0f 92       	push	r0
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	0f 92       	push	r0
    1540:	11 24       	eor	r1, r1
    1542:	8f 93       	push	r24
    1544:	ef 93       	push	r30
    1546:	ff 93       	push	r31
	rxbuf[rx_in & RXMASK] = UDR;  // Put received char in buffer (no check for overflow)
    1548:	e0 91 f9 00 	lds	r30, 0x00F9
    154c:	ef 77       	andi	r30, 0x7F	; 127
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	8c b1       	in	r24, 0x0c	; 12
    1552:	e4 50       	subi	r30, 0x04	; 4
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	80 83       	st	Z, r24
	rx_in++;  // RMASK makes it unnecessary to range limit this
    1558:	80 91 f9 00 	lds	r24, 0x00F9
    155c:	8f 5f       	subi	r24, 0xFF	; 255
    155e:	80 93 f9 00 	sts	0x00F9, r24
    1562:	ff 91       	pop	r31
    1564:	ef 91       	pop	r30
    1566:	8f 91       	pop	r24
    1568:	0f 90       	pop	r0
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	0f 90       	pop	r0
    156e:	1f 90       	pop	r1
    1570:	18 95       	reti

00001572 <__mulsi3>:
    1572:	db 01       	movw	r26, r22
    1574:	8f 93       	push	r24
    1576:	9f 93       	push	r25
    1578:	2d d0       	rcall	.+90     	; 0x15d4 <__muluhisi3>
    157a:	bf 91       	pop	r27
    157c:	af 91       	pop	r26
    157e:	a2 9f       	mul	r26, r18
    1580:	80 0d       	add	r24, r0
    1582:	91 1d       	adc	r25, r1
    1584:	a3 9f       	mul	r26, r19
    1586:	90 0d       	add	r25, r0
    1588:	b2 9f       	mul	r27, r18
    158a:	90 0d       	add	r25, r0
    158c:	11 24       	eor	r1, r1
    158e:	08 95       	ret

00001590 <__udivmodsi4>:
    1590:	a1 e2       	ldi	r26, 0x21	; 33
    1592:	1a 2e       	mov	r1, r26
    1594:	aa 1b       	sub	r26, r26
    1596:	bb 1b       	sub	r27, r27
    1598:	fd 01       	movw	r30, r26
    159a:	0d c0       	rjmp	.+26     	; 0x15b6 <__udivmodsi4_ep>

0000159c <__udivmodsi4_loop>:
    159c:	aa 1f       	adc	r26, r26
    159e:	bb 1f       	adc	r27, r27
    15a0:	ee 1f       	adc	r30, r30
    15a2:	ff 1f       	adc	r31, r31
    15a4:	a2 17       	cp	r26, r18
    15a6:	b3 07       	cpc	r27, r19
    15a8:	e4 07       	cpc	r30, r20
    15aa:	f5 07       	cpc	r31, r21
    15ac:	20 f0       	brcs	.+8      	; 0x15b6 <__udivmodsi4_ep>
    15ae:	a2 1b       	sub	r26, r18
    15b0:	b3 0b       	sbc	r27, r19
    15b2:	e4 0b       	sbc	r30, r20
    15b4:	f5 0b       	sbc	r31, r21

000015b6 <__udivmodsi4_ep>:
    15b6:	66 1f       	adc	r22, r22
    15b8:	77 1f       	adc	r23, r23
    15ba:	88 1f       	adc	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	1a 94       	dec	r1
    15c0:	69 f7       	brne	.-38     	; 0x159c <__udivmodsi4_loop>
    15c2:	60 95       	com	r22
    15c4:	70 95       	com	r23
    15c6:	80 95       	com	r24
    15c8:	90 95       	com	r25
    15ca:	9b 01       	movw	r18, r22
    15cc:	ac 01       	movw	r20, r24
    15ce:	bd 01       	movw	r22, r26
    15d0:	cf 01       	movw	r24, r30
    15d2:	08 95       	ret

000015d4 <__muluhisi3>:
    15d4:	0f d0       	rcall	.+30     	; 0x15f4 <__umulhisi3>
    15d6:	a5 9f       	mul	r26, r21
    15d8:	90 0d       	add	r25, r0
    15da:	b4 9f       	mul	r27, r20
    15dc:	90 0d       	add	r25, r0
    15de:	a4 9f       	mul	r26, r20
    15e0:	80 0d       	add	r24, r0
    15e2:	91 1d       	adc	r25, r1
    15e4:	11 24       	eor	r1, r1
    15e6:	08 95       	ret

000015e8 <__mulshisi3>:
    15e8:	b7 ff       	sbrs	r27, 7
    15ea:	f4 cf       	rjmp	.-24     	; 0x15d4 <__muluhisi3>

000015ec <__mulohisi3>:
    15ec:	f3 df       	rcall	.-26     	; 0x15d4 <__muluhisi3>
    15ee:	82 1b       	sub	r24, r18
    15f0:	93 0b       	sbc	r25, r19
    15f2:	08 95       	ret

000015f4 <__umulhisi3>:
    15f4:	a2 9f       	mul	r26, r18
    15f6:	b0 01       	movw	r22, r0
    15f8:	b3 9f       	mul	r27, r19
    15fa:	c0 01       	movw	r24, r0
    15fc:	a3 9f       	mul	r26, r19
    15fe:	01 d0       	rcall	.+2      	; 0x1602 <__umulhisi3+0xe>
    1600:	b2 9f       	mul	r27, r18
    1602:	70 0d       	add	r23, r0
    1604:	81 1d       	adc	r24, r1
    1606:	11 24       	eor	r1, r1
    1608:	91 1d       	adc	r25, r1
    160a:	08 95       	ret

0000160c <_exit>:
    160c:	f8 94       	cli

0000160e <__stop_program>:
    160e:	ff cf       	rjmp	.-2      	; 0x160e <__stop_program>
