
RWS1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000c3  00800060  00800060  0000014e  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000098  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000045e  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001cf  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001f9  00000000  00000000  00000843  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001b4  00000000  00000000  00000a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000243  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000459  00000000  00000000  00000e33  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  0000128c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	42 c0       	rjmp	.+132    	; 0x9c <__vector_11>
  18:	1a c0       	rjmp	.+52     	; 0x4e <__vector_12>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	21 e0       	ldi	r18, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a3 32       	cpi	r26, 0x23	; 35
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	48 c0       	rjmp	.+144    	; 0xd6 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "configuration.h"
#include "spi_handler.h"
#include "uart_handler.h"

  48:	f8 94       	cli
#include <util/delay.h>

#define INIT_STATUS_LED		(STATUS_LED_DDR |= (1 << STATUS_LED_PIN))
  4a:	78 94       	sei
  4c:	ff cf       	rjmp	.-2      	; 0x4c <main+0x4>

0000004e <__vector_12>:
				eol = true;  // end this line
			}
			else if (buffer[i] == '\n')  // check for LF
			{
				if (cr_flag) {  // Previous character was CR, ignore the LF, don't advance index.
					cr_flag = false;
  4e:	1f 92       	push	r1
  50:	0f 92       	push	r0
  52:	0f b6       	in	r0, 0x3f	; 63
					eol = true;
				}
			}
			else
			{
				cr_flag = false;  // normal character, clear flag
  54:	0f 92       	push	r0
  56:	11 24       	eor	r1, r1
				if (i < (bufsize - 1)) { // is there still a place for the next character ?
  58:	8f 93       	push	r24
  5a:	9f 93       	push	r25
  5c:	ef 93       	push	r30
					i++;  // advance to next position.
  5e:	ff 93       	push	r31
  60:	90 91 62 00 	lds	r25, 0x0062
		buffer[i] = '\0';  // End the string with '\0'
	}
	// Return the length of the string.
	// It could be a truncated string if too many characters were received.
	// It should be the same as strlen(buffer)
	return (i);
  64:	80 91 61 00 	lds	r24, 0x0061
  68:	98 17       	cp	r25, r24
  6a:	71 f0       	breq	.+28     	; 0x88 <__vector_12+0x3a>
					i++;  // advance to next position.
				}
			}
		}
		// The CR ('\r') or LF ('\n') is overwritten by the string terminator.
		buffer[i] = '\0';  // End the string with '\0'
  6c:	e0 91 61 00 	lds	r30, 0x0061
  70:	ef 73       	andi	r30, 0x3F	; 63
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	ed 51       	subi	r30, 0x1D	; 29
	}
	// Return the length of the string.
	// It could be a truncated string if too many characters were received.
	// It should be the same as strlen(buffer)
	return (i);
}
  76:	ff 4f       	sbci	r31, 0xFF	; 255
  78:	80 81       	ld	r24, Z
  7a:	8c b9       	out	0x0c, r24	; 12
  7c:	80 91 61 00 	lds	r24, 0x0061
  80:	8f 5f       	subi	r24, 0xFF	; 255
  82:	80 93 61 00 	sts	0x0061, r24
  86:	01 c0       	rjmp	.+2      	; 0x8a <__vector_12+0x3c>
  88:	55 98       	cbi	0x0a, 5	; 10
	}
	else
	{
		UCSRB &= ~(1 << UDRIE);  // buffer is empty, disable interrupt
	}
}
  8a:	ff 91       	pop	r31
  8c:	ef 91       	pop	r30
  8e:	9f 91       	pop	r25
  90:	8f 91       	pop	r24
  92:	0f 90       	pop	r0
  94:	0f be       	out	0x3f, r0	; 63
  96:	0f 90       	pop	r0
  98:	1f 90       	pop	r1
  9a:	18 95       	reti

0000009c <__vector_11>:
// Bad:
//    The characters before the CR or LF might all be gone,
//    if the number of received characters is the same as the input buffer.
//
ISR (USART_RXC_vect)
{
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	8f 93       	push	r24
  a8:	ef 93       	push	r30
  aa:	ff 93       	push	r31
	rxbuf[rx_in & RXMASK] = UDR;  // Put received char in buffer (no check for overflow)
  ac:	e0 91 60 00 	lds	r30, 0x0060
  b0:	ef 77       	andi	r30, 0x7F	; 127
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	8c b1       	in	r24, 0x0c	; 12
  b6:	ed 59       	subi	r30, 0x9D	; 157
  b8:	ff 4f       	sbci	r31, 0xFF	; 255
  ba:	80 83       	st	Z, r24
	rx_in++;  // RMASK makes it unnecessary to range limit this
  bc:	80 91 60 00 	lds	r24, 0x0060
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	80 93 60 00 	sts	0x0060, r24
  c6:	ff 91       	pop	r31
  c8:	ef 91       	pop	r30
  ca:	8f 91       	pop	r24
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
