
RWS1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000021c  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c5  00800074  00800074  000002c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076f  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000368  00000000  00000000  00000b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042d  00000000  00000000  00000e93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f8  00000000  00000000  000012c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002cb  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000459  00000000  00000000  00001783  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	e3 c0       	rjmp	.+454    	; 0x1de <__vector_11>
  18:	bb c0       	rjmp	.+374    	; 0x190 <__vector_12>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e1       	ldi	r30, 0x1C	; 28
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a4 e7       	ldi	r26, 0x74	; 116
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a9 33       	cpi	r26, 0x39	; 57
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	de c0       	rjmp	.+444    	; 0x218 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
#define CLEAR_PORT(x,y)	(x) &= ~(1<<(y))

int main(void)
{
	static uint8_t spi_response = 0;
	INIT_STATUS_LED;
  5e:	8c 9a       	sbi	0x11, 4	; 17
	
	INIT_PORT(CS_BME280_DDR,CS_BME280_PIN);
  60:	b8 9a       	sbi	0x17, 0	; 23
	CLEAR_PORT(CS_BME280_PORT,CS_BME280_PIN);
  62:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  64:	2f e7       	ldi	r18, 0x7F	; 127
  66:	88 e3       	ldi	r24, 0x38	; 56
  68:	91 e0       	ldi	r25, 0x01	; 1
  6a:	21 50       	subi	r18, 0x01	; 1
  6c:	80 40       	sbci	r24, 0x00	; 0
  6e:	90 40       	sbci	r25, 0x00	; 0
  70:	e1 f7       	brne	.-8      	; 0x6a <main+0xc>
  72:	00 c0       	rjmp	.+0      	; 0x74 <main+0x16>
  74:	00 00       	nop
	_delay_ms(100);
	SET_PORT(CS_BME280_PORT,CS_BME280_PIN);
  76:	c0 9a       	sbi	0x18, 0	; 24
	
	cli();  //Disable interrupts
  78:	f8 94       	cli
	uart_init(MYUBRR);
  7a:	6c e0       	ldi	r22, 0x0C	; 12
  7c:	70 e0       	ldi	r23, 0x00	; 0
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	38 d0       	rcall	.+112    	; 0xf4 <uart_init>
	spi_init();
  84:	29 d0       	rcall	.+82     	; 0xd8 <spi_init>
	sei();  // enable global interrupts
  86:	78 94       	sei
	
	
	uart_send_string("Drivers initialized");
  88:	80 e6       	ldi	r24, 0x60	; 96
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	73 d0       	rcall	.+230    	; 0x174 <uart_send_string>
	uart_newline();
  8e:	8d e0       	ldi	r24, 0x0D	; 13
  90:	53 d0       	rcall	.+166    	; 0x138 <uart_send_char>
  92:	8a e0       	ldi	r24, 0x0A	; 10
  94:	51 d0       	rcall	.+162    	; 0x138 <uart_send_char>
    while(1)
    {
		uart_send_char(0x30);
		uart_newline();
		TOGGLE_STATUS_LED;
  96:	c0 e1       	ldi	r28, 0x10	; 16
	
	uart_send_string("Drivers initialized");
	uart_newline();
    while(1)
    {
		uart_send_char(0x30);
  98:	80 e3       	ldi	r24, 0x30	; 48
  9a:	4e d0       	rcall	.+156    	; 0x138 <uart_send_char>
		uart_newline();
  9c:	8d e0       	ldi	r24, 0x0D	; 13
  9e:	4c d0       	rcall	.+152    	; 0x138 <uart_send_char>
  a0:	8a e0       	ldi	r24, 0x0A	; 10
  a2:	4a d0       	rcall	.+148    	; 0x138 <uart_send_char>
		TOGGLE_STATUS_LED;
  a4:	82 b3       	in	r24, 0x12	; 18
  a6:	8c 27       	eor	r24, r28
  a8:	82 bb       	out	0x12, r24	; 18
		spi_send_char(0x33);
		spi_send_char(0x55);
		spi_send_char(0xff);
		*/

		CLEAR_PORT(CS_BME280_PORT,CS_BME280_PIN);
  aa:	c0 98       	cbi	0x18, 0	; 24
/*
		uart_send_char(spi_send_char(0xFD));
		uart_send_char(spi_send_char(0xFE));
		uart_send_char(spi_send_char(0x00));*/
		uart_send_char(spi_send_char(0xD0));
  ac:	80 ed       	ldi	r24, 0xD0	; 208
  ae:	1e d0       	rcall	.+60     	; 0xec <spi_send_char>
  b0:	43 d0       	rcall	.+134    	; 0x138 <uart_send_char>
		SET_PORT(CS_BME280_PORT,CS_BME280_PIN);
  b2:	c0 9a       	sbi	0x18, 0	; 24
		
		uart_newline();
  b4:	8d e0       	ldi	r24, 0x0D	; 13
  b6:	40 d0       	rcall	.+128    	; 0x138 <uart_send_char>
  b8:	8a e0       	ldi	r24, 0x0A	; 10
  ba:	3e d0       	rcall	.+124    	; 0x138 <uart_send_char>
		SET_PORT(CS_BME280_PORT,CS_BME280_PIN);
*/

		
		//uart_send_char(spi_response);
		uart_newline();
  bc:	8d e0       	ldi	r24, 0x0D	; 13
  be:	3c d0       	rcall	.+120    	; 0x138 <uart_send_char>
  c0:	8a e0       	ldi	r24, 0x0A	; 10
  c2:	3a d0       	rcall	.+116    	; 0x138 <uart_send_char>
  c4:	2f e7       	ldi	r18, 0x7F	; 127
  c6:	8a e1       	ldi	r24, 0x1A	; 26
  c8:	96 e0       	ldi	r25, 0x06	; 6
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x6c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x76>
  d4:	00 00       	nop
  d6:	e0 cf       	rjmp	.-64     	; 0x98 <main+0x3a>

000000d8 <spi_init>:
/*                 Initialization Function definitions                  */
/************************************************************************/

/* SPI Initialization function*/
void spi_init(void)
{
  d8:	88 b3       	in	r24, 0x18	; 24
  da:	8c 62       	ori	r24, 0x2C	; 44
  dc:	88 bb       	out	0x18, r24	; 24
	//For operating in master mode, MOSI, SS, SCK pins must be set as output
  de:	1d b8       	out	0x0d, r1	; 13
	SPI_DDR |= (1<<SPI_MOSI_PIN)|(1<<SPI_SS_PIN)|(1<<SPI_SCK_PIN);
  e0:	1e b8       	out	0x0e, r1	; 14
	SPCR = 0;
  e2:	70 9a       	sbi	0x0e, 0	; 14
	SPSR = 0;
  e4:	8d b1       	in	r24, 0x0d	; 13
  e6:	83 65       	ori	r24, 0x53	; 83
  e8:	8d b9       	out	0x0d, r24	; 13
  ea:	08 95       	ret

000000ec <spi_send_char>:
	#if SPI_USE_INT
		SPCR |= (1<<SPIE)|(1<<SPE)|(1<<MSTR)/*|(1<<CPOL)|(1<<CPHA)*/|(1<<SPR0)|(1<<SPR1);
	#else
		SPCR |= (1<<SPE)|(1<<MSTR)/*|(1<<CPOL)|(1<<CPHA)*/|(1<<SPR0)|(1<<SPR1);
	#endif  //SPI_USE_INT
/*
  ec:	8f b9       	out	0x0f, r24	; 15
SPI2	SPR1	SPR0	SCK Frequency
  ee:	77 9b       	sbis	0x0e, 7	; 14
  f0:	fe cf       	rjmp	.-4      	; 0xee <spi_send_char+0x2>
0		0		0		fosc/4
  f2:	08 95       	ret

000000f4 <uart_init>:
/*                 Initialization Function definitions                  */
/************************************************************************/

/* UART Initialization function*/
void uart_init(uint32_t ubrr)
{
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
	UCSRA = 0x00; // turn everything off
  f8:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0x00;
  fa:	1a b8       	out	0x0a, r1	; 10
	UCSRC = 0x00;
  fc:	10 bc       	out	0x20, r1	; 32
	UBRRH = (uint8_t)(ubrr>>8);//Set baud rate
  fe:	07 2f       	mov	r16, r23
 100:	18 2f       	mov	r17, r24
 102:	29 2f       	mov	r18, r25
 104:	33 27       	eor	r19, r19
 106:	00 bd       	out	0x20, r16	; 32
	UBRRL = (uint8_t)ubrr;
 108:	69 b9       	out	0x09, r22	; 9
	#if SET_U2X
	UCSRA = (1<<U2X);
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	8b b9       	out	0x0b, r24	; 11
	#endif
	//Receive and transmit enabled, receive complete interrupt enabled (USART_RXC)
	UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
 10e:	88 e9       	ldi	r24, 0x98	; 152
 110:	8a b9       	out	0x0a, r24	; 10
	// Set the most used serial settings: asynchrone, no parity, 8 bit, 1 stop bit.
	// The ATmega8 uses an URSEL bit, which is not present on newer chips.
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
	#endif
	
	cr_flag = false;  // set default, no 'cr' detected yet.
 112:	10 92 74 00 	sts	0x0074, r1
	tx_in = tx_out = rx_in = rx_out = 0;  // set all buffer indices to zero.
 116:	10 92 75 00 	sts	0x0075, r1
 11a:	10 92 76 00 	sts	0x0076, r1
 11e:	10 92 77 00 	sts	0x0077, r1
 122:	10 92 78 00 	sts	0x0078, r1
}
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	08 95       	ret

0000012c <uart_tx_buflen>:

// Number of bytes as yet untransmitted
// Don't call this from an ISR
uint8_t uart_tx_buflen (void)
{
	return(tx_in - tx_out);
 12c:	80 91 78 00 	lds	r24, 0x0078
 130:	90 91 77 00 	lds	r25, 0x0077
}
 134:	89 1b       	sub	r24, r25
 136:	08 95       	ret

00000138 <uart_send_char>:
/*                      Output Function definitions                     */
/************************************************************************/

/* UART Send 1 Byte function */
void uart_send_char(char data)
{
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	18 2f       	mov	r17, r24
	// If the character does not fit in buffer, it will still be transmitted, but it waits
	// until characters are transmitted and free space is available in the buffer.
	// If the transmit-buffer is full, wait for it, interrupts will empty it
	// There is no timeout.
	while((TX_BUFFER_SIZE - uart_tx_buflen()) <= 2) {}
 140:	c0 e4       	ldi	r28, 0x40	; 64
 142:	d0 e0       	ldi	r29, 0x00	; 0
 144:	f3 df       	rcall	.-26     	; 0x12c <uart_tx_buflen>
 146:	9e 01       	movw	r18, r28
 148:	28 1b       	sub	r18, r24
 14a:	31 09       	sbc	r19, r1
 14c:	23 30       	cpi	r18, 0x03	; 3
 14e:	31 05       	cpc	r19, r1
 150:	cc f3       	brlt	.-14     	; 0x144 <uart_send_char+0xc>
	// Add data to the transmit buffer, enable transmit interrupts
	txbuf[tx_in & TXMASK] = data;  // set character in circular buffer
 152:	e0 91 78 00 	lds	r30, 0x0078
 156:	ef 73       	andi	r30, 0x3F	; 63
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	e7 50       	subi	r30, 0x07	; 7
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	10 83       	st	Z, r17
	tx_in++;  // increment head index
 160:	80 91 78 00 	lds	r24, 0x0078
 164:	8f 5f       	subi	r24, 0xFF	; 255
 166:	80 93 78 00 	sts	0x0078, r24
	UCSRB |= (1<<UDRIE);  // Enable UDR empty interrupt, the ISR will move from buffer to UART
 16a:	55 9a       	sbi	0x0a, 5	; 10
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	08 95       	ret

00000174 <uart_send_string>:

/* UART Send String function */
void uart_send_string(char *pt){
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	ec 01       	movw	r28, r24
	while(*pt){
 17a:	88 81       	ld	r24, Y
 17c:	88 23       	and	r24, r24
 17e:	29 f0       	breq	.+10     	; 0x18a <uart_send_string+0x16>
 180:	21 96       	adiw	r28, 0x01	; 1
		uart_send_char(*pt);
 182:	da df       	rcall	.-76     	; 0x138 <uart_send_char>
	UCSRB |= (1<<UDRIE);  // Enable UDR empty interrupt, the ISR will move from buffer to UART
}

/* UART Send String function */
void uart_send_string(char *pt){
	while(*pt){
 184:	89 91       	ld	r24, Y+
 186:	81 11       	cpse	r24, r1
 188:	fc cf       	rjmp	.-8      	; 0x182 <uart_send_string+0xe>
		uart_send_char(*pt);
		pt++;
	}
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <__vector_12>:
/************************************************************************/

// Transmit complete interrupt
// USART transmit Data Register Empty interrupt.
ISR (USART_UDRE_vect)
{
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
	if(tx_in != tx_out)  // is buffer empty ?
 1a2:	90 91 78 00 	lds	r25, 0x0078
 1a6:	80 91 77 00 	lds	r24, 0x0077
 1aa:	98 17       	cp	r25, r24
 1ac:	71 f0       	breq	.+28     	; 0x1ca <__vector_12+0x3a>
	{
		UDR = txbuf[tx_out & TXMASK];
 1ae:	e0 91 77 00 	lds	r30, 0x0077
 1b2:	ef 73       	andi	r30, 0x3F	; 63
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	e7 50       	subi	r30, 0x07	; 7
 1b8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ba:	80 81       	ld	r24, Z
 1bc:	8c b9       	out	0x0c, r24	; 12
		tx_out++;  // TMASK makes it unnecessary to range limit this
 1be:	80 91 77 00 	lds	r24, 0x0077
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	80 93 77 00 	sts	0x0077, r24
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <__vector_12+0x3c>
	}
	else
	{
		UCSRB &= ~(1 << UDRIE);  // buffer is empty, disable interrupt
 1ca:	55 98       	cbi	0x0a, 5	; 10
	}
}
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <__vector_11>:
// Bad:
//    The characters before the CR or LF might all be gone,
//    if the number of received characters is the same as the input buffer.
//
ISR (USART_RXC_vect)
{
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	8f 93       	push	r24
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
	rxbuf[rx_in & RXMASK] = UDR;  // Put received char in buffer (no check for overflow)
 1ee:	e0 91 76 00 	lds	r30, 0x0076
 1f2:	ef 77       	andi	r30, 0x7F	; 127
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	8c b1       	in	r24, 0x0c	; 12
 1f8:	e7 58       	subi	r30, 0x87	; 135
 1fa:	ff 4f       	sbci	r31, 0xFF	; 255
 1fc:	80 83       	st	Z, r24
	rx_in++;  // RMASK makes it unnecessary to range limit this
 1fe:	80 91 76 00 	lds	r24, 0x0076
 202:	8f 5f       	subi	r24, 0xFF	; 255
 204:	80 93 76 00 	sts	0x0076, r24
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	8f 91       	pop	r24
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
