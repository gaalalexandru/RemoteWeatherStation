
RWS1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000fd  00800060  00800060  0000156c  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000190  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000261d  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000074f  00000000  00000000  00003d49  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000865  00000000  00000000  00004498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000005a8  00000000  00000000  00004d00  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000008d2  00000000  00000000  000052a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000025ee  00000000  00000000  00005b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000140  00000000  00000000  00008168  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
       4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
       6:	7e c9       	rjmp	.-3332   	; 0xfffff304 <__eeprom_end+0xff7ef304>
       8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
       a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
       c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
       e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
      10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
      12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
      14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
      16:	04 ca       	rjmp	.-3064   	; 0xfffff420 <__eeprom_end+0xff7ef420>
      18:	dc c9       	rjmp	.-3144   	; 0xfffff3d2 <__eeprom_end+0xff7ef3d2>
      1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
      1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
      1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
      20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
      22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
      24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
      32:	21 e0       	ldi	r18, 0x01	; 1
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
      3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
      3c:	ad 35       	cpi	r26, 0x5D	; 93
      3e:	b2 07       	cpc	r27, r18
      40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
      42:	c6 d8       	rcall	.-3700   	; 0xfffff1d0 <__eeprom_end+0xff7ef1d0>
      44:	57 ca       	rjmp	.-2898   	; 0xfffff4f4 <__eeprom_end+0xff7ef4f4>

00000046 <__bad_interrupt>:
      46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <null_ptr_check>:
      48:	fc 01       	movw	r30, r24
      4a:	00 97       	sbiw	r24, 0x00	; 0
      4c:	81 f0       	breq	.+32     	; 0x6e <null_ptr_check+0x26>
      4e:	83 81       	ldd	r24, Z+3	; 0x03
      50:	94 81       	ldd	r25, Z+4	; 0x04
      52:	89 2b       	or	r24, r25
      54:	71 f0       	breq	.+28     	; 0x72 <null_ptr_check+0x2a>
      56:	85 81       	ldd	r24, Z+5	; 0x05
      58:	96 81       	ldd	r25, Z+6	; 0x06
      5a:	89 2b       	or	r24, r25
      5c:	61 f0       	breq	.+24     	; 0x76 <null_ptr_check+0x2e>
      5e:	81 e0       	ldi	r24, 0x01	; 1
      60:	27 81       	ldd	r18, Z+7	; 0x07
      62:	30 85       	ldd	r19, Z+8	; 0x08
      64:	23 2b       	or	r18, r19
      66:	09 f0       	breq	.+2      	; 0x6a <null_ptr_check+0x22>
      68:	80 e0       	ldi	r24, 0x00	; 0
      6a:	81 95       	neg	r24
      6c:	08 95       	ret
      6e:	8f ef       	ldi	r24, 0xFF	; 255
      70:	08 95       	ret
      72:	8f ef       	ldi	r24, 0xFF	; 255
      74:	08 95       	ret
      76:	8f ef       	ldi	r24, 0xFF	; 255
      78:	08 95       	ret

0000007a <bme280_get_regs>:
      7a:	df 92       	push	r13
      7c:	ef 92       	push	r14
      7e:	ff 92       	push	r15
      80:	0f 93       	push	r16
      82:	1f 93       	push	r17
      84:	cf 93       	push	r28
      86:	df 93       	push	r29
      88:	d8 2e       	mov	r13, r24
      8a:	8b 01       	movw	r16, r22
      8c:	7a 01       	movw	r14, r20
      8e:	e9 01       	movw	r28, r18
      90:	c9 01       	movw	r24, r18
      92:	da df       	rcall	.-76     	; 0x48 <null_ptr_check>
      94:	81 11       	cpse	r24, r1
      96:	0f c0       	rjmp	.+30     	; 0xb6 <bme280_get_regs+0x3c>
      98:	8a 81       	ldd	r24, Y+2	; 0x02
      9a:	81 30       	cpi	r24, 0x01	; 1
      9c:	19 f0       	breq	.+6      	; 0xa4 <bme280_get_regs+0x2a>
      9e:	8d 2d       	mov	r24, r13
      a0:	80 68       	ori	r24, 0x80	; 128
      a2:	d8 2e       	mov	r13, r24
      a4:	eb 81       	ldd	r30, Y+3	; 0x03
      a6:	fc 81       	ldd	r31, Y+4	; 0x04
      a8:	97 01       	movw	r18, r14
      aa:	a8 01       	movw	r20, r16
      ac:	6d 2d       	mov	r22, r13
      ae:	89 81       	ldd	r24, Y+1	; 0x01
      b0:	09 95       	icall
      b2:	81 11       	cpse	r24, r1
      b4:	8c ef       	ldi	r24, 0xFC	; 252
      b6:	df 91       	pop	r29
      b8:	cf 91       	pop	r28
      ba:	1f 91       	pop	r17
      bc:	0f 91       	pop	r16
      be:	ff 90       	pop	r15
      c0:	ef 90       	pop	r14
      c2:	df 90       	pop	r13
      c4:	08 95       	ret

000000c6 <bme280_set_regs>:
      c6:	8f 92       	push	r8
      c8:	9f 92       	push	r9
      ca:	af 92       	push	r10
      cc:	bf 92       	push	r11
      ce:	df 92       	push	r13
      d0:	ef 92       	push	r14
      d2:	ff 92       	push	r15
      d4:	0f 93       	push	r16
      d6:	1f 93       	push	r17
      d8:	cf 93       	push	r28
      da:	df 93       	push	r29
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
      e0:	64 97       	sbiw	r28, 0x14	; 20
      e2:	0f b6       	in	r0, 0x3f	; 63
      e4:	f8 94       	cli
      e6:	de bf       	out	0x3e, r29	; 62
      e8:	0f be       	out	0x3f, r0	; 63
      ea:	cd bf       	out	0x3d, r28	; 61
      ec:	8c 01       	movw	r16, r24
      ee:	5b 01       	movw	r10, r22
      f0:	79 01       	movw	r14, r18
      f2:	d4 2e       	mov	r13, r20
      f4:	8a e0       	ldi	r24, 0x0A	; 10
      f6:	84 17       	cp	r24, r20
      f8:	20 f4       	brcc	.+8      	; 0x102 <bme280_set_regs+0x3c>
      fa:	0f 2e       	mov	r0, r31
      fc:	fa e0       	ldi	r31, 0x0A	; 10
      fe:	df 2e       	mov	r13, r31
     100:	f0 2d       	mov	r31, r0
     102:	c7 01       	movw	r24, r14
     104:	a1 df       	rcall	.-190    	; 0x48 <null_ptr_check>
     106:	81 11       	cpse	r24, r1
     108:	58 c0       	rjmp	.+176    	; 0x1ba <bme280_set_regs+0xf4>
     10a:	01 15       	cp	r16, r1
     10c:	11 05       	cpc	r17, r1
     10e:	09 f4       	brne	.+2      	; 0x112 <bme280_set_regs+0x4c>
     110:	56 c0       	rjmp	.+172    	; 0x1be <bme280_set_regs+0xf8>
     112:	a1 14       	cp	r10, r1
     114:	b1 04       	cpc	r11, r1
     116:	09 f4       	brne	.+2      	; 0x11a <bme280_set_regs+0x54>
     118:	54 c0       	rjmp	.+168    	; 0x1c2 <bme280_set_regs+0xfc>
     11a:	dd 20       	and	r13, r13
     11c:	09 f4       	brne	.+2      	; 0x120 <bme280_set_regs+0x5a>
     11e:	53 c0       	rjmp	.+166    	; 0x1c6 <bme280_set_regs+0x100>
     120:	d5 01       	movw	r26, r10
     122:	8c 91       	ld	r24, X
     124:	89 83       	std	Y+1, r24	; 0x01
     126:	f7 01       	movw	r30, r14
     128:	82 81       	ldd	r24, Z+2	; 0x02
     12a:	81 30       	cpi	r24, 0x01	; 1
     12c:	51 f0       	breq	.+20     	; 0x142 <bme280_set_regs+0x7c>
     12e:	90 2f       	mov	r25, r16
     130:	e0 2f       	mov	r30, r16
     132:	f1 2f       	mov	r31, r17
     134:	80 81       	ld	r24, Z
     136:	8f 77       	andi	r24, 0x7F	; 127
     138:	81 93       	st	Z+, r24
     13a:	8e 2f       	mov	r24, r30
     13c:	89 1b       	sub	r24, r25
     13e:	8d 15       	cp	r24, r13
     140:	c8 f3       	brcs	.-14     	; 0x134 <bme280_set_regs+0x6e>
     142:	f1 e0       	ldi	r31, 0x01	; 1
     144:	fd 15       	cp	r31, r13
     146:	30 f5       	brcc	.+76     	; 0x194 <bme280_set_regs+0xce>
     148:	48 01       	movw	r8, r16
     14a:	8f ef       	ldi	r24, 0xFF	; 255
     14c:	88 1a       	sub	r8, r24
     14e:	98 0a       	sbc	r9, r24
     150:	b5 01       	movw	r22, r10
     152:	6f 5f       	subi	r22, 0xFF	; 255
     154:	7f 4f       	sbci	r23, 0xFF	; 255
     156:	fe 01       	movw	r30, r28
     158:	33 96       	adiw	r30, 0x03	; 3
     15a:	8e ef       	ldi	r24, 0xFE	; 254
     15c:	8d 0d       	add	r24, r13
     15e:	98 01       	movw	r18, r16
     160:	2e 5f       	subi	r18, 0xFE	; 254
     162:	3f 4f       	sbci	r19, 0xFF	; 255
     164:	28 0f       	add	r18, r24
     166:	31 1d       	adc	r19, r1
     168:	d4 01       	movw	r26, r8
     16a:	4d 91       	ld	r20, X+
     16c:	4d 01       	movw	r8, r26
     16e:	cf 01       	movw	r24, r30
     170:	01 97       	sbiw	r24, 0x01	; 1
     172:	dc 01       	movw	r26, r24
     174:	4c 93       	st	X, r20
     176:	db 01       	movw	r26, r22
     178:	8d 91       	ld	r24, X+
     17a:	bd 01       	movw	r22, r26
     17c:	80 83       	st	Z, r24
     17e:	32 96       	adiw	r30, 0x02	; 2
     180:	82 16       	cp	r8, r18
     182:	93 06       	cpc	r9, r19
     184:	89 f7       	brne	.-30     	; 0x168 <bme280_set_regs+0xa2>
     186:	2d 2d       	mov	r18, r13
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	22 0f       	add	r18, r18
     18c:	33 1f       	adc	r19, r19
     18e:	21 50       	subi	r18, 0x01	; 1
     190:	31 09       	sbc	r19, r1
     192:	02 c0       	rjmp	.+4      	; 0x198 <bme280_set_regs+0xd2>
     194:	2d 2d       	mov	r18, r13
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	d7 01       	movw	r26, r14
     19a:	15 96       	adiw	r26, 0x05	; 5
     19c:	ed 91       	ld	r30, X+
     19e:	fc 91       	ld	r31, X
     1a0:	16 97       	sbiw	r26, 0x06	; 6
     1a2:	ae 01       	movw	r20, r28
     1a4:	4f 5f       	subi	r20, 0xFF	; 255
     1a6:	5f 4f       	sbci	r21, 0xFF	; 255
     1a8:	d8 01       	movw	r26, r16
     1aa:	6c 91       	ld	r22, X
     1ac:	d7 01       	movw	r26, r14
     1ae:	11 96       	adiw	r26, 0x01	; 1
     1b0:	8c 91       	ld	r24, X
     1b2:	09 95       	icall
     1b4:	88 23       	and	r24, r24
     1b6:	51 f0       	breq	.+20     	; 0x1cc <bme280_set_regs+0x106>
     1b8:	08 c0       	rjmp	.+16     	; 0x1ca <bme280_set_regs+0x104>
     1ba:	8f ef       	ldi	r24, 0xFF	; 255
     1bc:	07 c0       	rjmp	.+14     	; 0x1cc <bme280_set_regs+0x106>
     1be:	8f ef       	ldi	r24, 0xFF	; 255
     1c0:	05 c0       	rjmp	.+10     	; 0x1cc <bme280_set_regs+0x106>
     1c2:	8f ef       	ldi	r24, 0xFF	; 255
     1c4:	03 c0       	rjmp	.+6      	; 0x1cc <bme280_set_regs+0x106>
     1c6:	8d ef       	ldi	r24, 0xFD	; 253
     1c8:	01 c0       	rjmp	.+2      	; 0x1cc <bme280_set_regs+0x106>
     1ca:	8c ef       	ldi	r24, 0xFC	; 252
     1cc:	64 96       	adiw	r28, 0x14	; 20
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	f8 94       	cli
     1d2:	de bf       	out	0x3e, r29	; 62
     1d4:	0f be       	out	0x3f, r0	; 63
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	1f 91       	pop	r17
     1de:	0f 91       	pop	r16
     1e0:	ff 90       	pop	r15
     1e2:	ef 90       	pop	r14
     1e4:	df 90       	pop	r13
     1e6:	bf 90       	pop	r11
     1e8:	af 90       	pop	r10
     1ea:	9f 90       	pop	r9
     1ec:	8f 90       	pop	r8
     1ee:	08 95       	ret

000001f0 <set_osr_settings>:
     1f0:	df 92       	push	r13
     1f2:	ef 92       	push	r14
     1f4:	ff 92       	push	r15
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	00 d0       	rcall	.+0      	; 0x200 <set_osr_settings+0x10>
     200:	1f 92       	push	r1
     202:	cd b7       	in	r28, 0x3d	; 61
     204:	de b7       	in	r29, 0x3e	; 62
     206:	d8 2e       	mov	r13, r24
     208:	7b 01       	movw	r14, r22
     20a:	8a 01       	movw	r16, r20
     20c:	82 ff       	sbrs	r24, 2
     20e:	24 c0       	rjmp	.+72     	; 0x258 <set_osr_settings+0x68>
     210:	82 ef       	ldi	r24, 0xF2	; 242
     212:	89 83       	std	Y+1, r24	; 0x01
     214:	fb 01       	movw	r30, r22
     216:	82 81       	ldd	r24, Z+2	; 0x02
     218:	87 70       	andi	r24, 0x07	; 7
     21a:	8b 83       	std	Y+3, r24	; 0x03
     21c:	9a 01       	movw	r18, r20
     21e:	41 e0       	ldi	r20, 0x01	; 1
     220:	be 01       	movw	r22, r28
     222:	6d 5f       	subi	r22, 0xFD	; 253
     224:	7f 4f       	sbci	r23, 0xFF	; 255
     226:	ce 01       	movw	r24, r28
     228:	01 96       	adiw	r24, 0x01	; 1
     22a:	4d df       	rcall	.-358    	; 0xc6 <bme280_set_regs>
     22c:	81 11       	cpse	r24, r1
     22e:	15 c0       	rjmp	.+42     	; 0x25a <set_osr_settings+0x6a>
     230:	84 ef       	ldi	r24, 0xF4	; 244
     232:	89 83       	std	Y+1, r24	; 0x01
     234:	98 01       	movw	r18, r16
     236:	41 e0       	ldi	r20, 0x01	; 1
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	be 01       	movw	r22, r28
     23c:	6e 5f       	subi	r22, 0xFE	; 254
     23e:	7f 4f       	sbci	r23, 0xFF	; 255
     240:	1c df       	rcall	.-456    	; 0x7a <bme280_get_regs>
     242:	81 11       	cpse	r24, r1
     244:	0a c0       	rjmp	.+20     	; 0x25a <set_osr_settings+0x6a>
     246:	98 01       	movw	r18, r16
     248:	41 e0       	ldi	r20, 0x01	; 1
     24a:	be 01       	movw	r22, r28
     24c:	6e 5f       	subi	r22, 0xFE	; 254
     24e:	7f 4f       	sbci	r23, 0xFF	; 255
     250:	ce 01       	movw	r24, r28
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	38 df       	rcall	.-400    	; 0xc6 <bme280_set_regs>
     256:	01 c0       	rjmp	.+2      	; 0x25a <set_osr_settings+0x6a>
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	9d 2d       	mov	r25, r13
     25c:	93 70       	andi	r25, 0x03	; 3
     25e:	51 f1       	breq	.+84     	; 0x2b4 <set_osr_settings+0xc4>
     260:	84 ef       	ldi	r24, 0xF4	; 244
     262:	8a 83       	std	Y+2, r24	; 0x02
     264:	98 01       	movw	r18, r16
     266:	41 e0       	ldi	r20, 0x01	; 1
     268:	50 e0       	ldi	r21, 0x00	; 0
     26a:	be 01       	movw	r22, r28
     26c:	6f 5f       	subi	r22, 0xFF	; 255
     26e:	7f 4f       	sbci	r23, 0xFF	; 255
     270:	04 df       	rcall	.-504    	; 0x7a <bme280_get_regs>
     272:	81 11       	cpse	r24, r1
     274:	1f c0       	rjmp	.+62     	; 0x2b4 <set_osr_settings+0xc4>
     276:	d0 fe       	sbrs	r13, 0
     278:	09 c0       	rjmp	.+18     	; 0x28c <set_osr_settings+0x9c>
     27a:	f7 01       	movw	r30, r14
     27c:	90 81       	ld	r25, Z
     27e:	99 0f       	add	r25, r25
     280:	99 0f       	add	r25, r25
     282:	9c 71       	andi	r25, 0x1C	; 28
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	83 7e       	andi	r24, 0xE3	; 227
     288:	89 2b       	or	r24, r25
     28a:	89 83       	std	Y+1, r24	; 0x01
     28c:	d1 fe       	sbrs	r13, 1
     28e:	0a c0       	rjmp	.+20     	; 0x2a4 <set_osr_settings+0xb4>
     290:	f7 01       	movw	r30, r14
     292:	81 81       	ldd	r24, Z+1	; 0x01
     294:	f0 e2       	ldi	r31, 0x20	; 32
     296:	8f 9f       	mul	r24, r31
     298:	c0 01       	movw	r24, r0
     29a:	11 24       	eor	r1, r1
     29c:	99 81       	ldd	r25, Y+1	; 0x01
     29e:	9f 71       	andi	r25, 0x1F	; 31
     2a0:	89 2b       	or	r24, r25
     2a2:	89 83       	std	Y+1, r24	; 0x01
     2a4:	98 01       	movw	r18, r16
     2a6:	41 e0       	ldi	r20, 0x01	; 1
     2a8:	be 01       	movw	r22, r28
     2aa:	6f 5f       	subi	r22, 0xFF	; 255
     2ac:	7f 4f       	sbci	r23, 0xFF	; 255
     2ae:	ce 01       	movw	r24, r28
     2b0:	02 96       	adiw	r24, 0x02	; 2
     2b2:	09 df       	rcall	.-494    	; 0xc6 <bme280_set_regs>
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	08 95       	ret

000002ca <set_filter_standby_settings>:
     2ca:	df 92       	push	r13
     2cc:	ef 92       	push	r14
     2ce:	ff 92       	push	r15
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	00 d0       	rcall	.+0      	; 0x2da <set_filter_standby_settings+0x10>
     2da:	cd b7       	in	r28, 0x3d	; 61
     2dc:	de b7       	in	r29, 0x3e	; 62
     2de:	d8 2e       	mov	r13, r24
     2e0:	7b 01       	movw	r14, r22
     2e2:	8a 01       	movw	r16, r20
     2e4:	85 ef       	ldi	r24, 0xF5	; 245
     2e6:	89 83       	std	Y+1, r24	; 0x01
     2e8:	9a 01       	movw	r18, r20
     2ea:	41 e0       	ldi	r20, 0x01	; 1
     2ec:	50 e0       	ldi	r21, 0x00	; 0
     2ee:	be 01       	movw	r22, r28
     2f0:	6e 5f       	subi	r22, 0xFE	; 254
     2f2:	7f 4f       	sbci	r23, 0xFF	; 255
     2f4:	c2 de       	rcall	.-636    	; 0x7a <bme280_get_regs>
     2f6:	81 11       	cpse	r24, r1
     2f8:	1f c0       	rjmp	.+62     	; 0x338 <set_filter_standby_settings+0x6e>
     2fa:	d3 fe       	sbrs	r13, 3
     2fc:	09 c0       	rjmp	.+18     	; 0x310 <set_filter_standby_settings+0x46>
     2fe:	f7 01       	movw	r30, r14
     300:	93 81       	ldd	r25, Z+3	; 0x03
     302:	99 0f       	add	r25, r25
     304:	99 0f       	add	r25, r25
     306:	9c 71       	andi	r25, 0x1C	; 28
     308:	8a 81       	ldd	r24, Y+2	; 0x02
     30a:	83 7e       	andi	r24, 0xE3	; 227
     30c:	89 2b       	or	r24, r25
     30e:	8a 83       	std	Y+2, r24	; 0x02
     310:	d4 fe       	sbrs	r13, 4
     312:	0a c0       	rjmp	.+20     	; 0x328 <set_filter_standby_settings+0x5e>
     314:	f7 01       	movw	r30, r14
     316:	84 81       	ldd	r24, Z+4	; 0x04
     318:	f0 e2       	ldi	r31, 0x20	; 32
     31a:	8f 9f       	mul	r24, r31
     31c:	c0 01       	movw	r24, r0
     31e:	11 24       	eor	r1, r1
     320:	9a 81       	ldd	r25, Y+2	; 0x02
     322:	9f 71       	andi	r25, 0x1F	; 31
     324:	89 2b       	or	r24, r25
     326:	8a 83       	std	Y+2, r24	; 0x02
     328:	98 01       	movw	r18, r16
     32a:	41 e0       	ldi	r20, 0x01	; 1
     32c:	be 01       	movw	r22, r28
     32e:	6e 5f       	subi	r22, 0xFE	; 254
     330:	7f 4f       	sbci	r23, 0xFF	; 255
     332:	ce 01       	movw	r24, r28
     334:	01 96       	adiw	r24, 0x01	; 1
     336:	c7 de       	rcall	.-626    	; 0xc6 <bme280_set_regs>
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	1f 91       	pop	r17
     342:	0f 91       	pop	r16
     344:	ff 90       	pop	r15
     346:	ef 90       	pop	r14
     348:	df 90       	pop	r13
     34a:	08 95       	ret

0000034c <bme280_get_sensor_mode>:
     34c:	0f 93       	push	r16
     34e:	1f 93       	push	r17
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	8c 01       	movw	r16, r24
     356:	eb 01       	movw	r28, r22
     358:	cb 01       	movw	r24, r22
     35a:	76 de       	rcall	.-788    	; 0x48 <null_ptr_check>
     35c:	81 11       	cpse	r24, r1
     35e:	0a c0       	rjmp	.+20     	; 0x374 <bme280_get_sensor_mode+0x28>
     360:	9e 01       	movw	r18, r28
     362:	41 e0       	ldi	r20, 0x01	; 1
     364:	50 e0       	ldi	r21, 0x00	; 0
     366:	b8 01       	movw	r22, r16
     368:	84 ef       	ldi	r24, 0xF4	; 244
     36a:	87 de       	rcall	.-754    	; 0x7a <bme280_get_regs>
     36c:	f8 01       	movw	r30, r16
     36e:	90 81       	ld	r25, Z
     370:	93 70       	andi	r25, 0x03	; 3
     372:	90 83       	st	Z, r25
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	1f 91       	pop	r17
     37a:	0f 91       	pop	r16
     37c:	08 95       	ret

0000037e <bme280_soft_reset>:
     37e:	ff 92       	push	r15
     380:	0f 93       	push	r16
     382:	1f 93       	push	r17
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	00 d0       	rcall	.+0      	; 0x38a <bme280_soft_reset+0xc>
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	8c 01       	movw	r16, r24
     390:	80 ee       	ldi	r24, 0xE0	; 224
     392:	89 83       	std	Y+1, r24	; 0x01
     394:	86 eb       	ldi	r24, 0xB6	; 182
     396:	8a 83       	std	Y+2, r24	; 0x02
     398:	c8 01       	movw	r24, r16
     39a:	56 de       	rcall	.-852    	; 0x48 <null_ptr_check>
     39c:	f8 2e       	mov	r15, r24
     39e:	81 11       	cpse	r24, r1
     3a0:	13 c0       	rjmp	.+38     	; 0x3c8 <bme280_soft_reset+0x4a>
     3a2:	98 01       	movw	r18, r16
     3a4:	41 e0       	ldi	r20, 0x01	; 1
     3a6:	be 01       	movw	r22, r28
     3a8:	6e 5f       	subi	r22, 0xFE	; 254
     3aa:	7f 4f       	sbci	r23, 0xFF	; 255
     3ac:	ce 01       	movw	r24, r28
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	8a de       	rcall	.-748    	; 0xc6 <bme280_set_regs>
     3b2:	f8 2e       	mov	r15, r24
     3b4:	d8 01       	movw	r26, r16
     3b6:	17 96       	adiw	r26, 0x07	; 7
     3b8:	ed 91       	ld	r30, X+
     3ba:	fc 91       	ld	r31, X
     3bc:	18 97       	sbiw	r26, 0x08	; 8
     3be:	62 e0       	ldi	r22, 0x02	; 2
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	09 95       	icall
     3c8:	8f 2d       	mov	r24, r15
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	1f 91       	pop	r17
     3d4:	0f 91       	pop	r16
     3d6:	ff 90       	pop	r15
     3d8:	08 95       	ret

000003da <bme280_init>:
     3da:	ff 92       	push	r15
     3dc:	0f 93       	push	r16
     3de:	1f 93       	push	r17
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	cd b7       	in	r28, 0x3d	; 61
     3e6:	de b7       	in	r29, 0x3e	; 62
     3e8:	6b 97       	sbiw	r28, 0x1b	; 27
     3ea:	0f b6       	in	r0, 0x3f	; 63
     3ec:	f8 94       	cli
     3ee:	de bf       	out	0x3e, r29	; 62
     3f0:	0f be       	out	0x3f, r0	; 63
     3f2:	cd bf       	out	0x3d, r28	; 61
     3f4:	8c 01       	movw	r16, r24
     3f6:	19 82       	std	Y+1, r1	; 0x01
     3f8:	27 de       	rcall	.-946    	; 0x48 <null_ptr_check>
     3fa:	81 11       	cpse	r24, r1
     3fc:	e4 c0       	rjmp	.+456    	; 0x5c6 <__stack+0x167>
     3fe:	0f 2e       	mov	r0, r31
     400:	f5 e0       	ldi	r31, 0x05	; 5
     402:	ff 2e       	mov	r15, r31
     404:	f0 2d       	mov	r31, r0
     406:	98 01       	movw	r18, r16
     408:	41 e0       	ldi	r20, 0x01	; 1
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	be 01       	movw	r22, r28
     40e:	6f 5f       	subi	r22, 0xFF	; 255
     410:	7f 4f       	sbci	r23, 0xFF	; 255
     412:	80 ed       	ldi	r24, 0xD0	; 208
     414:	32 de       	rcall	.-924    	; 0x7a <bme280_get_regs>
     416:	81 11       	cpse	r24, r1
     418:	c6 c0       	rjmp	.+396    	; 0x5a6 <__stack+0x147>
     41a:	89 81       	ldd	r24, Y+1	; 0x01
     41c:	80 36       	cpi	r24, 0x60	; 96
     41e:	09 f0       	breq	.+2      	; 0x422 <bme280_init+0x48>
     420:	c2 c0       	rjmp	.+388    	; 0x5a6 <__stack+0x147>
     422:	d8 01       	movw	r26, r16
     424:	8c 93       	st	X, r24
     426:	c8 01       	movw	r24, r16
     428:	aa df       	rcall	.-172    	; 0x37e <bme280_soft_reset>
     42a:	81 11       	cpse	r24, r1
     42c:	c9 c0       	rjmp	.+402    	; 0x5c0 <__stack+0x161>
     42e:	be 01       	movw	r22, r28
     430:	6e 5f       	subi	r22, 0xFE	; 254
     432:	7f 4f       	sbci	r23, 0xFF	; 255
     434:	8a e1       	ldi	r24, 0x1A	; 26
     436:	fb 01       	movw	r30, r22
     438:	11 92       	st	Z+, r1
     43a:	8a 95       	dec	r24
     43c:	e9 f7       	brne	.-6      	; 0x438 <bme280_init+0x5e>
     43e:	98 01       	movw	r18, r16
     440:	4a e1       	ldi	r20, 0x1A	; 26
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	88 e8       	ldi	r24, 0x88	; 136
     446:	19 de       	rcall	.-974    	; 0x7a <bme280_get_regs>
     448:	81 11       	cpse	r24, r1
     44a:	ba c0       	rjmp	.+372    	; 0x5c0 <__stack+0x161>
     44c:	8b 81       	ldd	r24, Y+3	; 0x03
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	98 2f       	mov	r25, r24
     452:	88 27       	eor	r24, r24
     454:	2a 81       	ldd	r18, Y+2	; 0x02
     456:	82 2b       	or	r24, r18
     458:	d8 01       	movw	r26, r16
     45a:	1a 96       	adiw	r26, 0x0a	; 10
     45c:	9c 93       	st	X, r25
     45e:	8e 93       	st	-X, r24
     460:	19 97       	sbiw	r26, 0x09	; 9
     462:	8d 81       	ldd	r24, Y+5	; 0x05
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	98 2f       	mov	r25, r24
     468:	88 27       	eor	r24, r24
     46a:	2c 81       	ldd	r18, Y+4	; 0x04
     46c:	82 2b       	or	r24, r18
     46e:	1c 96       	adiw	r26, 0x0c	; 12
     470:	9c 93       	st	X, r25
     472:	8e 93       	st	-X, r24
     474:	1b 97       	sbiw	r26, 0x0b	; 11
     476:	8f 81       	ldd	r24, Y+7	; 0x07
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	98 2f       	mov	r25, r24
     47c:	88 27       	eor	r24, r24
     47e:	2e 81       	ldd	r18, Y+6	; 0x06
     480:	82 2b       	or	r24, r18
     482:	1e 96       	adiw	r26, 0x0e	; 14
     484:	9c 93       	st	X, r25
     486:	8e 93       	st	-X, r24
     488:	1d 97       	sbiw	r26, 0x0d	; 13
     48a:	89 85       	ldd	r24, Y+9	; 0x09
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	98 2f       	mov	r25, r24
     490:	88 27       	eor	r24, r24
     492:	28 85       	ldd	r18, Y+8	; 0x08
     494:	82 2b       	or	r24, r18
     496:	50 96       	adiw	r26, 0x10	; 16
     498:	9c 93       	st	X, r25
     49a:	8e 93       	st	-X, r24
     49c:	1f 97       	sbiw	r26, 0x0f	; 15
     49e:	8b 85       	ldd	r24, Y+11	; 0x0b
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	98 2f       	mov	r25, r24
     4a4:	88 27       	eor	r24, r24
     4a6:	2a 85       	ldd	r18, Y+10	; 0x0a
     4a8:	82 2b       	or	r24, r18
     4aa:	52 96       	adiw	r26, 0x12	; 18
     4ac:	9c 93       	st	X, r25
     4ae:	8e 93       	st	-X, r24
     4b0:	51 97       	sbiw	r26, 0x11	; 17
     4b2:	8d 85       	ldd	r24, Y+13	; 0x0d
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	98 2f       	mov	r25, r24
     4b8:	88 27       	eor	r24, r24
     4ba:	2c 85       	ldd	r18, Y+12	; 0x0c
     4bc:	82 2b       	or	r24, r18
     4be:	54 96       	adiw	r26, 0x14	; 20
     4c0:	9c 93       	st	X, r25
     4c2:	8e 93       	st	-X, r24
     4c4:	53 97       	sbiw	r26, 0x13	; 19
     4c6:	8f 85       	ldd	r24, Y+15	; 0x0f
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	98 2f       	mov	r25, r24
     4cc:	88 27       	eor	r24, r24
     4ce:	2e 85       	ldd	r18, Y+14	; 0x0e
     4d0:	82 2b       	or	r24, r18
     4d2:	56 96       	adiw	r26, 0x16	; 22
     4d4:	9c 93       	st	X, r25
     4d6:	8e 93       	st	-X, r24
     4d8:	55 97       	sbiw	r26, 0x15	; 21
     4da:	89 89       	ldd	r24, Y+17	; 0x11
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	98 2f       	mov	r25, r24
     4e0:	88 27       	eor	r24, r24
     4e2:	28 89       	ldd	r18, Y+16	; 0x10
     4e4:	82 2b       	or	r24, r18
     4e6:	58 96       	adiw	r26, 0x18	; 24
     4e8:	9c 93       	st	X, r25
     4ea:	8e 93       	st	-X, r24
     4ec:	57 97       	sbiw	r26, 0x17	; 23
     4ee:	8b 89       	ldd	r24, Y+19	; 0x13
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	98 2f       	mov	r25, r24
     4f4:	88 27       	eor	r24, r24
     4f6:	2a 89       	ldd	r18, Y+18	; 0x12
     4f8:	82 2b       	or	r24, r18
     4fa:	5a 96       	adiw	r26, 0x1a	; 26
     4fc:	9c 93       	st	X, r25
     4fe:	8e 93       	st	-X, r24
     500:	59 97       	sbiw	r26, 0x19	; 25
     502:	8d 89       	ldd	r24, Y+21	; 0x15
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	98 2f       	mov	r25, r24
     508:	88 27       	eor	r24, r24
     50a:	2c 89       	ldd	r18, Y+20	; 0x14
     50c:	82 2b       	or	r24, r18
     50e:	5c 96       	adiw	r26, 0x1c	; 28
     510:	9c 93       	st	X, r25
     512:	8e 93       	st	-X, r24
     514:	5b 97       	sbiw	r26, 0x1b	; 27
     516:	8f 89       	ldd	r24, Y+23	; 0x17
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	98 2f       	mov	r25, r24
     51c:	88 27       	eor	r24, r24
     51e:	2e 89       	ldd	r18, Y+22	; 0x16
     520:	82 2b       	or	r24, r18
     522:	5e 96       	adiw	r26, 0x1e	; 30
     524:	9c 93       	st	X, r25
     526:	8e 93       	st	-X, r24
     528:	5d 97       	sbiw	r26, 0x1d	; 29
     52a:	89 8d       	ldd	r24, Y+25	; 0x19
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	98 2f       	mov	r25, r24
     530:	88 27       	eor	r24, r24
     532:	28 8d       	ldd	r18, Y+24	; 0x18
     534:	82 2b       	or	r24, r18
     536:	90 96       	adiw	r26, 0x20	; 32
     538:	9c 93       	st	X, r25
     53a:	8e 93       	st	-X, r24
     53c:	5f 97       	sbiw	r26, 0x1f	; 31
     53e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     540:	91 96       	adiw	r26, 0x21	; 33
     542:	8c 93       	st	X, r24
     544:	98 01       	movw	r18, r16
     546:	47 e0       	ldi	r20, 0x07	; 7
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	be 01       	movw	r22, r28
     54c:	6e 5f       	subi	r22, 0xFE	; 254
     54e:	7f 4f       	sbci	r23, 0xFF	; 255
     550:	81 ee       	ldi	r24, 0xE1	; 225
     552:	93 dd       	rcall	.-1242   	; 0x7a <bme280_get_regs>
     554:	81 11       	cpse	r24, r1
     556:	34 c0       	rjmp	.+104    	; 0x5c0 <__stack+0x161>
     558:	2b 81       	ldd	r18, Y+3	; 0x03
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	32 2f       	mov	r19, r18
     55e:	22 27       	eor	r18, r18
     560:	9a 81       	ldd	r25, Y+2	; 0x02
     562:	29 2b       	or	r18, r25
     564:	f8 01       	movw	r30, r16
     566:	33 a3       	std	Z+35, r19	; 0x23
     568:	22 a3       	std	Z+34, r18	; 0x22
     56a:	9c 81       	ldd	r25, Y+4	; 0x04
     56c:	94 a3       	std	Z+36, r25	; 0x24
     56e:	9e 81       	ldd	r25, Y+6	; 0x06
     570:	2d 81       	ldd	r18, Y+5	; 0x05
     572:	f0 e1       	ldi	r31, 0x10	; 16
     574:	2f 02       	muls	r18, r31
     576:	90 01       	movw	r18, r0
     578:	11 24       	eor	r1, r1
     57a:	49 2f       	mov	r20, r25
     57c:	4f 70       	andi	r20, 0x0F	; 15
     57e:	24 2b       	or	r18, r20
     580:	d8 01       	movw	r26, r16
     582:	96 96       	adiw	r26, 0x26	; 38
     584:	3c 93       	st	X, r19
     586:	2e 93       	st	-X, r18
     588:	95 97       	sbiw	r26, 0x25	; 37
     58a:	2f 81       	ldd	r18, Y+7	; 0x07
     58c:	b0 e1       	ldi	r27, 0x10	; 16
     58e:	2b 02       	muls	r18, r27
     590:	90 01       	movw	r18, r0
     592:	11 24       	eor	r1, r1
     594:	92 95       	swap	r25
     596:	9f 70       	andi	r25, 0x0F	; 15
     598:	29 2b       	or	r18, r25
     59a:	f8 01       	movw	r30, r16
     59c:	30 a7       	std	Z+40, r19	; 0x28
     59e:	27 a3       	std	Z+39, r18	; 0x27
     5a0:	98 85       	ldd	r25, Y+8	; 0x08
     5a2:	91 a7       	std	Z+41, r25	; 0x29
     5a4:	0d c0       	rjmp	.+26     	; 0x5c0 <__stack+0x161>
     5a6:	d8 01       	movw	r26, r16
     5a8:	17 96       	adiw	r26, 0x07	; 7
     5aa:	ed 91       	ld	r30, X+
     5ac:	fc 91       	ld	r31, X
     5ae:	18 97       	sbiw	r26, 0x08	; 8
     5b0:	61 e0       	ldi	r22, 0x01	; 1
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	09 95       	icall
     5ba:	fa 94       	dec	r15
     5bc:	19 f0       	breq	.+6      	; 0x5c4 <__stack+0x165>
     5be:	23 cf       	rjmp	.-442    	; 0x406 <bme280_init+0x2c>
     5c0:	f1 10       	cpse	r15, r1
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <__stack+0x167>
     5c4:	8e ef       	ldi	r24, 0xFE	; 254
     5c6:	6b 96       	adiw	r28, 0x1b	; 27
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	ff 90       	pop	r15
     5dc:	08 95       	ret

000005de <put_device_to_sleep>:
     5de:	0f 93       	push	r16
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	29 97       	sbiw	r28, 0x09	; 9
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	8c 01       	movw	r16, r24
     5f8:	9c 01       	movw	r18, r24
     5fa:	44 e0       	ldi	r20, 0x04	; 4
     5fc:	50 e0       	ldi	r21, 0x00	; 0
     5fe:	be 01       	movw	r22, r28
     600:	6f 5f       	subi	r22, 0xFF	; 255
     602:	7f 4f       	sbci	r23, 0xFF	; 255
     604:	82 ef       	ldi	r24, 0xF2	; 242
     606:	39 dd       	rcall	.-1422   	; 0x7a <bme280_get_regs>
     608:	81 11       	cpse	r24, r1
     60a:	2f c0       	rjmp	.+94     	; 0x66a <put_device_to_sleep+0x8c>
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	87 70       	andi	r24, 0x07	; 7
     610:	8f 83       	std	Y+7, r24	; 0x07
     612:	2b 81       	ldd	r18, Y+3	; 0x03
     614:	82 2f       	mov	r24, r18
     616:	8c 71       	andi	r24, 0x1C	; 28
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	95 95       	asr	r25
     61c:	87 95       	ror	r24
     61e:	95 95       	asr	r25
     620:	87 95       	ror	r24
     622:	8d 83       	std	Y+5, r24	; 0x05
     624:	22 95       	swap	r18
     626:	26 95       	lsr	r18
     628:	27 70       	andi	r18, 0x07	; 7
     62a:	2e 83       	std	Y+6, r18	; 0x06
     62c:	2c 81       	ldd	r18, Y+4	; 0x04
     62e:	82 2f       	mov	r24, r18
     630:	8c 71       	andi	r24, 0x1C	; 28
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	95 95       	asr	r25
     636:	87 95       	ror	r24
     638:	95 95       	asr	r25
     63a:	87 95       	ror	r24
     63c:	88 87       	std	Y+8, r24	; 0x08
     63e:	22 95       	swap	r18
     640:	26 95       	lsr	r18
     642:	27 70       	andi	r18, 0x07	; 7
     644:	29 87       	std	Y+9, r18	; 0x09
     646:	c8 01       	movw	r24, r16
     648:	9a de       	rcall	.-716    	; 0x37e <bme280_soft_reset>
     64a:	81 11       	cpse	r24, r1
     64c:	0e c0       	rjmp	.+28     	; 0x66a <put_device_to_sleep+0x8c>
     64e:	a8 01       	movw	r20, r16
     650:	be 01       	movw	r22, r28
     652:	6b 5f       	subi	r22, 0xFB	; 251
     654:	7f 4f       	sbci	r23, 0xFF	; 255
     656:	8f e1       	ldi	r24, 0x1F	; 31
     658:	cb dd       	rcall	.-1130   	; 0x1f0 <set_osr_settings>
     65a:	81 11       	cpse	r24, r1
     65c:	06 c0       	rjmp	.+12     	; 0x66a <put_device_to_sleep+0x8c>
     65e:	a8 01       	movw	r20, r16
     660:	be 01       	movw	r22, r28
     662:	6b 5f       	subi	r22, 0xFB	; 251
     664:	7f 4f       	sbci	r23, 0xFF	; 255
     666:	8f e1       	ldi	r24, 0x1F	; 31
     668:	30 de       	rcall	.-928    	; 0x2ca <set_filter_standby_settings>
     66a:	29 96       	adiw	r28, 0x09	; 9
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	08 95       	ret

00000680 <bme280_set_sensor_settings>:
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	1f 92       	push	r1
     68e:	cd b7       	in	r28, 0x3d	; 61
     690:	de b7       	in	r29, 0x3e	; 62
     692:	e8 2e       	mov	r14, r24
     694:	8b 01       	movw	r16, r22
     696:	cb 01       	movw	r24, r22
     698:	d7 dc       	rcall	.-1618   	; 0x48 <null_ptr_check>
     69a:	f8 2e       	mov	r15, r24
     69c:	81 11       	cpse	r24, r1
     69e:	27 c0       	rjmp	.+78     	; 0x6ee <bme280_set_sensor_settings+0x6e>
     6a0:	b8 01       	movw	r22, r16
     6a2:	ce 01       	movw	r24, r28
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	52 de       	rcall	.-860    	; 0x34c <bme280_get_sensor_mode>
     6a8:	f8 2e       	mov	r15, r24
     6aa:	81 11       	cpse	r24, r1
     6ac:	20 c0       	rjmp	.+64     	; 0x6ee <bme280_set_sensor_settings+0x6e>
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	88 23       	and	r24, r24
     6b2:	21 f0       	breq	.+8      	; 0x6bc <bme280_set_sensor_settings+0x3c>
     6b4:	c8 01       	movw	r24, r16
     6b6:	93 df       	rcall	.-218    	; 0x5de <put_device_to_sleep>
     6b8:	81 11       	cpse	r24, r1
     6ba:	16 c0       	rjmp	.+44     	; 0x6e8 <bme280_set_sensor_settings+0x68>
     6bc:	8e 2d       	mov	r24, r14
     6be:	87 70       	andi	r24, 0x07	; 7
     6c0:	41 f0       	breq	.+16     	; 0x6d2 <bme280_set_sensor_settings+0x52>
     6c2:	a8 01       	movw	r20, r16
     6c4:	b8 01       	movw	r22, r16
     6c6:	62 5d       	subi	r22, 0xD2	; 210
     6c8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ca:	8e 2d       	mov	r24, r14
     6cc:	91 dd       	rcall	.-1246   	; 0x1f0 <set_osr_settings>
     6ce:	81 11       	cpse	r24, r1
     6d0:	0d c0       	rjmp	.+26     	; 0x6ec <bme280_set_sensor_settings+0x6c>
     6d2:	8e 2d       	mov	r24, r14
     6d4:	88 71       	andi	r24, 0x18	; 24
     6d6:	59 f0       	breq	.+22     	; 0x6ee <bme280_set_sensor_settings+0x6e>
     6d8:	b8 01       	movw	r22, r16
     6da:	62 5d       	subi	r22, 0xD2	; 210
     6dc:	7f 4f       	sbci	r23, 0xFF	; 255
     6de:	a8 01       	movw	r20, r16
     6e0:	8e 2d       	mov	r24, r14
     6e2:	f3 dd       	rcall	.-1050   	; 0x2ca <set_filter_standby_settings>
     6e4:	f8 2e       	mov	r15, r24
     6e6:	03 c0       	rjmp	.+6      	; 0x6ee <bme280_set_sensor_settings+0x6e>
     6e8:	f8 2e       	mov	r15, r24
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <bme280_set_sensor_settings+0x6e>
     6ec:	f8 2e       	mov	r15, r24
     6ee:	8f 2d       	mov	r24, r15
     6f0:	0f 90       	pop	r0
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	0f 91       	pop	r16
     6fa:	ff 90       	pop	r15
     6fc:	ef 90       	pop	r14
     6fe:	08 95       	ret

00000700 <bme280_set_sensor_mode>:
     700:	ff 92       	push	r15
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	00 d0       	rcall	.+0      	; 0x70c <bme280_set_sensor_mode+0xc>
     70c:	1f 92       	push	r1
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	f8 2e       	mov	r15, r24
     714:	8b 01       	movw	r16, r22
     716:	cb 01       	movw	r24, r22
     718:	97 dc       	rcall	.-1746   	; 0x48 <null_ptr_check>
     71a:	81 11       	cpse	r24, r1
     71c:	27 c0       	rjmp	.+78     	; 0x76c <bme280_set_sensor_mode+0x6c>
     71e:	b8 01       	movw	r22, r16
     720:	ce 01       	movw	r24, r28
     722:	01 96       	adiw	r24, 0x01	; 1
     724:	13 de       	rcall	.-986    	; 0x34c <bme280_get_sensor_mode>
     726:	81 11       	cpse	r24, r1
     728:	21 c0       	rjmp	.+66     	; 0x76c <bme280_set_sensor_mode+0x6c>
     72a:	89 81       	ldd	r24, Y+1	; 0x01
     72c:	88 23       	and	r24, r24
     72e:	21 f0       	breq	.+8      	; 0x738 <bme280_set_sensor_mode+0x38>
     730:	c8 01       	movw	r24, r16
     732:	55 df       	rcall	.-342    	; 0x5de <put_device_to_sleep>
     734:	81 11       	cpse	r24, r1
     736:	1a c0       	rjmp	.+52     	; 0x76c <bme280_set_sensor_mode+0x6c>
     738:	84 ef       	ldi	r24, 0xF4	; 244
     73a:	8b 83       	std	Y+3, r24	; 0x03
     73c:	98 01       	movw	r18, r16
     73e:	41 e0       	ldi	r20, 0x01	; 1
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	be 01       	movw	r22, r28
     744:	6e 5f       	subi	r22, 0xFE	; 254
     746:	7f 4f       	sbci	r23, 0xFF	; 255
     748:	98 dc       	rcall	.-1744   	; 0x7a <bme280_get_regs>
     74a:	81 11       	cpse	r24, r1
     74c:	0f c0       	rjmp	.+30     	; 0x76c <bme280_set_sensor_mode+0x6c>
     74e:	9f 2d       	mov	r25, r15
     750:	93 70       	andi	r25, 0x03	; 3
     752:	8a 81       	ldd	r24, Y+2	; 0x02
     754:	8c 7f       	andi	r24, 0xFC	; 252
     756:	f9 2e       	mov	r15, r25
     758:	f8 2a       	or	r15, r24
     75a:	fa 82       	std	Y+2, r15	; 0x02
     75c:	98 01       	movw	r18, r16
     75e:	41 e0       	ldi	r20, 0x01	; 1
     760:	be 01       	movw	r22, r28
     762:	6e 5f       	subi	r22, 0xFE	; 254
     764:	7f 4f       	sbci	r23, 0xFF	; 255
     766:	ce 01       	movw	r24, r28
     768:	03 96       	adiw	r24, 0x03	; 3
     76a:	ad dc       	rcall	.-1702   	; 0xc6 <bme280_set_regs>
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	ff 90       	pop	r15
     77c:	08 95       	ret

0000077e <bme280_parse_sensor_data>:
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	fc 01       	movw	r30, r24
     784:	eb 01       	movw	r28, r22
     786:	81 81       	ldd	r24, Z+1	; 0x01
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	a0 e0       	ldi	r26, 0x00	; 0
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	88 0f       	add	r24, r24
     790:	99 1f       	adc	r25, r25
     792:	aa 1f       	adc	r26, r26
     794:	bb 1f       	adc	r27, r27
     796:	88 0f       	add	r24, r24
     798:	99 1f       	adc	r25, r25
     79a:	aa 1f       	adc	r26, r26
     79c:	bb 1f       	adc	r27, r27
     79e:	88 0f       	add	r24, r24
     7a0:	99 1f       	adc	r25, r25
     7a2:	aa 1f       	adc	r26, r26
     7a4:	bb 1f       	adc	r27, r27
     7a6:	88 0f       	add	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	aa 1f       	adc	r26, r26
     7ac:	bb 1f       	adc	r27, r27
     7ae:	40 81       	ld	r20, Z
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	03 2e       	mov	r0, r19
     7b8:	3c e0       	ldi	r19, 0x0C	; 12
     7ba:	44 0f       	add	r20, r20
     7bc:	55 1f       	adc	r21, r21
     7be:	66 1f       	adc	r22, r22
     7c0:	77 1f       	adc	r23, r23
     7c2:	3a 95       	dec	r19
     7c4:	d1 f7       	brne	.-12     	; 0x7ba <bme280_parse_sensor_data+0x3c>
     7c6:	30 2d       	mov	r19, r0
     7c8:	84 2b       	or	r24, r20
     7ca:	95 2b       	or	r25, r21
     7cc:	a6 2b       	or	r26, r22
     7ce:	b7 2b       	or	r27, r23
     7d0:	22 81       	ldd	r18, Z+2	; 0x02
     7d2:	22 95       	swap	r18
     7d4:	2f 70       	andi	r18, 0x0F	; 15
     7d6:	82 2b       	or	r24, r18
     7d8:	88 83       	st	Y, r24
     7da:	99 83       	std	Y+1, r25	; 0x01
     7dc:	aa 83       	std	Y+2, r26	; 0x02
     7de:	bb 83       	std	Y+3, r27	; 0x03
     7e0:	84 81       	ldd	r24, Z+4	; 0x04
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	a0 e0       	ldi	r26, 0x00	; 0
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	88 0f       	add	r24, r24
     7ea:	99 1f       	adc	r25, r25
     7ec:	aa 1f       	adc	r26, r26
     7ee:	bb 1f       	adc	r27, r27
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	aa 1f       	adc	r26, r26
     7f6:	bb 1f       	adc	r27, r27
     7f8:	88 0f       	add	r24, r24
     7fa:	99 1f       	adc	r25, r25
     7fc:	aa 1f       	adc	r26, r26
     7fe:	bb 1f       	adc	r27, r27
     800:	88 0f       	add	r24, r24
     802:	99 1f       	adc	r25, r25
     804:	aa 1f       	adc	r26, r26
     806:	bb 1f       	adc	r27, r27
     808:	43 81       	ldd	r20, Z+3	; 0x03
     80a:	50 e0       	ldi	r21, 0x00	; 0
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	03 2e       	mov	r0, r19
     812:	3c e0       	ldi	r19, 0x0C	; 12
     814:	44 0f       	add	r20, r20
     816:	55 1f       	adc	r21, r21
     818:	66 1f       	adc	r22, r22
     81a:	77 1f       	adc	r23, r23
     81c:	3a 95       	dec	r19
     81e:	d1 f7       	brne	.-12     	; 0x814 <bme280_parse_sensor_data+0x96>
     820:	30 2d       	mov	r19, r0
     822:	84 2b       	or	r24, r20
     824:	95 2b       	or	r25, r21
     826:	a6 2b       	or	r26, r22
     828:	b7 2b       	or	r27, r23
     82a:	25 81       	ldd	r18, Z+5	; 0x05
     82c:	22 95       	swap	r18
     82e:	2f 70       	andi	r18, 0x0F	; 15
     830:	82 2b       	or	r24, r18
     832:	8c 83       	std	Y+4, r24	; 0x04
     834:	9d 83       	std	Y+5, r25	; 0x05
     836:	ae 83       	std	Y+6, r26	; 0x06
     838:	bf 83       	std	Y+7, r27	; 0x07
     83a:	86 81       	ldd	r24, Z+6	; 0x06
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	a0 e0       	ldi	r26, 0x00	; 0
     840:	b0 e0       	ldi	r27, 0x00	; 0
     842:	ba 2f       	mov	r27, r26
     844:	a9 2f       	mov	r26, r25
     846:	98 2f       	mov	r25, r24
     848:	88 27       	eor	r24, r24
     84a:	27 81       	ldd	r18, Z+7	; 0x07
     84c:	82 2b       	or	r24, r18
     84e:	88 87       	std	Y+8, r24	; 0x08
     850:	99 87       	std	Y+9, r25	; 0x09
     852:	aa 87       	std	Y+10, r26	; 0x0a
     854:	bb 87       	std	Y+11, r27	; 0x0b
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	08 95       	ret

0000085c <bme280_compensate_data>:
     85c:	2f 92       	push	r2
     85e:	3f 92       	push	r3
     860:	4f 92       	push	r4
     862:	5f 92       	push	r5
     864:	6f 92       	push	r6
     866:	7f 92       	push	r7
     868:	8f 92       	push	r8
     86a:	9f 92       	push	r9
     86c:	af 92       	push	r10
     86e:	bf 92       	push	r11
     870:	cf 92       	push	r12
     872:	df 92       	push	r13
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
     884:	29 97       	sbiw	r28, 0x09	; 9
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	de bf       	out	0x3e, r29	; 62
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	cd bf       	out	0x3d, r28	; 61
     890:	89 83       	std	Y+1, r24	; 0x01
     892:	8b 01       	movw	r16, r22
     894:	1a 01       	movw	r2, r20
     896:	3f 83       	std	Y+7, r19	; 0x07
     898:	2e 83       	std	Y+6, r18	; 0x06
     89a:	61 15       	cp	r22, r1
     89c:	71 05       	cpc	r23, r1
     89e:	09 f4       	brne	.+2      	; 0x8a2 <bme280_compensate_data+0x46>
     8a0:	11 c4       	rjmp	.+2082   	; 0x10c4 <bme280_compensate_data+0x868>
     8a2:	41 15       	cp	r20, r1
     8a4:	51 05       	cpc	r21, r1
     8a6:	09 f4       	brne	.+2      	; 0x8aa <bme280_compensate_data+0x4e>
     8a8:	0f c4       	rjmp	.+2078   	; 0x10c8 <bme280_compensate_data+0x86c>
     8aa:	21 15       	cp	r18, r1
     8ac:	31 05       	cpc	r19, r1
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <bme280_compensate_data+0x56>
     8b0:	0d c4       	rjmp	.+2074   	; 0x10cc <bme280_compensate_data+0x870>
     8b2:	da 01       	movw	r26, r20
     8b4:	14 96       	adiw	r26, 0x04	; 4
     8b6:	1d 92       	st	X+, r1
     8b8:	1d 92       	st	X+, r1
     8ba:	1d 92       	st	X+, r1
     8bc:	1c 92       	st	X, r1
     8be:	17 97       	sbiw	r26, 0x07	; 7
     8c0:	fa 01       	movw	r30, r20
     8c2:	10 82       	st	Z, r1
     8c4:	11 82       	std	Z+1, r1	; 0x01
     8c6:	12 82       	std	Z+2, r1	; 0x02
     8c8:	13 82       	std	Z+3, r1	; 0x03
     8ca:	18 96       	adiw	r26, 0x08	; 8
     8cc:	1d 92       	st	X+, r1
     8ce:	1d 92       	st	X+, r1
     8d0:	1d 92       	st	X+, r1
     8d2:	1c 92       	st	X, r1
     8d4:	1b 97       	sbiw	r26, 0x0b	; 11
     8d6:	87 70       	andi	r24, 0x07	; 7
     8d8:	09 f4       	brne	.+2      	; 0x8dc <bme280_compensate_data+0x80>
     8da:	c2 c0       	rjmp	.+388    	; 0xa60 <bme280_compensate_data+0x204>
     8dc:	fb 01       	movw	r30, r22
     8de:	84 80       	ldd	r8, Z+4	; 0x04
     8e0:	95 80       	ldd	r9, Z+5	; 0x05
     8e2:	a6 80       	ldd	r10, Z+6	; 0x06
     8e4:	b7 80       	ldd	r11, Z+7	; 0x07
     8e6:	d9 01       	movw	r26, r18
     8e8:	cd 90       	ld	r12, X+
     8ea:	dc 90       	ld	r13, X
     8ec:	e1 2c       	mov	r14, r1
     8ee:	f1 2c       	mov	r15, r1
     8f0:	d7 01       	movw	r26, r14
     8f2:	c6 01       	movw	r24, r12
     8f4:	88 0f       	add	r24, r24
     8f6:	99 1f       	adc	r25, r25
     8f8:	aa 1f       	adc	r26, r26
     8fa:	bb 1f       	adc	r27, r27
     8fc:	b5 01       	movw	r22, r10
     8fe:	a4 01       	movw	r20, r8
     900:	68 94       	set
     902:	12 f8       	bld	r1, 2
     904:	76 95       	lsr	r23
     906:	67 95       	ror	r22
     908:	57 95       	ror	r21
     90a:	47 95       	ror	r20
     90c:	16 94       	lsr	r1
     90e:	d1 f7       	brne	.-12     	; 0x904 <bme280_compensate_data+0xa8>
     910:	9a 01       	movw	r18, r20
     912:	ab 01       	movw	r20, r22
     914:	28 1b       	sub	r18, r24
     916:	39 0b       	sbc	r19, r25
     918:	4a 0b       	sbc	r20, r26
     91a:	5b 0b       	sbc	r21, r27
     91c:	ee 81       	ldd	r30, Y+6	; 0x06
     91e:	ff 81       	ldd	r31, Y+7	; 0x07
     920:	a2 81       	ldd	r26, Z+2	; 0x02
     922:	b3 81       	ldd	r27, Z+3	; 0x03
     924:	d5 d5       	rcall	.+2986   	; 0x14d0 <__mulshisi3>
     926:	2b 01       	movw	r4, r22
     928:	3c 01       	movw	r6, r24
     92a:	d5 01       	movw	r26, r10
     92c:	c4 01       	movw	r24, r8
     92e:	68 94       	set
     930:	13 f8       	bld	r1, 3
     932:	b6 95       	lsr	r27
     934:	a7 95       	ror	r26
     936:	97 95       	ror	r25
     938:	87 95       	ror	r24
     93a:	16 94       	lsr	r1
     93c:	d1 f7       	brne	.-12     	; 0x932 <bme280_compensate_data+0xd6>
     93e:	bc 01       	movw	r22, r24
     940:	cd 01       	movw	r24, r26
     942:	6c 19       	sub	r22, r12
     944:	7d 09       	sbc	r23, r13
     946:	8e 09       	sbc	r24, r14
     948:	9f 09       	sbc	r25, r15
     94a:	9b 01       	movw	r18, r22
     94c:	ac 01       	movw	r20, r24
     94e:	85 d5       	rcall	.+2826   	; 0x145a <__mulsi3>
     950:	6b 01       	movw	r12, r22
     952:	7c 01       	movw	r14, r24
     954:	99 23       	and	r25, r25
     956:	34 f4       	brge	.+12     	; 0x964 <bme280_compensate_data+0x108>
     958:	ff ef       	ldi	r31, 0xFF	; 255
     95a:	cf 0e       	add	r12, r31
     95c:	ff e0       	ldi	r31, 0x0F	; 15
     95e:	df 1e       	adc	r13, r31
     960:	e1 1c       	adc	r14, r1
     962:	f1 1c       	adc	r15, r1
     964:	a7 01       	movw	r20, r14
     966:	96 01       	movw	r18, r12
     968:	01 2e       	mov	r0, r17
     96a:	1c e0       	ldi	r17, 0x0C	; 12
     96c:	55 95       	asr	r21
     96e:	47 95       	ror	r20
     970:	37 95       	ror	r19
     972:	27 95       	ror	r18
     974:	1a 95       	dec	r17
     976:	d1 f7       	brne	.-12     	; 0x96c <bme280_compensate_data+0x110>
     978:	10 2d       	mov	r17, r0
     97a:	ee 81       	ldd	r30, Y+6	; 0x06
     97c:	ff 81       	ldd	r31, Y+7	; 0x07
     97e:	a4 81       	ldd	r26, Z+4	; 0x04
     980:	b5 81       	ldd	r27, Z+5	; 0x05
     982:	a6 d5       	rcall	.+2892   	; 0x14d0 <__mulshisi3>
     984:	73 01       	movw	r14, r6
     986:	62 01       	movw	r12, r4
     988:	77 20       	and	r7, r7
     98a:	34 f4       	brge	.+12     	; 0x998 <bme280_compensate_data+0x13c>
     98c:	ff ef       	ldi	r31, 0xFF	; 255
     98e:	cf 0e       	add	r12, r31
     990:	f7 e0       	ldi	r31, 0x07	; 7
     992:	df 1e       	adc	r13, r31
     994:	e1 1c       	adc	r14, r1
     996:	f1 1c       	adc	r15, r1
     998:	0b 2e       	mov	r0, r27
     99a:	bb e0       	ldi	r27, 0x0B	; 11
     99c:	f5 94       	asr	r15
     99e:	e7 94       	ror	r14
     9a0:	d7 94       	ror	r13
     9a2:	c7 94       	ror	r12
     9a4:	ba 95       	dec	r27
     9a6:	d1 f7       	brne	.-12     	; 0x99c <bme280_compensate_data+0x140>
     9a8:	b0 2d       	mov	r27, r0
     9aa:	4b 01       	movw	r8, r22
     9ac:	5c 01       	movw	r10, r24
     9ae:	99 23       	and	r25, r25
     9b0:	34 f4       	brge	.+12     	; 0x9be <bme280_compensate_data+0x162>
     9b2:	2f ef       	ldi	r18, 0xFF	; 255
     9b4:	82 0e       	add	r8, r18
     9b6:	2f e3       	ldi	r18, 0x3F	; 63
     9b8:	92 1e       	adc	r9, r18
     9ba:	a1 1c       	adc	r10, r1
     9bc:	b1 1c       	adc	r11, r1
     9be:	b5 01       	movw	r22, r10
     9c0:	a4 01       	movw	r20, r8
     9c2:	03 2e       	mov	r0, r19
     9c4:	3e e0       	ldi	r19, 0x0E	; 14
     9c6:	75 95       	asr	r23
     9c8:	67 95       	ror	r22
     9ca:	57 95       	ror	r21
     9cc:	47 95       	ror	r20
     9ce:	3a 95       	dec	r19
     9d0:	d1 f7       	brne	.-12     	; 0x9c6 <bme280_compensate_data+0x16a>
     9d2:	30 2d       	mov	r19, r0
     9d4:	d7 01       	movw	r26, r14
     9d6:	c6 01       	movw	r24, r12
     9d8:	84 0f       	add	r24, r20
     9da:	95 1f       	adc	r25, r21
     9dc:	a6 1f       	adc	r26, r22
     9de:	b7 1f       	adc	r27, r23
     9e0:	ee 81       	ldd	r30, Y+6	; 0x06
     9e2:	ff 81       	ldd	r31, Y+7	; 0x07
     9e4:	81 a3       	std	Z+33, r24	; 0x21
     9e6:	92 a3       	std	Z+34, r25	; 0x22
     9e8:	a3 a3       	std	Z+35, r26	; 0x23
     9ea:	b4 a3       	std	Z+36, r27	; 0x24
     9ec:	ac 01       	movw	r20, r24
     9ee:	bd 01       	movw	r22, r26
     9f0:	44 0f       	add	r20, r20
     9f2:	55 1f       	adc	r21, r21
     9f4:	66 1f       	adc	r22, r22
     9f6:	77 1f       	adc	r23, r23
     9f8:	44 0f       	add	r20, r20
     9fa:	55 1f       	adc	r21, r21
     9fc:	66 1f       	adc	r22, r22
     9fe:	77 1f       	adc	r23, r23
     a00:	84 0f       	add	r24, r20
     a02:	95 1f       	adc	r25, r21
     a04:	a6 1f       	adc	r26, r22
     a06:	b7 1f       	adc	r27, r23
     a08:	80 58       	subi	r24, 0x80	; 128
     a0a:	9f 4f       	sbci	r25, 0xFF	; 255
     a0c:	af 4f       	sbci	r26, 0xFF	; 255
     a0e:	bf 4f       	sbci	r27, 0xFF	; 255
     a10:	ac 01       	movw	r20, r24
     a12:	bd 01       	movw	r22, r26
     a14:	bb 23       	and	r27, r27
     a16:	24 f4       	brge	.+8      	; 0xa20 <bme280_compensate_data+0x1c4>
     a18:	41 50       	subi	r20, 0x01	; 1
     a1a:	5f 4f       	sbci	r21, 0xFF	; 255
     a1c:	6f 4f       	sbci	r22, 0xFF	; 255
     a1e:	7f 4f       	sbci	r23, 0xFF	; 255
     a20:	bb 27       	eor	r27, r27
     a22:	77 fd       	sbrc	r23, 7
     a24:	ba 95       	dec	r27
     a26:	a7 2f       	mov	r26, r23
     a28:	96 2f       	mov	r25, r22
     a2a:	85 2f       	mov	r24, r21
     a2c:	85 33       	cpi	r24, 0x35	; 53
     a2e:	f1 e2       	ldi	r31, 0x21	; 33
     a30:	9f 07       	cpc	r25, r31
     a32:	a1 05       	cpc	r26, r1
     a34:	b1 05       	cpc	r27, r1
     a36:	24 f0       	brlt	.+8      	; 0xa40 <bme280_compensate_data+0x1e4>
     a38:	84 e3       	ldi	r24, 0x34	; 52
     a3a:	91 e2       	ldi	r25, 0x21	; 33
     a3c:	a0 e0       	ldi	r26, 0x00	; 0
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	80 36       	cpi	r24, 0x60	; 96
     a42:	20 ef       	ldi	r18, 0xF0	; 240
     a44:	92 07       	cpc	r25, r18
     a46:	2f ef       	ldi	r18, 0xFF	; 255
     a48:	a2 07       	cpc	r26, r18
     a4a:	b2 07       	cpc	r27, r18
     a4c:	24 f4       	brge	.+8      	; 0xa56 <bme280_compensate_data+0x1fa>
     a4e:	80 e6       	ldi	r24, 0x60	; 96
     a50:	90 ef       	ldi	r25, 0xF0	; 240
     a52:	af ef       	ldi	r26, 0xFF	; 255
     a54:	bf ef       	ldi	r27, 0xFF	; 255
     a56:	f1 01       	movw	r30, r2
     a58:	84 83       	std	Z+4, r24	; 0x04
     a5a:	95 83       	std	Z+5, r25	; 0x05
     a5c:	a6 83       	std	Z+6, r26	; 0x06
     a5e:	b7 83       	std	Z+7, r27	; 0x07
     a60:	f9 81       	ldd	r31, Y+1	; 0x01
     a62:	f0 ff       	sbrs	r31, 0
     a64:	e0 c1       	rjmp	.+960    	; 0xe26 <bme280_compensate_data+0x5ca>
     a66:	ae 81       	ldd	r26, Y+6	; 0x06
     a68:	bf 81       	ldd	r27, Y+7	; 0x07
     a6a:	91 96       	adiw	r26, 0x21	; 33
     a6c:	cd 90       	ld	r12, X+
     a6e:	dd 90       	ld	r13, X+
     a70:	ed 90       	ld	r14, X+
     a72:	fc 90       	ld	r15, X
     a74:	94 97       	sbiw	r26, 0x24	; 36
     a76:	ff 20       	and	r15, r15
     a78:	2c f4       	brge	.+10     	; 0xa84 <bme280_compensate_data+0x228>
     a7a:	bf ef       	ldi	r27, 0xFF	; 255
     a7c:	cb 1a       	sub	r12, r27
     a7e:	db 0a       	sbc	r13, r27
     a80:	eb 0a       	sbc	r14, r27
     a82:	fb 0a       	sbc	r15, r27
     a84:	f5 94       	asr	r15
     a86:	e7 94       	ror	r14
     a88:	d7 94       	ror	r13
     a8a:	c7 94       	ror	r12
     a8c:	ea ef       	ldi	r30, 0xFA	; 250
     a8e:	de 1a       	sub	r13, r30
     a90:	e1 08       	sbc	r14, r1
     a92:	f1 08       	sbc	r15, r1
     a94:	d7 01       	movw	r26, r14
     a96:	c6 01       	movw	r24, r12
     a98:	ff 20       	and	r15, r15
     a9a:	1c f4       	brge	.+6      	; 0xaa2 <bme280_compensate_data+0x246>
     a9c:	03 96       	adiw	r24, 0x03	; 3
     a9e:	a1 1d       	adc	r26, r1
     aa0:	b1 1d       	adc	r27, r1
     aa2:	bc 01       	movw	r22, r24
     aa4:	cd 01       	movw	r24, r26
     aa6:	95 95       	asr	r25
     aa8:	87 95       	ror	r24
     aaa:	77 95       	ror	r23
     aac:	67 95       	ror	r22
     aae:	95 95       	asr	r25
     ab0:	87 95       	ror	r24
     ab2:	77 95       	ror	r23
     ab4:	67 95       	ror	r22
     ab6:	9b 01       	movw	r18, r22
     ab8:	ac 01       	movw	r20, r24
     aba:	cf d4       	rcall	.+2462   	; 0x145a <__mulsi3>
     abc:	4b 01       	movw	r8, r22
     abe:	5c 01       	movw	r10, r24
     ac0:	ae 81       	ldd	r26, Y+6	; 0x06
     ac2:	bf 81       	ldd	r27, Y+7	; 0x07
     ac4:	50 96       	adiw	r26, 0x10	; 16
     ac6:	0d 90       	ld	r0, X+
     ac8:	bc 91       	ld	r27, X
     aca:	a0 2d       	mov	r26, r0
     acc:	b9 87       	std	Y+9, r27	; 0x09
     ace:	a8 87       	std	Y+8, r26	; 0x08
     ad0:	ee 81       	ldd	r30, Y+6	; 0x06
     ad2:	ff 81       	ldd	r31, Y+7	; 0x07
     ad4:	06 84       	ldd	r0, Z+14	; 0x0e
     ad6:	f7 85       	ldd	r31, Z+15	; 0x0f
     ad8:	e0 2d       	mov	r30, r0
     ada:	fb 83       	std	Y+3, r31	; 0x03
     adc:	ea 83       	std	Y+2, r30	; 0x02
     ade:	ae 81       	ldd	r26, Y+6	; 0x06
     ae0:	bf 81       	ldd	r27, Y+7	; 0x07
     ae2:	1c 96       	adiw	r26, 0x0c	; 12
     ae4:	0d 90       	ld	r0, X+
     ae6:	bc 91       	ld	r27, X
     ae8:	a0 2d       	mov	r26, r0
     aea:	bd 83       	std	Y+5, r27	; 0x05
     aec:	ac 83       	std	Y+4, r26	; 0x04
     aee:	ee 81       	ldd	r30, Y+6	; 0x06
     af0:	ff 81       	ldd	r31, Y+7	; 0x07
     af2:	22 85       	ldd	r18, Z+10	; 0x0a
     af4:	33 85       	ldd	r19, Z+11	; 0x0b
     af6:	44 27       	eor	r20, r20
     af8:	37 fd       	sbrc	r19, 7
     afa:	40 95       	com	r20
     afc:	54 2f       	mov	r21, r20
     afe:	dc 01       	movw	r26, r24
     b00:	cb 01       	movw	r24, r22
     b02:	bb 20       	and	r11, r11
     b04:	24 f4       	brge	.+8      	; 0xb0e <bme280_compensate_data+0x2b2>
     b06:	81 50       	subi	r24, 0x01	; 1
     b08:	90 4e       	sbci	r25, 0xE0	; 224
     b0a:	af 4f       	sbci	r26, 0xFF	; 255
     b0c:	bf 4f       	sbci	r27, 0xFF	; 255
     b0e:	bc 01       	movw	r22, r24
     b10:	cd 01       	movw	r24, r26
     b12:	05 2e       	mov	r0, r21
     b14:	5d e0       	ldi	r21, 0x0D	; 13
     b16:	95 95       	asr	r25
     b18:	87 95       	ror	r24
     b1a:	77 95       	ror	r23
     b1c:	67 95       	ror	r22
     b1e:	5a 95       	dec	r21
     b20:	d1 f7       	brne	.-12     	; 0xb16 <bme280_compensate_data+0x2ba>
     b22:	50 2d       	mov	r21, r0
     b24:	9a d4       	rcall	.+2356   	; 0x145a <__mulsi3>
     b26:	2b 01       	movw	r4, r22
     b28:	3c 01       	movw	r6, r24
     b2a:	99 23       	and	r25, r25
     b2c:	2c f4       	brge	.+10     	; 0xb38 <bme280_compensate_data+0x2dc>
     b2e:	f7 e0       	ldi	r31, 0x07	; 7
     b30:	4f 0e       	add	r4, r31
     b32:	51 1c       	adc	r5, r1
     b34:	61 1c       	adc	r6, r1
     b36:	71 1c       	adc	r7, r1
     b38:	68 94       	set
     b3a:	12 f8       	bld	r1, 2
     b3c:	75 94       	asr	r7
     b3e:	67 94       	ror	r6
     b40:	57 94       	ror	r5
     b42:	47 94       	ror	r4
     b44:	16 94       	lsr	r1
     b46:	d1 f7       	brne	.-12     	; 0xb3c <bme280_compensate_data+0x2e0>
     b48:	ee 81       	ldd	r30, Y+6	; 0x06
     b4a:	ff 81       	ldd	r31, Y+7	; 0x07
     b4c:	a0 85       	ldd	r26, Z+8	; 0x08
     b4e:	b1 85       	ldd	r27, Z+9	; 0x09
     b50:	a7 01       	movw	r20, r14
     b52:	96 01       	movw	r18, r12
     b54:	bd d4       	rcall	.+2426   	; 0x14d0 <__mulshisi3>
     b56:	9b 01       	movw	r18, r22
     b58:	ac 01       	movw	r20, r24
     b5a:	99 23       	and	r25, r25
     b5c:	24 f4       	brge	.+8      	; 0xb66 <bme280_compensate_data+0x30a>
     b5e:	2f 5f       	subi	r18, 0xFF	; 255
     b60:	3f 4f       	sbci	r19, 0xFF	; 255
     b62:	4f 4f       	sbci	r20, 0xFF	; 255
     b64:	5f 4f       	sbci	r21, 0xFF	; 255
     b66:	da 01       	movw	r26, r20
     b68:	c9 01       	movw	r24, r18
     b6a:	b5 95       	asr	r27
     b6c:	a7 95       	ror	r26
     b6e:	97 95       	ror	r25
     b70:	87 95       	ror	r24
     b72:	48 0e       	add	r4, r24
     b74:	59 1e       	adc	r5, r25
     b76:	6a 1e       	adc	r6, r26
     b78:	7b 1e       	adc	r7, r27
     b7a:	d3 01       	movw	r26, r6
     b7c:	c2 01       	movw	r24, r4
     b7e:	77 20       	and	r7, r7
     b80:	1c f4       	brge	.+6      	; 0xb88 <bme280_compensate_data+0x32c>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	ac 4f       	sbci	r26, 0xFC	; 252
     b86:	bf 4f       	sbci	r27, 0xFF	; 255
     b88:	07 2e       	mov	r0, r23
     b8a:	72 e1       	ldi	r23, 0x12	; 18
     b8c:	b5 95       	asr	r27
     b8e:	a7 95       	ror	r26
     b90:	97 95       	ror	r25
     b92:	87 95       	ror	r24
     b94:	7a 95       	dec	r23
     b96:	d1 f7       	brne	.-12     	; 0xb8c <bme280_compensate_data+0x330>
     b98:	70 2d       	mov	r23, r0
     b9a:	9c 01       	movw	r18, r24
     b9c:	ad 01       	movw	r20, r26
     b9e:	30 58       	subi	r19, 0x80	; 128
     ba0:	4f 4f       	sbci	r20, 0xFF	; 255
     ba2:	5f 4f       	sbci	r21, 0xFF	; 255
     ba4:	ee 81       	ldd	r30, Y+6	; 0x06
     ba6:	ff 81       	ldd	r31, Y+7	; 0x07
     ba8:	a6 81       	ldd	r26, Z+6	; 0x06
     baa:	b7 81       	ldd	r27, Z+7	; 0x07
     bac:	87 d4       	rcall	.+2318   	; 0x14bc <__muluhisi3>
     bae:	2b 01       	movw	r4, r22
     bb0:	3c 01       	movw	r6, r24
     bb2:	99 23       	and	r25, r25
     bb4:	34 f4       	brge	.+12     	; 0xbc2 <bme280_compensate_data+0x366>
     bb6:	ff ef       	ldi	r31, 0xFF	; 255
     bb8:	4f 0e       	add	r4, r31
     bba:	ff e7       	ldi	r31, 0x7F	; 127
     bbc:	5f 1e       	adc	r5, r31
     bbe:	61 1c       	adc	r6, r1
     bc0:	71 1c       	adc	r7, r1
     bc2:	03 2e       	mov	r0, r19
     bc4:	3f e0       	ldi	r19, 0x0F	; 15
     bc6:	75 94       	asr	r7
     bc8:	67 94       	ror	r6
     bca:	57 94       	ror	r5
     bcc:	47 94       	ror	r4
     bce:	3a 95       	dec	r19
     bd0:	d1 f7       	brne	.-12     	; 0xbc6 <bme280_compensate_data+0x36a>
     bd2:	30 2d       	mov	r19, r0
     bd4:	41 14       	cp	r4, r1
     bd6:	51 04       	cpc	r5, r1
     bd8:	61 04       	cpc	r6, r1
     bda:	71 04       	cpc	r7, r1
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <bme280_compensate_data+0x384>
     bde:	15 c1       	rjmp	.+554    	; 0xe0a <bme280_compensate_data+0x5ae>
     be0:	d5 01       	movw	r26, r10
     be2:	c4 01       	movw	r24, r8
     be4:	bb 20       	and	r11, r11
     be6:	24 f4       	brge	.+8      	; 0xbf0 <bme280_compensate_data+0x394>
     be8:	81 50       	subi	r24, 0x01	; 1
     bea:	98 4f       	sbci	r25, 0xF8	; 248
     bec:	af 4f       	sbci	r26, 0xFF	; 255
     bee:	bf 4f       	sbci	r27, 0xFF	; 255
     bf0:	9c 01       	movw	r18, r24
     bf2:	ad 01       	movw	r20, r26
     bf4:	01 2e       	mov	r0, r17
     bf6:	1b e0       	ldi	r17, 0x0B	; 11
     bf8:	55 95       	asr	r21
     bfa:	47 95       	ror	r20
     bfc:	37 95       	ror	r19
     bfe:	27 95       	ror	r18
     c00:	1a 95       	dec	r17
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <bme280_compensate_data+0x39c>
     c04:	10 2d       	mov	r17, r0
     c06:	a8 85       	ldd	r26, Y+8	; 0x08
     c08:	b9 85       	ldd	r27, Y+9	; 0x09
     c0a:	62 d4       	rcall	.+2244   	; 0x14d0 <__mulshisi3>
     c0c:	4b 01       	movw	r8, r22
     c0e:	5c 01       	movw	r10, r24
     c10:	aa 81       	ldd	r26, Y+2	; 0x02
     c12:	bb 81       	ldd	r27, Y+3	; 0x03
     c14:	a7 01       	movw	r20, r14
     c16:	96 01       	movw	r18, r12
     c18:	5b d4       	rcall	.+2230   	; 0x14d0 <__mulshisi3>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	aa 1f       	adc	r26, r26
     c24:	bb 1f       	adc	r27, r27
     c26:	88 0e       	add	r8, r24
     c28:	99 1e       	adc	r9, r25
     c2a:	aa 1e       	adc	r10, r26
     c2c:	bb 1e       	adc	r11, r27
     c2e:	d5 01       	movw	r26, r10
     c30:	c4 01       	movw	r24, r8
     c32:	bb 20       	and	r11, r11
     c34:	1c f4       	brge	.+6      	; 0xc3c <bme280_compensate_data+0x3e0>
     c36:	03 96       	adiw	r24, 0x03	; 3
     c38:	a1 1d       	adc	r26, r1
     c3a:	b1 1d       	adc	r27, r1
     c3c:	b5 95       	asr	r27
     c3e:	a7 95       	ror	r26
     c40:	97 95       	ror	r25
     c42:	87 95       	ror	r24
     c44:	b5 95       	asr	r27
     c46:	a7 95       	ror	r26
     c48:	97 95       	ror	r25
     c4a:	87 95       	ror	r24
     c4c:	f8 01       	movw	r30, r16
     c4e:	40 81       	ld	r20, Z
     c50:	51 81       	ldd	r21, Z+1	; 0x01
     c52:	62 81       	ldd	r22, Z+2	; 0x02
     c54:	73 81       	ldd	r23, Z+3	; 0x03
     c56:	c1 2c       	mov	r12, r1
     c58:	d1 2c       	mov	r13, r1
     c5a:	76 01       	movw	r14, r12
     c5c:	68 94       	set
     c5e:	e4 f8       	bld	r14, 4
     c60:	c4 1a       	sub	r12, r20
     c62:	d5 0a       	sbc	r13, r21
     c64:	e6 0a       	sbc	r14, r22
     c66:	f7 0a       	sbc	r15, r23
     c68:	ec 81       	ldd	r30, Y+4	; 0x04
     c6a:	fd 81       	ldd	r31, Y+5	; 0x05
     c6c:	af 01       	movw	r20, r30
     c6e:	66 27       	eor	r22, r22
     c70:	57 fd       	sbrc	r21, 7
     c72:	60 95       	com	r22
     c74:	76 2f       	mov	r23, r22
     c76:	ba 01       	movw	r22, r20
     c78:	55 27       	eor	r21, r21
     c7a:	44 27       	eor	r20, r20
     c7c:	84 0f       	add	r24, r20
     c7e:	95 1f       	adc	r25, r21
     c80:	a6 1f       	adc	r26, r22
     c82:	b7 1f       	adc	r27, r23
     c84:	ac 01       	movw	r20, r24
     c86:	bd 01       	movw	r22, r26
     c88:	bb 23       	and	r27, r27
     c8a:	24 f4       	brge	.+8      	; 0xc94 <bme280_compensate_data+0x438>
     c8c:	41 50       	subi	r20, 0x01	; 1
     c8e:	50 4f       	sbci	r21, 0xF0	; 240
     c90:	6f 4f       	sbci	r22, 0xFF	; 255
     c92:	7f 4f       	sbci	r23, 0xFF	; 255
     c94:	db 01       	movw	r26, r22
     c96:	ca 01       	movw	r24, r20
     c98:	07 2e       	mov	r0, r23
     c9a:	7c e0       	ldi	r23, 0x0C	; 12
     c9c:	b5 95       	asr	r27
     c9e:	a7 95       	ror	r26
     ca0:	97 95       	ror	r25
     ca2:	87 95       	ror	r24
     ca4:	7a 95       	dec	r23
     ca6:	d1 f7       	brne	.-12     	; 0xc9c <bme280_compensate_data+0x440>
     ca8:	70 2d       	mov	r23, r0
     caa:	a7 01       	movw	r20, r14
     cac:	96 01       	movw	r18, r12
     cae:	28 1b       	sub	r18, r24
     cb0:	39 0b       	sbc	r19, r25
     cb2:	4a 0b       	sbc	r20, r26
     cb4:	5b 0b       	sbc	r21, r27
     cb6:	a5 e3       	ldi	r26, 0x35	; 53
     cb8:	bc e0       	ldi	r27, 0x0C	; 12
     cba:	00 d4       	rcall	.+2048   	; 0x14bc <__muluhisi3>
     cbc:	99 23       	and	r25, r25
     cbe:	54 f0       	brlt	.+20     	; 0xcd4 <bme280_compensate_data+0x478>
     cc0:	66 0f       	add	r22, r22
     cc2:	77 1f       	adc	r23, r23
     cc4:	88 1f       	adc	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	a3 01       	movw	r20, r6
     cca:	92 01       	movw	r18, r4
     ccc:	d5 d3       	rcall	.+1962   	; 0x1478 <__udivmodsi4>
     cce:	69 01       	movw	r12, r18
     cd0:	7a 01       	movw	r14, r20
     cd2:	09 c0       	rjmp	.+18     	; 0xce6 <bme280_compensate_data+0x48a>
     cd4:	a3 01       	movw	r20, r6
     cd6:	92 01       	movw	r18, r4
     cd8:	cf d3       	rcall	.+1950   	; 0x1478 <__udivmodsi4>
     cda:	69 01       	movw	r12, r18
     cdc:	7a 01       	movw	r14, r20
     cde:	cc 0c       	add	r12, r12
     ce0:	dd 1c       	adc	r13, r13
     ce2:	ee 1c       	adc	r14, r14
     ce4:	ff 1c       	adc	r15, r15
     ce6:	ae 81       	ldd	r26, Y+6	; 0x06
     ce8:	bf 81       	ldd	r27, Y+7	; 0x07
     cea:	56 96       	adiw	r26, 0x16	; 22
     cec:	ed 91       	ld	r30, X+
     cee:	fc 91       	ld	r31, X
     cf0:	57 97       	sbiw	r26, 0x17	; 23
     cf2:	c7 01       	movw	r24, r14
     cf4:	b6 01       	movw	r22, r12
     cf6:	68 94       	set
     cf8:	12 f8       	bld	r1, 2
     cfa:	96 95       	lsr	r25
     cfc:	87 95       	ror	r24
     cfe:	77 95       	ror	r23
     d00:	67 95       	ror	r22
     d02:	16 94       	lsr	r1
     d04:	d1 f7       	brne	.-12     	; 0xcfa <bme280_compensate_data+0x49e>
     d06:	9b 01       	movw	r18, r22
     d08:	ac 01       	movw	r20, r24
     d0a:	a7 d3       	rcall	.+1870   	; 0x145a <__mulsi3>
     d0c:	9b 01       	movw	r18, r22
     d0e:	ac 01       	movw	r20, r24
     d10:	01 2e       	mov	r0, r17
     d12:	1d e0       	ldi	r17, 0x0D	; 13
     d14:	56 95       	lsr	r21
     d16:	47 95       	ror	r20
     d18:	37 95       	ror	r19
     d1a:	27 95       	ror	r18
     d1c:	1a 95       	dec	r17
     d1e:	d1 f7       	brne	.-12     	; 0xd14 <bme280_compensate_data+0x4b8>
     d20:	10 2d       	mov	r17, r0
     d22:	df 01       	movw	r26, r30
     d24:	d5 d3       	rcall	.+1962   	; 0x14d0 <__mulshisi3>
     d26:	4b 01       	movw	r8, r22
     d28:	5c 01       	movw	r10, r24
     d2a:	99 23       	and	r25, r25
     d2c:	34 f4       	brge	.+12     	; 0xd3a <bme280_compensate_data+0x4de>
     d2e:	bf ef       	ldi	r27, 0xFF	; 255
     d30:	8b 0e       	add	r8, r27
     d32:	bf e0       	ldi	r27, 0x0F	; 15
     d34:	9b 1e       	adc	r9, r27
     d36:	a1 1c       	adc	r10, r1
     d38:	b1 1c       	adc	r11, r1
     d3a:	07 2e       	mov	r0, r23
     d3c:	7c e0       	ldi	r23, 0x0C	; 12
     d3e:	b5 94       	asr	r11
     d40:	a7 94       	ror	r10
     d42:	97 94       	ror	r9
     d44:	87 94       	ror	r8
     d46:	7a 95       	dec	r23
     d48:	d1 f7       	brne	.-12     	; 0xd3e <bme280_compensate_data+0x4e2>
     d4a:	70 2d       	mov	r23, r0
     d4c:	ee 81       	ldd	r30, Y+6	; 0x06
     d4e:	ff 81       	ldd	r31, Y+7	; 0x07
     d50:	a4 89       	ldd	r26, Z+20	; 0x14
     d52:	b5 89       	ldd	r27, Z+21	; 0x15
     d54:	a7 01       	movw	r20, r14
     d56:	96 01       	movw	r18, r12
     d58:	56 95       	lsr	r21
     d5a:	47 95       	ror	r20
     d5c:	37 95       	ror	r19
     d5e:	27 95       	ror	r18
     d60:	56 95       	lsr	r21
     d62:	47 95       	ror	r20
     d64:	37 95       	ror	r19
     d66:	27 95       	ror	r18
     d68:	b3 d3       	rcall	.+1894   	; 0x14d0 <__mulshisi3>
     d6a:	2b 01       	movw	r4, r22
     d6c:	3c 01       	movw	r6, r24
     d6e:	99 23       	and	r25, r25
     d70:	34 f4       	brge	.+12     	; 0xd7e <bme280_compensate_data+0x522>
     d72:	ff ef       	ldi	r31, 0xFF	; 255
     d74:	4f 0e       	add	r4, r31
     d76:	ff e1       	ldi	r31, 0x1F	; 31
     d78:	5f 1e       	adc	r5, r31
     d7a:	61 1c       	adc	r6, r1
     d7c:	71 1c       	adc	r7, r1
     d7e:	d3 01       	movw	r26, r6
     d80:	c2 01       	movw	r24, r4
     d82:	07 2e       	mov	r0, r23
     d84:	7d e0       	ldi	r23, 0x0D	; 13
     d86:	b5 95       	asr	r27
     d88:	a7 95       	ror	r26
     d8a:	97 95       	ror	r25
     d8c:	87 95       	ror	r24
     d8e:	7a 95       	dec	r23
     d90:	d1 f7       	brne	.-12     	; 0xd86 <bme280_compensate_data+0x52a>
     d92:	70 2d       	mov	r23, r0
     d94:	88 0e       	add	r8, r24
     d96:	99 1e       	adc	r9, r25
     d98:	aa 1e       	adc	r10, r26
     d9a:	bb 1e       	adc	r11, r27
     d9c:	ae 81       	ldd	r26, Y+6	; 0x06
     d9e:	bf 81       	ldd	r27, Y+7	; 0x07
     da0:	52 96       	adiw	r26, 0x12	; 18
     da2:	4d 91       	ld	r20, X+
     da4:	5c 91       	ld	r21, X
     da6:	53 97       	sbiw	r26, 0x13	; 19
     da8:	66 27       	eor	r22, r22
     daa:	57 fd       	sbrc	r21, 7
     dac:	60 95       	com	r22
     dae:	76 2f       	mov	r23, r22
     db0:	84 0e       	add	r8, r20
     db2:	95 1e       	adc	r9, r21
     db4:	a6 1e       	adc	r10, r22
     db6:	b7 1e       	adc	r11, r23
     db8:	d5 01       	movw	r26, r10
     dba:	c4 01       	movw	r24, r8
     dbc:	bb 20       	and	r11, r11
     dbe:	1c f4       	brge	.+6      	; 0xdc6 <bme280_compensate_data+0x56a>
     dc0:	0f 96       	adiw	r24, 0x0f	; 15
     dc2:	a1 1d       	adc	r26, r1
     dc4:	b1 1d       	adc	r27, r1
     dc6:	68 94       	set
     dc8:	13 f8       	bld	r1, 3
     dca:	b5 95       	asr	r27
     dcc:	a7 95       	ror	r26
     dce:	97 95       	ror	r25
     dd0:	87 95       	ror	r24
     dd2:	16 94       	lsr	r1
     dd4:	d1 f7       	brne	.-12     	; 0xdca <bme280_compensate_data+0x56e>
     dd6:	c8 0e       	add	r12, r24
     dd8:	d9 1e       	adc	r13, r25
     dda:	ea 1e       	adc	r14, r26
     ddc:	fb 1e       	adc	r15, r27
     dde:	b0 e3       	ldi	r27, 0x30	; 48
     de0:	cb 16       	cp	r12, r27
     de2:	b5 e7       	ldi	r27, 0x75	; 117
     de4:	db 06       	cpc	r13, r27
     de6:	e1 04       	cpc	r14, r1
     de8:	f1 04       	cpc	r15, r1
     dea:	a0 f0       	brcs	.+40     	; 0xe14 <bme280_compensate_data+0x5b8>
     dec:	d7 01       	movw	r26, r14
     dee:	c6 01       	movw	r24, r12
     df0:	e1 eb       	ldi	r30, 0xB1	; 177
     df2:	ce 16       	cp	r12, r30
     df4:	ed ea       	ldi	r30, 0xAD	; 173
     df6:	de 06       	cpc	r13, r30
     df8:	e1 e0       	ldi	r30, 0x01	; 1
     dfa:	ee 06       	cpc	r14, r30
     dfc:	f1 04       	cpc	r15, r1
     dfe:	70 f0       	brcs	.+28     	; 0xe1c <bme280_compensate_data+0x5c0>
     e00:	80 eb       	ldi	r24, 0xB0	; 176
     e02:	9d ea       	ldi	r25, 0xAD	; 173
     e04:	a1 e0       	ldi	r26, 0x01	; 1
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	09 c0       	rjmp	.+18     	; 0xe1c <bme280_compensate_data+0x5c0>
     e0a:	80 e3       	ldi	r24, 0x30	; 48
     e0c:	95 e7       	ldi	r25, 0x75	; 117
     e0e:	a0 e0       	ldi	r26, 0x00	; 0
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	04 c0       	rjmp	.+8      	; 0xe1c <bme280_compensate_data+0x5c0>
     e14:	80 e3       	ldi	r24, 0x30	; 48
     e16:	95 e7       	ldi	r25, 0x75	; 117
     e18:	a0 e0       	ldi	r26, 0x00	; 0
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	f1 01       	movw	r30, r2
     e1e:	80 83       	st	Z, r24
     e20:	91 83       	std	Z+1, r25	; 0x01
     e22:	a2 83       	std	Z+2, r26	; 0x02
     e24:	b3 83       	std	Z+3, r27	; 0x03
     e26:	f9 81       	ldd	r31, Y+1	; 0x01
     e28:	f2 ff       	sbrs	r31, 2
     e2a:	52 c1       	rjmp	.+676    	; 0x10d0 <bme280_compensate_data+0x874>
     e2c:	ae 81       	ldd	r26, Y+6	; 0x06
     e2e:	bf 81       	ldd	r27, Y+7	; 0x07
     e30:	91 96       	adiw	r26, 0x21	; 33
     e32:	cd 90       	ld	r12, X+
     e34:	dd 90       	ld	r13, X+
     e36:	ed 90       	ld	r14, X+
     e38:	fc 90       	ld	r15, X
     e3a:	94 97       	sbiw	r26, 0x24	; 36
     e3c:	bc e2       	ldi	r27, 0x2C	; 44
     e3e:	db 1a       	sub	r13, r27
     e40:	b1 e0       	ldi	r27, 0x01	; 1
     e42:	eb 0a       	sbc	r14, r27
     e44:	f1 08       	sbc	r15, r1
     e46:	f8 01       	movw	r30, r16
     e48:	80 84       	ldd	r8, Z+8	; 0x08
     e4a:	91 84       	ldd	r9, Z+9	; 0x09
     e4c:	a2 84       	ldd	r10, Z+10	; 0x0a
     e4e:	b3 84       	ldd	r11, Z+11	; 0x0b
     e50:	07 2e       	mov	r0, r23
     e52:	7e e0       	ldi	r23, 0x0E	; 14
     e54:	88 0c       	add	r8, r8
     e56:	99 1c       	adc	r9, r9
     e58:	aa 1c       	adc	r10, r10
     e5a:	bb 1c       	adc	r11, r11
     e5c:	7a 95       	dec	r23
     e5e:	d1 f7       	brne	.-12     	; 0xe54 <bme280_compensate_data+0x5f8>
     e60:	70 2d       	mov	r23, r0
     e62:	ae 81       	ldd	r26, Y+6	; 0x06
     e64:	bf 81       	ldd	r27, Y+7	; 0x07
     e66:	5c 96       	adiw	r26, 0x1c	; 28
     e68:	4d 91       	ld	r20, X+
     e6a:	5c 91       	ld	r21, X
     e6c:	5d 97       	sbiw	r26, 0x1d	; 29
     e6e:	66 27       	eor	r22, r22
     e70:	57 fd       	sbrc	r21, 7
     e72:	60 95       	com	r22
     e74:	76 2f       	mov	r23, r22
     e76:	03 2e       	mov	r0, r19
     e78:	34 e1       	ldi	r19, 0x14	; 20
     e7a:	44 0f       	add	r20, r20
     e7c:	55 1f       	adc	r21, r21
     e7e:	66 1f       	adc	r22, r22
     e80:	77 1f       	adc	r23, r23
     e82:	3a 95       	dec	r19
     e84:	d1 f7       	brne	.-12     	; 0xe7a <bme280_compensate_data+0x61e>
     e86:	30 2d       	mov	r19, r0
     e88:	84 1a       	sub	r8, r20
     e8a:	95 0a       	sbc	r9, r21
     e8c:	a6 0a       	sbc	r10, r22
     e8e:	b7 0a       	sbc	r11, r23
     e90:	5e 96       	adiw	r26, 0x1e	; 30
     e92:	0d 90       	ld	r0, X+
     e94:	bc 91       	ld	r27, X
     e96:	a0 2d       	mov	r26, r0
     e98:	a7 01       	movw	r20, r14
     e9a:	96 01       	movw	r18, r12
     e9c:	19 d3       	rcall	.+1586   	; 0x14d0 <__mulshisi3>
     e9e:	a5 01       	movw	r20, r10
     ea0:	94 01       	movw	r18, r8
     ea2:	26 1b       	sub	r18, r22
     ea4:	37 0b       	sbc	r19, r23
     ea6:	48 0b       	sbc	r20, r24
     ea8:	59 0b       	sbc	r21, r25
     eaa:	da 01       	movw	r26, r20
     eac:	c9 01       	movw	r24, r18
     eae:	90 5c       	subi	r25, 0xC0	; 192
     eb0:	af 4f       	sbci	r26, 0xFF	; 255
     eb2:	bf 4f       	sbci	r27, 0xFF	; 255
     eb4:	4c 01       	movw	r8, r24
     eb6:	5d 01       	movw	r10, r26
     eb8:	bb 23       	and	r27, r27
     eba:	34 f4       	brge	.+12     	; 0xec8 <bme280_compensate_data+0x66c>
     ebc:	3f ef       	ldi	r19, 0xFF	; 255
     ebe:	83 0e       	add	r8, r19
     ec0:	3f e7       	ldi	r19, 0x7F	; 127
     ec2:	93 1e       	adc	r9, r19
     ec4:	a1 1c       	adc	r10, r1
     ec6:	b1 1c       	adc	r11, r1
     ec8:	07 2e       	mov	r0, r23
     eca:	7f e0       	ldi	r23, 0x0F	; 15
     ecc:	b5 94       	asr	r11
     ece:	a7 94       	ror	r10
     ed0:	97 94       	ror	r9
     ed2:	87 94       	ror	r8
     ed4:	7a 95       	dec	r23
     ed6:	d1 f7       	brne	.-12     	; 0xecc <bme280_compensate_data+0x670>
     ed8:	70 2d       	mov	r23, r0
     eda:	ee 81       	ldd	r30, Y+6	; 0x06
     edc:	ff 81       	ldd	r31, Y+7	; 0x07
     ede:	a0 a1       	ldd	r26, Z+32	; 0x20
     ee0:	bb 27       	eor	r27, r27
     ee2:	a7 fd       	sbrc	r26, 7
     ee4:	b0 95       	com	r27
     ee6:	a7 01       	movw	r20, r14
     ee8:	96 01       	movw	r18, r12
     eea:	f2 d2       	rcall	.+1508   	; 0x14d0 <__mulshisi3>
     eec:	2b 01       	movw	r4, r22
     eee:	3c 01       	movw	r6, r24
     ef0:	99 23       	and	r25, r25
     ef2:	34 f4       	brge	.+12     	; 0xf00 <bme280_compensate_data+0x6a4>
     ef4:	ff ef       	ldi	r31, 0xFF	; 255
     ef6:	4f 0e       	add	r4, r31
     ef8:	f3 e0       	ldi	r31, 0x03	; 3
     efa:	5f 1e       	adc	r5, r31
     efc:	61 1c       	adc	r6, r1
     efe:	71 1c       	adc	r7, r1
     f00:	03 2e       	mov	r0, r19
     f02:	3a e0       	ldi	r19, 0x0A	; 10
     f04:	75 94       	asr	r7
     f06:	67 94       	ror	r6
     f08:	57 94       	ror	r5
     f0a:	47 94       	ror	r4
     f0c:	3a 95       	dec	r19
     f0e:	d1 f7       	brne	.-12     	; 0xf04 <bme280_compensate_data+0x6a8>
     f10:	30 2d       	mov	r19, r0
     f12:	ee 81       	ldd	r30, Y+6	; 0x06
     f14:	ff 81       	ldd	r31, Y+7	; 0x07
     f16:	a3 8d       	ldd	r26, Z+27	; 0x1b
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	a7 01       	movw	r20, r14
     f1c:	96 01       	movw	r18, r12
     f1e:	ce d2       	rcall	.+1436   	; 0x14bc <__muluhisi3>
     f20:	6b 01       	movw	r12, r22
     f22:	7c 01       	movw	r14, r24
     f24:	99 23       	and	r25, r25
     f26:	34 f4       	brge	.+12     	; 0xf34 <bme280_compensate_data+0x6d8>
     f28:	ff ef       	ldi	r31, 0xFF	; 255
     f2a:	cf 0e       	add	r12, r31
     f2c:	f7 e0       	ldi	r31, 0x07	; 7
     f2e:	df 1e       	adc	r13, r31
     f30:	e1 1c       	adc	r14, r1
     f32:	f1 1c       	adc	r15, r1
     f34:	d7 01       	movw	r26, r14
     f36:	c6 01       	movw	r24, r12
     f38:	07 2e       	mov	r0, r23
     f3a:	7b e0       	ldi	r23, 0x0B	; 11
     f3c:	b5 95       	asr	r27
     f3e:	a7 95       	ror	r26
     f40:	97 95       	ror	r25
     f42:	87 95       	ror	r24
     f44:	7a 95       	dec	r23
     f46:	d1 f7       	brne	.-12     	; 0xf3c <bme280_compensate_data+0x6e0>
     f48:	70 2d       	mov	r23, r0
     f4a:	bc 01       	movw	r22, r24
     f4c:	cd 01       	movw	r24, r26
     f4e:	70 58       	subi	r23, 0x80	; 128
     f50:	8f 4f       	sbci	r24, 0xFF	; 255
     f52:	9f 4f       	sbci	r25, 0xFF	; 255
     f54:	a3 01       	movw	r20, r6
     f56:	92 01       	movw	r18, r4
     f58:	80 d2       	rcall	.+1280   	; 0x145a <__mulsi3>
     f5a:	6b 01       	movw	r12, r22
     f5c:	7c 01       	movw	r14, r24
     f5e:	99 23       	and	r25, r25
     f60:	34 f4       	brge	.+12     	; 0xf6e <bme280_compensate_data+0x712>
     f62:	2f ef       	ldi	r18, 0xFF	; 255
     f64:	c2 0e       	add	r12, r18
     f66:	23 e0       	ldi	r18, 0x03	; 3
     f68:	d2 1e       	adc	r13, r18
     f6a:	e1 1c       	adc	r14, r1
     f6c:	f1 1c       	adc	r15, r1
     f6e:	d7 01       	movw	r26, r14
     f70:	c6 01       	movw	r24, r12
     f72:	07 2e       	mov	r0, r23
     f74:	7a e0       	ldi	r23, 0x0A	; 10
     f76:	b5 95       	asr	r27
     f78:	a7 95       	ror	r26
     f7a:	97 95       	ror	r25
     f7c:	87 95       	ror	r24
     f7e:	7a 95       	dec	r23
     f80:	d1 f7       	brne	.-12     	; 0xf76 <bme280_compensate_data+0x71a>
     f82:	70 2d       	mov	r23, r0
     f84:	9c 01       	movw	r18, r24
     f86:	ad 01       	movw	r20, r26
     f88:	40 5e       	subi	r20, 0xE0	; 224
     f8a:	5f 4f       	sbci	r21, 0xFF	; 255
     f8c:	ee 81       	ldd	r30, Y+6	; 0x06
     f8e:	ff 81       	ldd	r31, Y+7	; 0x07
     f90:	a1 8d       	ldd	r26, Z+25	; 0x19
     f92:	b2 8d       	ldd	r27, Z+26	; 0x1a
     f94:	9d d2       	rcall	.+1338   	; 0x14d0 <__mulshisi3>
     f96:	6b 01       	movw	r12, r22
     f98:	7c 01       	movw	r14, r24
     f9a:	f0 e2       	ldi	r31, 0x20	; 32
     f9c:	df 0e       	add	r13, r31
     f9e:	e1 1c       	adc	r14, r1
     fa0:	f1 1c       	adc	r15, r1
     fa2:	d7 01       	movw	r26, r14
     fa4:	c6 01       	movw	r24, r12
     fa6:	ff 20       	and	r15, r15
     fa8:	24 f4       	brge	.+8      	; 0xfb2 <bme280_compensate_data+0x756>
     faa:	81 50       	subi	r24, 0x01	; 1
     fac:	90 4c       	sbci	r25, 0xC0	; 192
     fae:	af 4f       	sbci	r26, 0xFF	; 255
     fb0:	bf 4f       	sbci	r27, 0xFF	; 255
     fb2:	bc 01       	movw	r22, r24
     fb4:	cd 01       	movw	r24, r26
     fb6:	05 2e       	mov	r0, r21
     fb8:	5e e0       	ldi	r21, 0x0E	; 14
     fba:	95 95       	asr	r25
     fbc:	87 95       	ror	r24
     fbe:	77 95       	ror	r23
     fc0:	67 95       	ror	r22
     fc2:	5a 95       	dec	r21
     fc4:	d1 f7       	brne	.-12     	; 0xfba <bme280_compensate_data+0x75e>
     fc6:	50 2d       	mov	r21, r0
     fc8:	a5 01       	movw	r20, r10
     fca:	94 01       	movw	r18, r8
     fcc:	46 d2       	rcall	.+1164   	; 0x145a <__mulsi3>
     fce:	6b 01       	movw	r12, r22
     fd0:	7c 01       	movw	r14, r24
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	ff 20       	and	r15, r15
     fd8:	24 f4       	brge	.+8      	; 0xfe2 <bme280_compensate_data+0x786>
     fda:	81 50       	subi	r24, 0x01	; 1
     fdc:	90 48       	sbci	r25, 0x80	; 128
     fde:	af 4f       	sbci	r26, 0xFF	; 255
     fe0:	bf 4f       	sbci	r27, 0xFF	; 255
     fe2:	bc 01       	movw	r22, r24
     fe4:	cd 01       	movw	r24, r26
     fe6:	05 2e       	mov	r0, r21
     fe8:	5f e0       	ldi	r21, 0x0F	; 15
     fea:	95 95       	asr	r25
     fec:	87 95       	ror	r24
     fee:	77 95       	ror	r23
     ff0:	67 95       	ror	r22
     ff2:	5a 95       	dec	r21
     ff4:	d1 f7       	brne	.-12     	; 0xfea <bme280_compensate_data+0x78e>
     ff6:	50 2d       	mov	r21, r0
     ff8:	9b 01       	movw	r18, r22
     ffa:	ac 01       	movw	r20, r24
     ffc:	2e d2       	rcall	.+1116   	; 0x145a <__mulsi3>
     ffe:	8b 01       	movw	r16, r22
    1000:	9c 01       	movw	r18, r24
    1002:	99 23       	and	r25, r25
    1004:	24 f4       	brge	.+8      	; 0x100e <bme280_compensate_data+0x7b2>
    1006:	01 58       	subi	r16, 0x81	; 129
    1008:	1f 4f       	sbci	r17, 0xFF	; 255
    100a:	2f 4f       	sbci	r18, 0xFF	; 255
    100c:	3f 4f       	sbci	r19, 0xFF	; 255
    100e:	a9 01       	movw	r20, r18
    1010:	98 01       	movw	r18, r16
    1012:	68 94       	set
    1014:	16 f8       	bld	r1, 6
    1016:	55 95       	asr	r21
    1018:	47 95       	ror	r20
    101a:	37 95       	ror	r19
    101c:	27 95       	ror	r18
    101e:	16 94       	lsr	r1
    1020:	d1 f7       	brne	.-12     	; 0x1016 <bme280_compensate_data+0x7ba>
    1022:	ee 81       	ldd	r30, Y+6	; 0x06
    1024:	ff 81       	ldd	r31, Y+7	; 0x07
    1026:	a0 8d       	ldd	r26, Z+24	; 0x18
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	48 d2       	rcall	.+1168   	; 0x14bc <__muluhisi3>
    102c:	4b 01       	movw	r8, r22
    102e:	5c 01       	movw	r10, r24
    1030:	99 23       	and	r25, r25
    1032:	2c f4       	brge	.+10     	; 0x103e <bme280_compensate_data+0x7e2>
    1034:	ff e0       	ldi	r31, 0x0F	; 15
    1036:	8f 0e       	add	r8, r31
    1038:	91 1c       	adc	r9, r1
    103a:	a1 1c       	adc	r10, r1
    103c:	b1 1c       	adc	r11, r1
    103e:	d5 01       	movw	r26, r10
    1040:	c4 01       	movw	r24, r8
    1042:	68 94       	set
    1044:	13 f8       	bld	r1, 3
    1046:	b5 95       	asr	r27
    1048:	a7 95       	ror	r26
    104a:	97 95       	ror	r25
    104c:	87 95       	ror	r24
    104e:	16 94       	lsr	r1
    1050:	d1 f7       	brne	.-12     	; 0x1046 <bme280_compensate_data+0x7ea>
    1052:	c8 1a       	sub	r12, r24
    1054:	d9 0a       	sbc	r13, r25
    1056:	ea 0a       	sbc	r14, r26
    1058:	fb 0a       	sbc	r15, r27
    105a:	1a f4       	brpl	.+6      	; 0x1062 <bme280_compensate_data+0x806>
    105c:	c1 2c       	mov	r12, r1
    105e:	d1 2c       	mov	r13, r1
    1060:	76 01       	movw	r14, r12
    1062:	21 e0       	ldi	r18, 0x01	; 1
    1064:	c2 16       	cp	r12, r18
    1066:	d1 04       	cpc	r13, r1
    1068:	e1 04       	cpc	r14, r1
    106a:	29 e1       	ldi	r18, 0x19	; 25
    106c:	f2 06       	cpc	r15, r18
    106e:	3c f0       	brlt	.+14     	; 0x107e <bme280_compensate_data+0x822>
    1070:	0f 2e       	mov	r0, r31
    1072:	c1 2c       	mov	r12, r1
    1074:	d1 2c       	mov	r13, r1
    1076:	e1 2c       	mov	r14, r1
    1078:	f9 e1       	ldi	r31, 0x19	; 25
    107a:	ff 2e       	mov	r15, r31
    107c:	f0 2d       	mov	r31, r0
    107e:	d7 01       	movw	r26, r14
    1080:	c6 01       	movw	r24, r12
    1082:	ff 20       	and	r15, r15
    1084:	24 f4       	brge	.+8      	; 0x108e <bme280_compensate_data+0x832>
    1086:	81 50       	subi	r24, 0x01	; 1
    1088:	90 4f       	sbci	r25, 0xF0	; 240
    108a:	af 4f       	sbci	r26, 0xFF	; 255
    108c:	bf 4f       	sbci	r27, 0xFF	; 255
    108e:	07 2e       	mov	r0, r23
    1090:	7c e0       	ldi	r23, 0x0C	; 12
    1092:	b5 95       	asr	r27
    1094:	a7 95       	ror	r26
    1096:	97 95       	ror	r25
    1098:	87 95       	ror	r24
    109a:	7a 95       	dec	r23
    109c:	d1 f7       	brne	.-12     	; 0x1092 <bme280_compensate_data+0x836>
    109e:	70 2d       	mov	r23, r0
    10a0:	81 30       	cpi	r24, 0x01	; 1
    10a2:	30 e9       	ldi	r19, 0x90	; 144
    10a4:	93 07       	cpc	r25, r19
    10a6:	31 e0       	ldi	r19, 0x01	; 1
    10a8:	a3 07       	cpc	r26, r19
    10aa:	b1 05       	cpc	r27, r1
    10ac:	20 f0       	brcs	.+8      	; 0x10b6 <bme280_compensate_data+0x85a>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e9       	ldi	r25, 0x90	; 144
    10b2:	a1 e0       	ldi	r26, 0x01	; 1
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	f1 01       	movw	r30, r2
    10b8:	80 87       	std	Z+8, r24	; 0x08
    10ba:	91 87       	std	Z+9, r25	; 0x09
    10bc:	a2 87       	std	Z+10, r26	; 0x0a
    10be:	b3 87       	std	Z+11, r27	; 0x0b
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	07 c0       	rjmp	.+14     	; 0x10d2 <bme280_compensate_data+0x876>
    10c4:	8f ef       	ldi	r24, 0xFF	; 255
    10c6:	05 c0       	rjmp	.+10     	; 0x10d2 <bme280_compensate_data+0x876>
    10c8:	8f ef       	ldi	r24, 0xFF	; 255
    10ca:	03 c0       	rjmp	.+6      	; 0x10d2 <bme280_compensate_data+0x876>
    10cc:	8f ef       	ldi	r24, 0xFF	; 255
    10ce:	01 c0       	rjmp	.+2      	; 0x10d2 <bme280_compensate_data+0x876>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	29 96       	adiw	r28, 0x09	; 9
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	1f 91       	pop	r17
    10e4:	0f 91       	pop	r16
    10e6:	ff 90       	pop	r15
    10e8:	ef 90       	pop	r14
    10ea:	df 90       	pop	r13
    10ec:	cf 90       	pop	r12
    10ee:	bf 90       	pop	r11
    10f0:	af 90       	pop	r10
    10f2:	9f 90       	pop	r9
    10f4:	8f 90       	pop	r8
    10f6:	7f 90       	pop	r7
    10f8:	6f 90       	pop	r6
    10fa:	5f 90       	pop	r5
    10fc:	4f 90       	pop	r4
    10fe:	3f 90       	pop	r3
    1100:	2f 90       	pop	r2
    1102:	08 95       	ret

00001104 <bme280_get_sensor_data>:
    1104:	df 92       	push	r13
    1106:	ef 92       	push	r14
    1108:	ff 92       	push	r15
    110a:	0f 93       	push	r16
    110c:	1f 93       	push	r17
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	64 97       	sbiw	r28, 0x14	; 20
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	d8 2e       	mov	r13, r24
    1124:	7b 01       	movw	r14, r22
    1126:	8a 01       	movw	r16, r20
    1128:	fe 01       	movw	r30, r28
    112a:	31 96       	adiw	r30, 0x01	; 1
    112c:	98 e0       	ldi	r25, 0x08	; 8
    112e:	df 01       	movw	r26, r30
    1130:	1d 92       	st	X+, r1
    1132:	9a 95       	dec	r25
    1134:	e9 f7       	brne	.-6      	; 0x1130 <bme280_get_sensor_data+0x2c>
    1136:	38 96       	adiw	r30, 0x08	; 8
    1138:	9c e0       	ldi	r25, 0x0C	; 12
    113a:	df 01       	movw	r26, r30
    113c:	1d 92       	st	X+, r1
    113e:	9a 95       	dec	r25
    1140:	e9 f7       	brne	.-6      	; 0x113c <bme280_get_sensor_data+0x38>
    1142:	ca 01       	movw	r24, r20
    1144:	81 d7       	rcall	.+3842   	; 0x2048 <_etext+0xb50>
    1146:	81 11       	cpse	r24, r1
    1148:	1d c0       	rjmp	.+58     	; 0x1184 <bme280_get_sensor_data+0x80>
    114a:	e1 14       	cp	r14, r1
    114c:	f1 04       	cpc	r15, r1
    114e:	e1 f0       	breq	.+56     	; 0x1188 <bme280_get_sensor_data+0x84>
    1150:	98 01       	movw	r18, r16
    1152:	48 e0       	ldi	r20, 0x08	; 8
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	be 01       	movw	r22, r28
    1158:	6f 5f       	subi	r22, 0xFF	; 255
    115a:	7f 4f       	sbci	r23, 0xFF	; 255
    115c:	87 ef       	ldi	r24, 0xF7	; 247
    115e:	8d d7       	rcall	.+3866   	; 0x207a <_etext+0xb82>
    1160:	81 11       	cpse	r24, r1
    1162:	13 c0       	rjmp	.+38     	; 0x118a <bme280_get_sensor_data+0x86>
    1164:	be 01       	movw	r22, r28
    1166:	67 5f       	subi	r22, 0xF7	; 247
    1168:	7f 4f       	sbci	r23, 0xFF	; 255
    116a:	ce 01       	movw	r24, r28
    116c:	01 96       	adiw	r24, 0x01	; 1
    116e:	07 db       	rcall	.-2546   	; 0x77e <bme280_parse_sensor_data>
    1170:	98 01       	movw	r18, r16
    1172:	27 5f       	subi	r18, 0xF7	; 247
    1174:	3f 4f       	sbci	r19, 0xFF	; 255
    1176:	a7 01       	movw	r20, r14
    1178:	be 01       	movw	r22, r28
    117a:	67 5f       	subi	r22, 0xF7	; 247
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	8d 2d       	mov	r24, r13
    1180:	6d db       	rcall	.-2342   	; 0x85c <bme280_compensate_data>
    1182:	03 c0       	rjmp	.+6      	; 0x118a <bme280_get_sensor_data+0x86>
    1184:	8f ef       	ldi	r24, 0xFF	; 255
    1186:	01 c0       	rjmp	.+2      	; 0x118a <bme280_get_sensor_data+0x86>
    1188:	8f ef       	ldi	r24, 0xFF	; 255
    118a:	64 96       	adiw	r28, 0x14	; 20
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	de bf       	out	0x3e, r29	; 62
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	cd bf       	out	0x3d, r28	; 61
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	ff 90       	pop	r15
    11a0:	ef 90       	pop	r14
    11a2:	df 90       	pop	r13
    11a4:	08 95       	ret

000011a6 <setup_measurement_normal_mode>:
	return bme280_set_sensor_settings(BME280_OSR_PRESS_SEL|BME280_OSR_TEMP_SEL|BME280_OSR_HUM_SEL|BME280_FILTER_SEL, dev);
}
#else	
int8_t setup_measurement_normal_mode(struct bme280_dev *dev)
//int8_t stream_sensor_data_normal_mode(struct bme280_dev *dev)
{
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	ec 01       	movw	r28, r24
	int8_t rslt;
	uint8_t settings_sel;
	

	/* Recommended mode of operation: Indoor navigation */
	dev->settings.osr_h = BME280_OVERSAMPLING_1X;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	88 ab       	std	Y+48, r24	; 0x30
	dev->settings.osr_p = BME280_OVERSAMPLING_16X;
    11b0:	95 e0       	ldi	r25, 0x05	; 5
    11b2:	9e a7       	std	Y+46, r25	; 0x2e
	dev->settings.osr_t = BME280_OVERSAMPLING_2X;
    11b4:	92 e0       	ldi	r25, 0x02	; 2
    11b6:	9f a7       	std	Y+47, r25	; 0x2f
	dev->settings.filter = BME280_FILTER_COEFF_16;
    11b8:	94 e0       	ldi	r25, 0x04	; 4
    11ba:	99 ab       	std	Y+49, r25	; 0x31
	dev->settings.standby_time = BME280_STANDBY_TIME_62_5_MS;
    11bc:	8a ab       	std	Y+50, r24	; 0x32
	settings_sel = BME280_OSR_PRESS_SEL;
	settings_sel |= BME280_OSR_TEMP_SEL;
	settings_sel |= BME280_OSR_HUM_SEL;
	settings_sel |= BME280_STANDBY_SEL;
	settings_sel |= BME280_FILTER_SEL;
	rslt = bme280_set_sensor_settings(settings_sel, dev);
    11be:	be 01       	movw	r22, r28
    11c0:	8f e1       	ldi	r24, 0x1F	; 31
    11c2:	5e da       	rcall	.-2884   	; 0x680 <bme280_set_sensor_settings>
	#ifdef OUTPUT_LOG
	uart_send_string("BME280 sensor setup with state: ");uart_send_char(0x35+rslt);	uart_newline();
	#endif  //OUTPUT_LOG
	
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, dev);
    11c4:	be 01       	movw	r22, r28
    11c6:	83 e0       	ldi	r24, 0x03	; 3
    11c8:	9b da       	rcall	.-2762   	; 0x700 <bme280_set_sensor_mode>
	#ifdef OUTPUT_LOG
	uart_send_string("BME280 sensor setup with state: ");uart_send_char(0x35+rslt);uart_newline();
	#endif  //OUTPUT_LOG
	return rslt;
}
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	08 95       	ret

000011d0 <main>:
#endif //WEATHER_MONITORING

int main(void)
{
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	2c 97       	sbiw	r28, 0x0c	; 12
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
	struct bme280_data comp_data;
	INIT_STATUS_LED;
    11e4:	8c 9a       	sbi	0x11, 4	; 17
	
	cli();  //Disable interrupts
    11e6:	f8 94       	cli
	timer2_init(); //global timer init
    11e8:	64 d0       	rcall	.+200    	; 0x12b2 <timer2_init>
	uart_init(MYUBRR);
    11ea:	6c e0       	ldi	r22, 0x0C	; 12
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	ad d0       	rcall	.+346    	; 0x134e <uart_init>
	spi_init();
    11f4:	34 d0       	rcall	.+104    	; 0x125e <spi_init>
	sei();  // enable global interrupts
    11f6:	78 94       	sei
	#ifdef OUTPUT_LOG
	uart_send_string("Timer, UART & SPI Drivers initialized");	uart_newline();
	#endif  //OUTPUT_LOG
	
	/* Sensor_0 interface over SPI with native chip select line */
	sensor_interf.dev_id = 0;
    11f8:	10 92 2b 01 	sts	0x012B, r1
	sensor_interf.intf = BME280_SPI_INTF;
    11fc:	10 92 2c 01 	sts	0x012C, r1
	sensor_interf.read = spi_transfer_bme280;
    1200:	8c e3       	ldi	r24, 0x3C	; 60
    1202:	99 e0       	ldi	r25, 0x09	; 9
    1204:	90 93 2e 01 	sts	0x012E, r25
    1208:	80 93 2d 01 	sts	0x012D, r24
	sensor_interf.write = spi_transfer_bme280;
    120c:	90 93 30 01 	sts	0x0130, r25
    1210:	80 93 2f 01 	sts	0x012F, r24
	sensor_interf.delay_ms = timer_delay_ms;
    1214:	82 e6       	ldi	r24, 0x62	; 98
    1216:	99 e0       	ldi	r25, 0x09	; 9
    1218:	90 93 32 01 	sts	0x0132, r25
    121c:	80 93 31 01 	sts	0x0131, r24

	rslt = bme280_init(&sensor_interf);
    1220:	8a e2       	ldi	r24, 0x2A	; 42
    1222:	91 e0       	ldi	r25, 0x01	; 1
    1224:	da d8       	rcall	.-3660   	; 0x3da <bme280_init>
    1226:	80 93 60 00 	sts	0x0060, r24
	#endif  //OUTPUT_LOG
	
	#if WEATHER_MONITORING
	setup_measurement_weather_monitoring(&sensor_interf);
	#else
	setup_measurement_normal_mode(&sensor_interf);
    122a:	8a e2       	ldi	r24, 0x2A	; 42
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	bb df       	rcall	.-138    	; 0x11a6 <setup_measurement_normal_mode>
	#endif  //WEATHER_MONITORING
	
    while(1)
    {
		uart_newline();
		TOGGLE_STATUS_LED;
    1230:	10 e1       	ldi	r17, 0x10	; 16
	setup_measurement_normal_mode(&sensor_interf);
	#endif  //WEATHER_MONITORING
	
    while(1)
    {
		uart_newline();
    1232:	8d e0       	ldi	r24, 0x0D	; 13
    1234:	b0 d0       	rcall	.+352    	; 0x1396 <uart_send_char>
    1236:	8a e0       	ldi	r24, 0x0A	; 10
    1238:	ae d0       	rcall	.+348    	; 0x1396 <uart_send_char>
		TOGGLE_STATUS_LED;
    123a:	82 b3       	in	r24, 0x12	; 18
    123c:	81 27       	eor	r24, r17
    123e:	82 bb       	out	0x12, r24	; 18
		sensor_interf.delay_ms(40);  //delay needed for measurement to complete
		#ifdef OUTPUT_LOG
		uart_send_string("BME280 sensor force mode trigger with state: ");uart_send_char(0x35+rslt);uart_newline();
		#endif  //OUTPUT_LOG
		#else
		timer_delay_ms(1000);
    1240:	68 ee       	ldi	r22, 0xE8	; 232
    1242:	73 e0       	ldi	r23, 0x03	; 3
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	3d d0       	rcall	.+122    	; 0x12c4 <timer_delay_ms>
		#endif  //WEATHER_MONITORING
		
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &sensor_interf);
    124a:	4a e2       	ldi	r20, 0x2A	; 42
    124c:	51 e0       	ldi	r21, 0x01	; 1
    124e:	be 01       	movw	r22, r28
    1250:	6f 5f       	subi	r22, 0xFF	; 255
    1252:	7f 4f       	sbci	r23, 0xFF	; 255
    1254:	87 e0       	ldi	r24, 0x07	; 7
    1256:	56 df       	rcall	.-340    	; 0x1104 <bme280_get_sensor_data>
    1258:	80 93 60 00 	sts	0x0060, r24
    125c:	ea cf       	rjmp	.-44     	; 0x1232 <main+0x62>

0000125e <spi_init>:

/* SPI Initialization function*/
void spi_init(void)
{
	//For operating in master mode, MOSI, SS, SCK pins must be set as output
	SPI_DDR |= (1<<SPI_MOSI_PIN)|(1<<SPI_SS_PIN)|(1<<SPI_SCK_PIN);
    125e:	87 b3       	in	r24, 0x17	; 23
    1260:	8c 62       	ori	r24, 0x2C	; 44
    1262:	87 bb       	out	0x17, r24	; 23
	SPCR = 0;
    1264:	1d b8       	out	0x0d, r1	; 13
	SPSR = 0;
    1266:	1e b8       	out	0x0e, r1	; 14
	SPSR |= (1<<SPI2X);
    1268:	70 9a       	sbi	0x0e, 0	; 14
	//polarity & phase 00
	//spi clock pre-scaler = 64, see table bellow
	#if SPI_USE_INT
		SPCR |= (1<<SPIE)|(1<<SPE)|(1<<MSTR)/*|(1<<CPOL)|(1<<CPHA)*/|(1<<SPR0)|(1<<SPR1);
	#else
		SPCR |= (1<<SPE)|(1<<MSTR)/*|(1<<CPOL)|(1<<CPHA)*/|(1<<SPR0)|(1<<SPR1);
    126a:	8d b1       	in	r24, 0x0d	; 13
    126c:	83 65       	ori	r24, 0x53	; 83
    126e:	8d b9       	out	0x0d, r24	; 13
	1		0		0		fosc/2
	1		0		1		fosc/8
	1		1		0		fosc/32
	1		1		1		fosc/64
	*/
	INIT_CS_PIN(CS_BME280_DDR,CS_BME280_PIN);
    1270:	b8 9a       	sbi	0x17, 0	; 23
	INIT_CS_PIN(CS_LIS3MDL_DDR,CS_LIS3MDL_PIN);
    1272:	b9 9a       	sbi	0x17, 1	; 23
	INIT_CS_PIN(CS_FLASH_DDR,CS_FLASH_PIN);
    1274:	bd 9a       	sbi	0x17, 5	; 23
    1276:	08 95       	ret

00001278 <spi_transfer_bme280>:
*/
int8_t spi_transfer_bme280(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
	int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
	//select which Chip Select pin has	to be set low to activate the relevant device on the SPI bus
	if(dev_id == bme280) CLEAR_CS_PIN(CS_BME280_PORT,CS_BME280_PIN);
    1278:	81 11       	cpse	r24, r1
    127a:	01 c0       	rjmp	.+2      	; 0x127e <spi_transfer_bme280+0x6>
    127c:	c0 98       	cbi	0x18, 0	; 24
/*                SPI Send / Receive function definitions               */
/************************************************************************/
/* SPI Send and Receive 1 Byte function */
static uint8_t spi_transfer(uint8_t u8data)
{
	SPDR = u8data;
    127e:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF))){}
    1280:	77 9b       	sbis	0x0e, 7	; 14
    1282:	fe cf       	rjmp	.-4      	; 0x1280 <spi_transfer_bme280+0x8>
	return SPDR;
    1284:	9f b1       	in	r25, 0x0f	; 15
	int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
	//select which Chip Select pin has	to be set low to activate the relevant device on the SPI bus
	if(dev_id == bme280) CLEAR_CS_PIN(CS_BME280_PORT,CS_BME280_PIN);

	spi_transfer(reg_addr); // Write the register address, ignore the return
	for (uint16_t i = 0; i < len; i++)
    1286:	21 15       	cp	r18, r1
    1288:	31 05       	cpc	r19, r1
    128a:	71 f0       	breq	.+28     	; 0x12a8 <spi_transfer_bme280+0x30>
    128c:	fa 01       	movw	r30, r20
    128e:	24 0f       	add	r18, r20
    1290:	35 1f       	adc	r19, r21
    1292:	df 01       	movw	r26, r30
	{
		reg_data[i] = spi_transfer(reg_data[i]);
    1294:	90 81       	ld	r25, Z
/*                SPI Send / Receive function definitions               */
/************************************************************************/
/* SPI Send and Receive 1 Byte function */
static uint8_t spi_transfer(uint8_t u8data)
{
	SPDR = u8data;
    1296:	9f b9       	out	0x0f, r25	; 15
	while(!(SPSR & (1<<SPIF))){}
    1298:	77 9b       	sbis	0x0e, 7	; 14
    129a:	fe cf       	rjmp	.-4      	; 0x1298 <spi_transfer_bme280+0x20>
	return SPDR;
    129c:	9f b1       	in	r25, 0x0f	; 15
	if(dev_id == bme280) CLEAR_CS_PIN(CS_BME280_PORT,CS_BME280_PIN);

	spi_transfer(reg_addr); // Write the register address, ignore the return
	for (uint16_t i = 0; i < len; i++)
	{
		reg_data[i] = spi_transfer(reg_data[i]);
    129e:	9c 93       	st	X, r25
    12a0:	31 96       	adiw	r30, 0x01	; 1
	int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
	//select which Chip Select pin has	to be set low to activate the relevant device on the SPI bus
	if(dev_id == bme280) CLEAR_CS_PIN(CS_BME280_PORT,CS_BME280_PIN);

	spi_transfer(reg_addr); // Write the register address, ignore the return
	for (uint16_t i = 0; i < len; i++)
    12a2:	e2 17       	cp	r30, r18
    12a4:	f3 07       	cpc	r31, r19
    12a6:	a9 f7       	brne	.-22     	; 0x1292 <spi_transfer_bme280+0x1a>
	{
		reg_data[i] = spi_transfer(reg_data[i]);
	}
	if(dev_id == bme280) SET_CS_PIN(CS_BME280_PORT,CS_BME280_PIN);
    12a8:	81 11       	cpse	r24, r1
    12aa:	01 c0       	rjmp	.+2      	; 0x12ae <spi_transfer_bme280+0x36>
    12ac:	c0 9a       	sbi	0x18, 0	; 24
	return rslt;
}
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	08 95       	ret

000012b2 <timer2_init>:
	#if ATMEGA48
	TCCR2A = (1 << WGM21);
	//TCCR2B = (1 << CS22);  //for 64 prescaler
	TCCR2B = (1 << CS21)|(1 << CS20);  //for 32 prescaler
	#elif ATMEGA8
	TCCR2 = (1 << WGM21)|(1 << CS21)|(1 << CS20);
    12b2:	8b e0       	ldi	r24, 0x0B	; 11
    12b4:	85 bd       	out	0x25, r24	; 37
	#endif
	TCNT2 = 0;
    12b6:	14 bc       	out	0x24, r1	; 36
			
	#if ATMEGA48
	OCR2A = 125;
	TIMSK2  |= (1 << OCIE2A);  //Enable Timer1 output compare trigger OCIE2A	
	#elif ATMEGA8
	OCR2 = 125;
    12b8:	8d e7       	ldi	r24, 0x7D	; 125
    12ba:	83 bd       	out	0x23, r24	; 35
	TIMSK  |= (1 << OCIE2);  //Enable Timer1 output compare trigger OCIE2
    12bc:	89 b7       	in	r24, 0x39	; 57
    12be:	80 68       	ori	r24, 0x80	; 128
    12c0:	89 bf       	out	0x39, r24	; 57
    12c2:	08 95       	ret

000012c4 <timer_delay_ms>:
/************************************************************************/
/*	                 Timer Delay / Counter Functions                    */
/************************************************************************/
/* Millisecond wait function*/
void timer_delay_ms(uint32_t delay)
{
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
inline uint32_t timer_ms(void)
{
	//Not necessary to make atomic operation since it's 
	//a short and fast function and it is not critical if
	//returned value is +/- 1 ms in this case
	return timer_system_ms;
    12c8:	00 91 61 00 	lds	r16, 0x0061
    12cc:	10 91 62 00 	lds	r17, 0x0062
    12d0:	20 91 63 00 	lds	r18, 0x0063
    12d4:	30 91 64 00 	lds	r19, 0x0064
/* Millisecond wait function*/
void timer_delay_ms(uint32_t delay)
{
	//HINT: To increase time accuracy use a 0.97 coefficient on target_ms or delay 
	//Lack of accuracy of ~ 3.5% possible due to internal oscillator
	uint32_t target_ms = timer_ms() + (uint32_t)delay;
    12d8:	ab 01       	movw	r20, r22
    12da:	bc 01       	movw	r22, r24
    12dc:	40 0f       	add	r20, r16
    12de:	51 1f       	adc	r21, r17
    12e0:	62 1f       	adc	r22, r18
    12e2:	73 1f       	adc	r23, r19
inline uint32_t timer_ms(void)
{
	//Not necessary to make atomic operation since it's 
	//a short and fast function and it is not critical if
	//returned value is +/- 1 ms in this case
	return timer_system_ms;
    12e4:	80 91 61 00 	lds	r24, 0x0061
    12e8:	90 91 62 00 	lds	r25, 0x0062
    12ec:	a0 91 63 00 	lds	r26, 0x0063
    12f0:	b0 91 64 00 	lds	r27, 0x0064
void timer_delay_ms(uint32_t delay)
{
	//HINT: To increase time accuracy use a 0.97 coefficient on target_ms or delay 
	//Lack of accuracy of ~ 3.5% possible due to internal oscillator
	uint32_t target_ms = timer_ms() + (uint32_t)delay;
	while(timer_ms() < target_ms) { /*Wait*/ }
    12f4:	84 17       	cp	r24, r20
    12f6:	95 07       	cpc	r25, r21
    12f8:	a6 07       	cpc	r26, r22
    12fa:	b7 07       	cpc	r27, r23
    12fc:	98 f3       	brcs	.-26     	; 0x12e4 <timer_delay_ms+0x20>
}
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	08 95       	ret

00001304 <__vector_3>:
#if ATMEGA48
ISR (TIMER2_COMPA_vect)
#elif ATMEGA8
ISR (TIMER2_COMP_vect)
#endif
{
    1304:	1f 92       	push	r1
    1306:	0f 92       	push	r0
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	0f 92       	push	r0
    130c:	11 24       	eor	r1, r1
    130e:	8f 93       	push	r24
    1310:	9f 93       	push	r25
    1312:	af 93       	push	r26
    1314:	bf 93       	push	r27
	timer_system_ms++; //increment every 1 ms
    1316:	80 91 61 00 	lds	r24, 0x0061
    131a:	90 91 62 00 	lds	r25, 0x0062
    131e:	a0 91 63 00 	lds	r26, 0x0063
    1322:	b0 91 64 00 	lds	r27, 0x0064
    1326:	01 96       	adiw	r24, 0x01	; 1
    1328:	a1 1d       	adc	r26, r1
    132a:	b1 1d       	adc	r27, r1
    132c:	80 93 61 00 	sts	0x0061, r24
    1330:	90 93 62 00 	sts	0x0062, r25
    1334:	a0 93 63 00 	sts	0x0063, r26
    1338:	b0 93 64 00 	sts	0x0064, r27
}
    133c:	bf 91       	pop	r27
    133e:	af 91       	pop	r26
    1340:	9f 91       	pop	r25
    1342:	8f 91       	pop	r24
    1344:	0f 90       	pop	r0
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	0f 90       	pop	r0
    134a:	1f 90       	pop	r1
    134c:	18 95       	reti

0000134e <uart_init>:
/*                 Initialization Function definitions                  */
/************************************************************************/

/* UART Initialization function*/
void uart_init(uint32_t ubrr)
{
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
	UCSRA = 0x00; // turn everything off
    1352:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0x00;
    1354:	1a b8       	out	0x0a, r1	; 10
	UCSRC = 0x00;
    1356:	10 bc       	out	0x20, r1	; 32
	UBRRH = (uint8_t)(ubrr>>8);//Set baud rate
    1358:	07 2f       	mov	r16, r23
    135a:	18 2f       	mov	r17, r24
    135c:	29 2f       	mov	r18, r25
    135e:	33 27       	eor	r19, r19
    1360:	00 bd       	out	0x20, r16	; 32
	UBRRL = (uint8_t)ubrr;
    1362:	69 b9       	out	0x09, r22	; 9
	#if SET_U2X
	UCSRA = (1<<U2X);
    1364:	82 e0       	ldi	r24, 0x02	; 2
    1366:	8b b9       	out	0x0b, r24	; 11
	#endif
	//Receive and transmit enabled, receive complete interrupt enabled (USART_RXC)
	UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
    1368:	88 e9       	ldi	r24, 0x98	; 152
    136a:	8a b9       	out	0x0a, r24	; 10
	//8 data bits, 1 stop bit, UART operation, no parity
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
	#elif ATMEGA8
	// Set the most used serial settings: asynchrone, no parity, 8 bit, 1 stop bit.
	// The ATmega8 uses an URSEL bit, which is not present on newer chips.
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
    136c:	86 e8       	ldi	r24, 0x86	; 134
    136e:	80 bd       	out	0x20, r24	; 32
	#endif
	
	cr_flag = false;  // set default, no 'cr' detected yet.
    1370:	10 92 65 00 	sts	0x0065, r1
	tx_in = tx_out = rx_in = rx_out = 0;  // set all buffer indices to zero.
    1374:	10 92 66 00 	sts	0x0066, r1
    1378:	10 92 67 00 	sts	0x0067, r1
    137c:	10 92 68 00 	sts	0x0068, r1
    1380:	10 92 69 00 	sts	0x0069, r1
}
    1384:	1f 91       	pop	r17
    1386:	0f 91       	pop	r16
    1388:	08 95       	ret

0000138a <uart_tx_buflen>:

// Number of bytes as yet untransmitted
// Don't call this from an ISR
uint8_t uart_tx_buflen (void)
{
	return(tx_in - tx_out);
    138a:	80 91 69 00 	lds	r24, 0x0069
    138e:	90 91 68 00 	lds	r25, 0x0068
}
    1392:	89 1b       	sub	r24, r25
    1394:	08 95       	ret

00001396 <uart_send_char>:
/*                      Output Function definitions                     */
/************************************************************************/

/* UART Send 1 Byte function */
void uart_send_char(char data)
{
    1396:	1f 93       	push	r17
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	18 2f       	mov	r17, r24
	// If the character does not fit in buffer, it will still be transmitted, but it waits
	// until characters are transmitted and free space is available in the buffer.
	// If the transmit-buffer is full, wait for it, interrupts will empty it
	// There is no timeout.
	while((TX_BUFFER_SIZE - uart_tx_buflen()) <= 2) {}
    139e:	c0 e4       	ldi	r28, 0x40	; 64
    13a0:	d0 e0       	ldi	r29, 0x00	; 0
    13a2:	f3 df       	rcall	.-26     	; 0x138a <uart_tx_buflen>
    13a4:	9e 01       	movw	r18, r28
    13a6:	28 1b       	sub	r18, r24
    13a8:	31 09       	sbc	r19, r1
    13aa:	23 30       	cpi	r18, 0x03	; 3
    13ac:	31 05       	cpc	r19, r1
    13ae:	cc f3       	brlt	.-14     	; 0x13a2 <uart_send_char+0xc>
	// Add data to the transmit buffer, enable transmit interrupts
	txbuf[tx_in & TXMASK] = data;  // set character in circular buffer
    13b0:	e0 91 69 00 	lds	r30, 0x0069
    13b4:	ef 73       	andi	r30, 0x3F	; 63
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	e6 51       	subi	r30, 0x16	; 22
    13ba:	ff 4f       	sbci	r31, 0xFF	; 255
    13bc:	10 83       	st	Z, r17
	tx_in++;  // increment head index
    13be:	80 91 69 00 	lds	r24, 0x0069
    13c2:	8f 5f       	subi	r24, 0xFF	; 255
    13c4:	80 93 69 00 	sts	0x0069, r24
	UCSRB |= (1<<UDRIE);  // Enable UDR empty interrupt, the ISR will move from buffer to UART
    13c8:	55 9a       	sbi	0x0a, 5	; 10
}
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	08 95       	ret

000013d2 <__vector_12>:
/************************************************************************/

// Transmit complete interrupt
// USART transmit Data Register Empty interrupt.
ISR (USART_UDRE_vect)
{
    13d2:	1f 92       	push	r1
    13d4:	0f 92       	push	r0
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	0f 92       	push	r0
    13da:	11 24       	eor	r1, r1
    13dc:	8f 93       	push	r24
    13de:	9f 93       	push	r25
    13e0:	ef 93       	push	r30
    13e2:	ff 93       	push	r31
	if(tx_in != tx_out)  // is buffer empty ?
    13e4:	90 91 69 00 	lds	r25, 0x0069
    13e8:	80 91 68 00 	lds	r24, 0x0068
    13ec:	98 17       	cp	r25, r24
    13ee:	71 f0       	breq	.+28     	; 0x140c <__vector_12+0x3a>
	{
		UDR = txbuf[tx_out & TXMASK];
    13f0:	e0 91 68 00 	lds	r30, 0x0068
    13f4:	ef 73       	andi	r30, 0x3F	; 63
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	e6 51       	subi	r30, 0x16	; 22
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	80 81       	ld	r24, Z
    13fe:	8c b9       	out	0x0c, r24	; 12
		tx_out++;  // TMASK makes it unnecessary to range limit this
    1400:	80 91 68 00 	lds	r24, 0x0068
    1404:	8f 5f       	subi	r24, 0xFF	; 255
    1406:	80 93 68 00 	sts	0x0068, r24
    140a:	01 c0       	rjmp	.+2      	; 0x140e <__vector_12+0x3c>
	}
	else
	{
		UCSRB &= ~(1 << UDRIE);  // buffer is empty, disable interrupt
    140c:	55 98       	cbi	0x0a, 5	; 10
	}
}
    140e:	ff 91       	pop	r31
    1410:	ef 91       	pop	r30
    1412:	9f 91       	pop	r25
    1414:	8f 91       	pop	r24
    1416:	0f 90       	pop	r0
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	0f 90       	pop	r0
    141c:	1f 90       	pop	r1
    141e:	18 95       	reti

00001420 <__vector_11>:
// Bad:
//    The characters before the CR or LF might all be gone,
//    if the number of received characters is the same as the input buffer.
//
ISR (USART_RXC_vect)
{
    1420:	1f 92       	push	r1
    1422:	0f 92       	push	r0
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	0f 92       	push	r0
    1428:	11 24       	eor	r1, r1
    142a:	8f 93       	push	r24
    142c:	ef 93       	push	r30
    142e:	ff 93       	push	r31
	rxbuf[rx_in & RXMASK] = UDR;  // Put received char in buffer (no check for overflow)
    1430:	e0 91 67 00 	lds	r30, 0x0067
    1434:	ef 77       	andi	r30, 0x7F	; 127
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	8c b1       	in	r24, 0x0c	; 12
    143a:	e6 59       	subi	r30, 0x96	; 150
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	80 83       	st	Z, r24
	rx_in++;  // RMASK makes it unnecessary to range limit this
    1440:	80 91 67 00 	lds	r24, 0x0067
    1444:	8f 5f       	subi	r24, 0xFF	; 255
    1446:	80 93 67 00 	sts	0x0067, r24
    144a:	ff 91       	pop	r31
    144c:	ef 91       	pop	r30
    144e:	8f 91       	pop	r24
    1450:	0f 90       	pop	r0
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	0f 90       	pop	r0
    1456:	1f 90       	pop	r1
    1458:	18 95       	reti

0000145a <__mulsi3>:
    145a:	db 01       	movw	r26, r22
    145c:	8f 93       	push	r24
    145e:	9f 93       	push	r25
    1460:	2d d0       	rcall	.+90     	; 0x14bc <__muluhisi3>
    1462:	bf 91       	pop	r27
    1464:	af 91       	pop	r26
    1466:	a2 9f       	mul	r26, r18
    1468:	80 0d       	add	r24, r0
    146a:	91 1d       	adc	r25, r1
    146c:	a3 9f       	mul	r26, r19
    146e:	90 0d       	add	r25, r0
    1470:	b2 9f       	mul	r27, r18
    1472:	90 0d       	add	r25, r0
    1474:	11 24       	eor	r1, r1
    1476:	08 95       	ret

00001478 <__udivmodsi4>:
    1478:	a1 e2       	ldi	r26, 0x21	; 33
    147a:	1a 2e       	mov	r1, r26
    147c:	aa 1b       	sub	r26, r26
    147e:	bb 1b       	sub	r27, r27
    1480:	fd 01       	movw	r30, r26
    1482:	0d c0       	rjmp	.+26     	; 0x149e <__udivmodsi4_ep>

00001484 <__udivmodsi4_loop>:
    1484:	aa 1f       	adc	r26, r26
    1486:	bb 1f       	adc	r27, r27
    1488:	ee 1f       	adc	r30, r30
    148a:	ff 1f       	adc	r31, r31
    148c:	a2 17       	cp	r26, r18
    148e:	b3 07       	cpc	r27, r19
    1490:	e4 07       	cpc	r30, r20
    1492:	f5 07       	cpc	r31, r21
    1494:	20 f0       	brcs	.+8      	; 0x149e <__udivmodsi4_ep>
    1496:	a2 1b       	sub	r26, r18
    1498:	b3 0b       	sbc	r27, r19
    149a:	e4 0b       	sbc	r30, r20
    149c:	f5 0b       	sbc	r31, r21

0000149e <__udivmodsi4_ep>:
    149e:	66 1f       	adc	r22, r22
    14a0:	77 1f       	adc	r23, r23
    14a2:	88 1f       	adc	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	1a 94       	dec	r1
    14a8:	69 f7       	brne	.-38     	; 0x1484 <__udivmodsi4_loop>
    14aa:	60 95       	com	r22
    14ac:	70 95       	com	r23
    14ae:	80 95       	com	r24
    14b0:	90 95       	com	r25
    14b2:	9b 01       	movw	r18, r22
    14b4:	ac 01       	movw	r20, r24
    14b6:	bd 01       	movw	r22, r26
    14b8:	cf 01       	movw	r24, r30
    14ba:	08 95       	ret

000014bc <__muluhisi3>:
    14bc:	0f d0       	rcall	.+30     	; 0x14dc <__umulhisi3>
    14be:	a5 9f       	mul	r26, r21
    14c0:	90 0d       	add	r25, r0
    14c2:	b4 9f       	mul	r27, r20
    14c4:	90 0d       	add	r25, r0
    14c6:	a4 9f       	mul	r26, r20
    14c8:	80 0d       	add	r24, r0
    14ca:	91 1d       	adc	r25, r1
    14cc:	11 24       	eor	r1, r1
    14ce:	08 95       	ret

000014d0 <__mulshisi3>:
    14d0:	b7 ff       	sbrs	r27, 7
    14d2:	f4 cf       	rjmp	.-24     	; 0x14bc <__muluhisi3>

000014d4 <__mulohisi3>:
    14d4:	f3 df       	rcall	.-26     	; 0x14bc <__muluhisi3>
    14d6:	82 1b       	sub	r24, r18
    14d8:	93 0b       	sbc	r25, r19
    14da:	08 95       	ret

000014dc <__umulhisi3>:
    14dc:	a2 9f       	mul	r26, r18
    14de:	b0 01       	movw	r22, r0
    14e0:	b3 9f       	mul	r27, r19
    14e2:	c0 01       	movw	r24, r0
    14e4:	a3 9f       	mul	r26, r19
    14e6:	01 d0       	rcall	.+2      	; 0x14ea <__umulhisi3+0xe>
    14e8:	b2 9f       	mul	r27, r18
    14ea:	70 0d       	add	r23, r0
    14ec:	81 1d       	adc	r24, r1
    14ee:	11 24       	eor	r1, r1
    14f0:	91 1d       	adc	r25, r1
    14f2:	08 95       	ret

000014f4 <_exit>:
    14f4:	f8 94       	cli

000014f6 <__stop_program>:
    14f6:	ff cf       	rjmp	.-2      	; 0x14f6 <__stop_program>
